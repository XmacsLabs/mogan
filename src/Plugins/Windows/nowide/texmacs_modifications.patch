--- /tmp/nowide_standalone/nowide/cenv.hpp
+++ /tmp/TeXmacs/src/Plugins/Windows/nowide/cenv.hpp
@@ -78,6 +78,15 @@
         wstackstring wval;
         if(!wval.convert(value))
             return -1;
+// TeXmacs specific 2017: if Guile is not compiled with nowide we need to set the env variables with (w)putenv too 
+        char * s =  (char*) malloc(strlen(key) + strlen(value) + 2);
+        strcpy(s, key);
+        strcat(s, "=");
+        strcat(s, value);
+        wstackstring ws;
+        ws.convert(s);
+        _wputenv(ws.c_str());
+//end Texmacs specific
         if(SetEnvironmentVariableW(name.c_str(),wval.c_str()))
             return 0;
         return -1;
@@ -101,7 +110,7 @@
     {
         char const *key = string;
         char const *key_end = string;
-        while(*key_end!='=' && key_end!='\0')
+        while(*key_end!='=' && *key_end!='\0')
             key_end++;
         if(*key_end == '\0')
             return -1;
@@ -112,7 +121,11 @@
         wstackstring wvalue;
         if(!wvalue.convert(key_end+1))
             return -1;
-
+// TeXmacs specific 2017: if Guile is not compiled with nowide we need to set the env variables with (w)putenv too 
+        wstackstring wstring;
+        wstring.convert(string);
+        _wputenv(wstring.c_str());
+//end Texmacs specific
         if(SetEnvironmentVariableW(wkey.c_str(),wvalue.c_str()))
             return 0;
         return -1;
--- /tmp/nowide_standalone/nowide/cstdio.hpp
+++ /tmp/TeXmacs/src/Plugins/Windows/nowide/cstdio.hpp
@@ -7,6 +7,10 @@
 //
 #ifndef NOWIDE_CSTDIO_H_INCLUDED
 #define NOWIDE_CSTDIO_H_INCLUDED
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <dirent.h>
 
 #include <cstdio>
 #include <stdio.h>
@@ -75,7 +79,7 @@
     return _wrename(wold.c_str(),wnew.c_str());
 }
 ///
-/// \brief Same as rename but name is UTF-8 string
+/// \brief Same as remove but name is UTF-8 string
 ///
 /// If invalid UTF-8 given, -1 is returned and errno is set to EINVAL
 ///
@@ -86,8 +90,79 @@
         errno = EINVAL;
         return -1;
     }
-    return _wremove(wname.c_str());
+    int retval;
+    retval = _wremove(wname.c_str());
+    return (retval == -1)? _wrmdir (wname.c_str()) : retval;
 }
+///
+/// \brief Same as chmod but file_name and mode are UTF-8 strings
+///
+/// If invalid UTF-8 given, -1 is returned and errno is set to EINVAL
+///
+inline int chmod(char const *name, int const mode)
+{
+    wstackstring wname;
+    if(!wname.convert(name) ) {
+        errno = EINVAL;
+        return -1;
+    }
+    return _wchmod (wname.c_str(), mode);
+}
+	
+///
+/// \brief Same as mkdir but file_name and mode are UTF-8 strings
+///
+/// If invalid UTF-8 given, -1 is returned and errno is set to EINVAL
+///
+inline int mkdir(char const *name, int const mode)
+{
+    wstackstring wname;
+    if(!wname.convert(name) ) {
+        errno = EINVAL;
+        return -1;
+    }
+    return _wmkdir (wname.c_str());
+}
+#include <sys/stat.h>
+inline int stat(char const *name, struct_stat *buf)
+{
+    wstackstring wname;
+    if(!wname.convert(name)) {
+        errno = EINVAL;
+        return -1;
+    }
+    return _wstat32(wname.c_str(), buf);
+}
+typedef _WDIR DIR;
+inline DIR* opendir(char const *name)
+{
+    wstackstring wname;
+    if(!wname.convert(name) ) {
+        errno = EINVAL;
+        return NULL;
+    }
+    return _wopendir (wname.c_str());
+}
+
+inline char* readir_entry(DIR* dir)
+{
+  struct _wdirent *wentry;
+  wentry = _wreaddir (dir);
+  while (wentry 
+	     && (0 == wcscmp (wentry->d_name, L".") ||
+		 0 == wcscmp (wentry->d_name, L"..")))
+	     wentry = _wreaddir (dir);
+  if (wentry == NULL) return NULL;
+  else { 
+  stackstring entry;
+    if(!entry.convert(wentry->d_name) ) {
+        errno = EINVAL;
+        return NULL;
+    }
+    else return entry.c_str();
+  }
+} 
+
 #endif
 } // nowide
 

