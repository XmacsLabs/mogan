<TMU|<tuple|1.0.3|1.2.9.2-rc1>>

<style|<tuple|tmmanual|english>>

<\body>
  <title|Mogan <name|Scheme> developer guide>

  <\table-of-contents|toc>
    <vspace*|1fn><with|font-series|bold|math-font-series|bold|font-shape|small-caps|1.<space|2spc>Overview of the <with|font-shape|small-caps|Scheme> extension language> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-1><vspace|0.5fn>

    1.1.<space|2spc>Why T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> uses <with|font-shape|small-caps|Scheme> as its extension language <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-3>

    1.2.<space|2spc>When and how to use <with|font-shape|small-caps|Scheme> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-5>

    <with|par-left|3tab|User provided initialization files <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-6>>

    <with|par-left|3tab|User provided plug-ins <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-9>>

    <with|par-left|3tab|Interactive invocation of <with|font-shape|small-caps|Scheme> commands <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-10>>

    <with|par-left|3tab|Command-line options for executing <with|font-shape|small-caps|Scheme> commands <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-12>>

    <with|par-left|3tab|Invoking <with|font-shape|small-caps|Scheme> scrips from T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> markup <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-13>>

    1.3.<space|2spc>General architecture of the <with|font-shape|small-caps|Scheme> API <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-19>

    <with|par-left|3tab|Built-in <with|font-shape|small-caps|Scheme> commands <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-21>>

    <with|par-left|3tab|Extensions to <with|font-shape|small-caps|Scheme> and further utilities <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-22>>

    <with|par-left|3tab|Internal modules and plug-ins <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-23>>

    1.4.<space|2spc>The module system and lazy definitions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-24>

    1.5.<space|2spc>Contextual overloading <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-25>

    1.6.<space|2spc>Meta information and logical programming <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-26>

    1.7.<space|2spc>The T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> content model <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-29>

    <with|par-left|3tab|Passive documents and <with|font-shape|small-caps|Scheme> trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-30>>

    <with|par-left|3tab|Active documents and C++ trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-31>>

    <with|par-left|3tab|A common framework <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-32>>

    <with|par-left|3tab|Persistent positions inside trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-33>>

    1.8.<space|2spc>Standard utilities <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-34>

    <with|par-left|3tab|Regular expressions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-35>>

    <with|par-left|3tab|Dialogues <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-36>>

    <with|par-left|3tab|User preferences <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-37>>

    <with|par-left|3tab|New data formats and converters <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-38>>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|font-shape|small-caps|2.<space|2spc>T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> extensions to <with|font-shape|small-caps|Scheme> and utilities> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-41><vspace|0.5fn>

    2.1.<space|2spc>T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> abbreviations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-42>

    2.2.<space|2spc>Matching regular expressions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-43>

    2.3.<space|2spc>Selection of subexpressions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-44>

    2.4.<space|2spc>Logical programming extensions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-45>

    2.5.<space|2spc>Function definition and contextual overloading <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-46>

    <with|par-left|3tab|Contextual overloading <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-47>>

    <with|par-left|3tab|Other options for function and macro declarations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-48>>

    2.6.<space|2spc>Interactive dialogues <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-49>

    2.7.<space|2spc>User preferences <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-50>

    2.8.<space|2spc>Adding converters <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-51>

    2.9.<space|2spc>Keyboard bindings <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-52>

    2.10.<space|2spc>Defining menus <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-53>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|font-shape|small-caps|3.<space|2spc>Programming routines for editing documents> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-54><vspace|0.5fn>

    3.1.<space|2spc>The T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> editing model <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-55>

    <with|par-left|3tab|Document fragments <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-56>>

    <with|par-left|3tab|Positions inside document fragments <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-57>>

    <with|par-left|3tab|Semantic navigation and further utilities <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-58>>

    <with|par-left|3tab|A worked example <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-59>>

    3.2.<space|2spc>Fundamental tree modification routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-60>

    3.3.<space|2spc>High level modification routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-64>

    3.4.<space|2spc>Path-based navigation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-65>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|font-shape|small-caps|4.<space|2spc>T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> buffer management> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-66><vspace|0.5fn>

    4.1.<space|2spc>Introduction <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-67>

    4.2.<space|2spc>Manipulating T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> buffers <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-68>

    <with|par-left|3tab|Basic buffer management <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-69>>

    <with|par-left|3tab|Information associated to buffers <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-70>>

    <with|par-left|3tab|Synchronizing with the external world <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-71>>

    4.3.<space|2spc>Manipulating T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> views <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-72>

    4.4.<space|2spc>Manipulating T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> windows <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-73>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|font-shape|small-caps|5.<space|2spc>Scheme interface for the graphical mode> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-74><vspace|0.5fn>

    5.1.<space|2spc>Low level graphics manipulation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-75>

    <with|par-left|3tab|Rationale <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-76>>

    <with|par-left|3tab|Definitions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-77>>

    <with|par-left|3tab|Manipulation of enhanced trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-78>>

    <with|par-left|3tab|Sketch manipulation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-79>>

    <with|par-left|3tab|Miscellaneous <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-80>>

    5.2.<space|2spc>Graphics interface between C++ and <with|font-shape|small-caps|Scheme> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-81>

    <with|par-left|3tab|Rationale <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-82>>

    <with|par-left|3tab|Definitions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-83>>

    <with|par-left|3tab|Coordinate transformations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-84>>

    <with|par-left|3tab|Grid routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-85>>

    <with|par-left|3tab|Selection of shapes <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-86>>

    <with|par-left|3tab|Computations with shapes <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-87>>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|font-shape|small-caps|6.<space|2spc>Extending the graphical user interface> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-88><vspace|0.5fn>

    6.1.<space|2spc>An introduction to widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-89>

    6.2.<space|2spc>Menus and toolbars <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-90>

    6.3.<space|2spc>Displaying lists and trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-91>

    <with|par-left|3tab|Displaying lists with <with|mode|prog|prog-language|scheme|<with|font|roman|font-family|tt|magnification|1.06|enum>>, <with|mode|prog|prog-language|scheme|<with|font|roman|font-family|tt|magnification|1.06|choice>> and <with|mode|prog|prog-language|scheme|<with|font|roman|font-family|tt|magnification|1.06|choices>> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-92>>

    <with|par-left|3tab|Displaying trees with <with|mode|prog|prog-language|scheme|<with|font|roman|font-family|tt|magnification|1.06|tree-widget>> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-93>>

    <with|par-left|3tab|Default data roles <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-94>>

    <with|par-left|3tab|Using commands <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-95>>

    <with|par-left|3tab|Examples <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-96>>

    <with|par-left|3tab|An example using data roles <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-97>>

    <with|par-left|4tab|An example using the buffer tree <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-98>>

    <with|par-left|4tab|An example with the side tools <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-99>>

    6.4.<space|2spc>Dialogs and composite widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-100>

    <with|par-left|1tab|6.4.1.<space|2spc>Composite widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-101>>

    6.5.<space|2spc>Forms <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-102>

    6.6.<space|2spc>Containers, glue, refresh and co. <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-103>

    <with|par-left|1tab|6.6.1.<space|2spc>Attribute widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-104>>

    <with|par-left|1tab|6.6.2.<space|2spc>Container or layout widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-105>>

    <with|par-left|1tab|6.6.3.<space|2spc>Glue widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-106>>

    <with|par-left|1tab|6.6.4.<space|2spc>Refresh widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-107>>

    6.7.<space|2spc>Widgets reference guide <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-108>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|font-shape|small-caps|7.<space|2spc>Writing T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> bibliography styles> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-109><vspace|0.5fn>

    7.1.<space|2spc>Introduction <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-110>

    7.2.<space|2spc>Example of a simple bibliography style <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-111>

    7.3.<space|2spc><with|font-shape|small-caps|Scheme> functions for writing bibliography styles <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-112>

    <with|par-left|1tab|7.3.1.<space|2spc>Style management <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-113>>

    <with|par-left|1tab|7.3.2.<space|2spc>Field related routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-114>>

    <with|par-left|1tab|7.3.3.<space|2spc>Routines for structuring the output <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-115>>

    <with|par-left|1tab|7.3.4.<space|2spc>Routines for textual manipulations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-116>>

    <with|par-left|1tab|7.3.5.<space|2spc>Miscellaneous routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-117>>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|font-shape|small-caps|8.<space|2spc>About the API documentation> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-118><vspace|0.5fn>

    8.1.<space|2spc>The T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> file system <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-119>

    <with|par-left|1tab|8.1.1.<space|2spc>A <with|language|verbatim|<with|font|roman|font-family|tt|magnification|1.06|tmfs>> primer <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-120>>

    <with|par-left|1tab|8.1.2.<space|2spc>The T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> filesystem <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-121>>

    <with|par-left|1tab|8.1.3.<space|2spc>Implementing a handler <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-122>>

    <with|par-left|1tab|8.1.4.<space|2spc>Installing the handler <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-123>>

    8.2.<space|2spc>The URL system <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-124>

    <with|par-left|1tab|8.2.1.<space|2spc>Navigation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-125>>

    <with|par-left|1tab|8.2.2.<space|2spc>Predicates <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-126>>

    <with|par-left|1tab|8.2.3.<space|2spc>Operations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-127>>

    <with|par-left|1tab|8.2.4.<space|2spc>Resolution <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-128>>

    8.3.<space|2spc>Notification and download of updates <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-129>

    <with|par-left|1tab|8.3.1.<space|2spc>Operating system specifics <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-130>>

    <with|par-left|1tab|8.3.2.<space|2spc>Client side interface <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-131>>

    8.4.<space|2spc>All glue functions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-132>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|font-shape|small-caps|Index> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-133><vspace|0.5fn>
  </table-of-contents>

  <chapter|Overview of the <scheme> extension language><label|sec-scheme-overview>

  One major characteristic of <TeXmacs> is the possibility to extend the editor using the <name|Guile>-<scheme> <em|extension language>.<\footnote>
    Mogan is using Goldfish Scheme as an extension language.
  </footnote> Such extensions can be simple, like a personal boot file containing frequently used keyboard shortcuts, or more complex, like a plug-in with special editing routines for a particular type of documents. The <scheme> language can also be used interactively from within the editor or invoked by special markup like “actions”.

  In this chapter, we give an overview of why and how to use <scheme> from within <TeXmacs>. The first sections provide sufficient information for someone who wants to program some basic customization of the keyboard and menus. The latter sections give an introduction to the general architecture of the <scheme> API and some important features and particularities of way <scheme> is used within <TeXmacs>. The reading of the overview is highly recommended to anyone who wants to make non-trivial use of <scheme> inside <TeXmacs>.

  More complete documentation about the <scheme> modules provided by <TeXmacs> is available from the <menu|Help|Scheme extensions> menu. We also recommend the following on-line manuals about <scheme> and its <name|Guile> implementation:

  <\itemize-minus>
    <item>The <scheme> programming language.

    <item>Guile reference manual.
  </itemize-minus>

  For further information about <scheme>, we refer to <verbatim|www.schemers.org> or community.schemewiki.org. As a general rule, we also encourage users to take a look at the <TeXmacs> source code for concrete examples on how to use <scheme> from within <TeXmacs>.

  <section|Why <TeXmacs> uses <scheme> as its extension language><label|sec-overview-why>

  At a first glance, the choice of <scheme> as an extension language for <TeXmacs> may seem a bit strange for people who are accustomed to more conventional programming languages, such as <name|C++>, <name|Java> or<nbsp><name|Python>. In particular, its heavy use of parenthesis frightens more than one person.

  Our choice of <scheme> has been motivated by the fact that the language is highly flexible in several<nbsp>ways:

  <\enumerate>
    <item>It is easy to mix programs and data in a common framework.

    <item>It is easy to customize the language itself, by adding new programming constructs.

    <item>It is easy to write programs on a very abstract level.
  </enumerate>

  The first two features are very particular important for extension languages. Indeed, one major use of extension languages is to store data for the application (like keyboard shortcuts and menus) in an intelligent way. Furthermore, the application usually provides some very typical features, which may need to be reflected at the level of the extension language.

  For the first two features, the simplicity of the parenthesized notation used by <scheme> is also an advantage. Indeed, consider the following fragment of the definition of the <menu|File> menu:

  <\scm-code>
    (menu-bind file-menu

    \ \ ("New" (new-buffer))

    \ \ ("Load" (choose-file load-buffer "Load file" ""))

    \ \ ("Save" (save-buffer))

    \ \ ...)
  </scm-code>

  The entries of the menu (the data) and the corresponding actions (the programs) are very readable using the bracket notation. Similarly, when defining a new language primitive, the systematic use of the bracket notation relieves the user from the burden of making the corresponding changes in the parser.

  <section|When and how to use <scheme>><label|sec-overview-start>

  You may invoke <scheme> programs from <TeXmacs> in different ways, depending on whether you want to customize some aspects of <TeXmacs>, to extend the editor with new functionality, to make your markup more dynamic, and so on. In this section, we list the major ways to invoke <scheme> routines.

  <paragraph*|User provided initialization files>

  In order to customize the basic aspects of <TeXmacs>, you may provide one or both of the initialization files

  <\verbatim>
    \ \ \ \ ~/.TeXmacs/progs/my-init-texmacs.scm<new-line> \ \ \ ~/.TeXmacs/progs/my-init-buffer.scm
  </verbatim>

  The file <verbatim|my-init-texmacs.scm> is loaded when booting <TeXmacs> and <verbatim|my-init-buffer.scm> is booted each time you open a file.

  Usually, the file <verbatim|my-init-texmacs.scm> contains personal keyboard bindings and menus. For instance, when putting the following piece of code in this file, the keyboard shortcuts <key|T h .> and <key|P r o p .> for starting a new theorem <abbr|resp.> proposition:

  <\scm-code>
    (kbd-map

    \ \ ("D e f ." (make 'definition))

    \ \ ("L e m ." (make 'lemma))

    \ \ ("P r o p ." (make 'proposition))

    \ \ ("T h ." (make 'theorem)))
  </scm-code>

  Similarly, the following command extends the standard <menu|Insert> menu with a special section for the insertion of greetings:

  <\scm-code>
    (menu-bind insert-menu

    \ \ (former)

    \ \ ---

    \ \ (-\<gtr\> "Opening"

    \ \ \ \ \ \ ("Dear Sir" (insert "Dear Sir,"))

    \ \ \ \ \ \ ("Dear Madam" (insert "Dear Madam,")))

    \ \ (-\<gtr\> "Closing"

    \ \ \ \ \ \ ("Yours sincerely" (insert "Yours sincerely,"))

    \ \ \ \ \ \ ("Greetings" (insert "Greetings,"))))
  </scm-code>

  The customization of the <hlink|keyboard|#sec-utils-keyboard> and <hlink|menus|#sec-utils-menus> is described in more detail in the chapter about the <TeXmacs> extensions of <scheme>. Notice also that, because of the <hlink|lazy loading mechanism|#sec-overview-lazyness>, you can not always assume that the standard key-bindings and menus are loaded before <verbatim|my-init-texmacs.scm>. This implies that some care is needed in the case of <hlink|redefinitions|#redefinitions>.

  The file <verbatim|my-init-buffer.scm> can for instance be used in order to automatically select a certain style when starting a new document:

  <\scm-code>
    (if (not (buffer-has-name? (current-buffer)))

    \ \ \ \ (begin

    \ \ \ \ \ \ (init-style "article")

    \ \ \ \ \ \ (buffer-pretend-saved (current-buffer))))
  </scm-code>

  Notice that the “no name” check is important: when omitted, the styles of existing documents would also be changed to <tmstyle|article>. The function <scm|buffer-pretend-saved> is used in order to avoid <TeXmacs> to complain about unsaved documents when leaving <TeXmacs> without changing the document.

  Another typical use of <verbatim|my-init-buffer.scm> is when you mainly want to use <TeXmacs> as a front-end to another system. For instance, the following code will force <TeXmacs> to automatically launch a <name|Maxima> session for every newly opened document:

  <\scm-code>
    (if (not (buffer-has-name? (current-buffer)))

    \ \ \ \ (make-session "maxima" (url-\<gtr\>string (current-buffer))))
  </scm-code>

  Using <scm|(url-\<gtr\>string (current-buffer))> as the second argument of <scm|make-session> ensures that a different session will be opened for every new buffer. If you want all buffers to share a common instance of <name|Maxima>, then you should use <scm|"default"> instead, for the second argument.

  <paragraph*|User provided plug-ins>

  The above technique of <scheme> initialization files is sufficient for personal customizations of <TeXmacs>, but not very convenient if you want to share extensions with other users. A more portable way to extend the editor is therefore to regroup your <scheme> programs into a <em|plug-in>.

  The simplest way to write a plug-in <verbatim|<em|name>> with some additional <scheme> functionality is to create two directories and a file

  <\verbatim>
    \ \ \ \ ~/.TeXmacs/plugins/<em|name><new-line> \ \ \ ~/.TeXmacs/plugins/<em|name>/progs<new-line> \ \ \ ~/.TeXmacs/plugins/<em|name>/progs/init-<em|name>.scm
  </verbatim>

  Furthermore, the file <verbatim|init-<em|name>.scm> should a piece of configuration code of the form

  <\scm-code>
    (plugin-configure <em|name>

    \ \ (:require #t))
  </scm-code>

  Any other <scheme> code present in <verbatim|init-<em|name>.scm> will then be executed when the plug-in is booted, that is, shortly after <TeXmacs> is started up. By using the additional <scm|(:prioritary #t)> option, you may force the plug-in to be loaded earlier during the boot procedure.

  Of course, the plug-in mechanism is more interesting when the plug-in contains more than a few customization routines. In general, a plug-in may also contain additional style files or packages, scripts for launching extern binaries, additional icons and internationalization files, and so on. Furthermore, <scheme> extensions are usually regrouped into <scheme> modules in the directory

  <\verbatim>
    \ \ \ \ ~/.TeXmacs/plugins/<em|name>/progs
  </verbatim>

  The initialization file <verbatim|init-<em|name>.scm> should then be kept as short as possible so as to save boot time: it usually only contains <hlink|lazy declarations|#sec-overview-lazyness> which allow <TeXmacs> to load the appropriate modules only when needed.

  For more information about how to write plug-ins, we refer to the corresponding chapter.

  <paragraph*|Interactive invocation of <scheme> commands>

  In order to rapidly test the effect of <scheme> commands, it is convenient to execute them directly from within the editor. <TeXmacs> provides two mechanisms for doing this: directly type the command on the footer using the <shortcut|(interactive footer-eval)> shortcut, or start a <scheme> session using <menu|Insert|Session|Scheme>.

  The first mechanism is useful when you do not want to alter the document or when the current cursor position is important for the command you wish to execute. For instance, the command <verbatim|(inside? 'theorem)> to test whether the cursor is inside a theorem usually makes no sense when you are inside a session.

  <scheme> sessions are useful when the results of the <scheme> commands do not fit on the footer, or when you want to keep your session inside a document for later use. Some typical commands you might want to use inside a <scheme> session are as follows (try positioning your cursor inside the session and execute them):

  <\session|scheme|default>
    <\folded-io|scheme] >
      (define (square x) (* x x))
    </folded-io|>

    <\folded-io|scheme] >
      (square 1111111)
    </folded-io|>

    <\folded-io|scheme] >
      (kbd-map ("h i ." (insert "Hi there!")))
    </folded-io|>

    <\folded-io|scheme] >
      ;; try typing ‘‘hi.''
    </folded-io|>
  </session>

  <paragraph*|Command-line options for executing <scheme> commands>

  <TeXmacs> also provides several command-line options for the execution of <scheme> commands. This is useful when you want to use <TeXmacs> as a batch processor. The <scheme>-related options are the following:

  <\description-long>
    <item*|<with|font-series|medium|<verbatim|-x <em|cmd>>>>Executes the scheme command <verbatim|<em|cmd>> when booting has completed. For instance,

    <\shell-code>
      texmacs -x "(display \\"Hi there\\\\n\\")"
    </shell-code>

    causes <TeXmacs> to print ‘‘Hi there!'' when starting up. Notice that the <verbatim|-x> option may be used several times.

    <item*|<with|font-series|medium|<verbatim|-q>>>This option causes <TeXmacs> to quit. It is usually used after a <verbatim|-x> option. For instance,

    <\shell-code>
      texmacs text.tm -x "(print)" -q
    </shell-code>

    will cause <TeXmacs> to load the file <verbatim|text.tm>, to print it, and quit.

    <item*|<with|font-series|medium|<verbatim|-c <em|in> <em|out>>>>This options may be used to convert the input file <verbatim|<em|in>> into the output file <verbatim|<em|out>>. The suffixes of <verbatim|<em|in>> and <verbatim|<em|out>> determine their file formats.
  </description-long>

  <paragraph*|Invoking <scheme> scrips from <TeXmacs> markup>

  <label|markup-scripts><TeXmacs> provides two major tags for invoking <scheme> scripts from within the markup:

  <\description-long>
    <item*|<with|font-series|medium|<explain-macro|action|text|script>>>This tag works like a hyperlink with body <src-arg|text>, but such that the <scheme> command <src-arg|script> is invoked when clicking on the <src-arg|text>. For instance, when clicking <action|here|(lambda () (system "xterm"))>, you will launch an<nbsp><verbatim|xterm>.

    <item*|<with|font-series|medium|<explain-macro|extern|fun|arg-1|...|arg-n>>>This tag is used in order to implement macros whose body is written in <scheme> rather than the<nbsp><TeXmacs> macro language. The first argument <src-arg|fun> is a scheme function with <src-arg|n> arguments. During the typesetting phase, <TeXmacs> passes the arguments <src-arg|arg-1> until <src-arg|arg-n> to<nbsp><src-arg|fun>, and the result will be typeset. For instance, the code

    <\tm-fragment>
      <inactive*|<extern|(lambda (x) ‘(concat "Hallo " ,x))|Piet>>
    </tm-fragment>

    produces the output ‘‘<extern|(lambda (x) ‘(concat "Hallo " ,x))|Piet>''. Notice that the argument ‘‘Piet'' remains editable.
  </description-long>

  It should be noticed that the direct invocation of <scheme> scripts from within documents carries as risk: an evil person might send you a document with a script which attempts to erase your hard disk (for instance). For this reason, <TeXmacs> implements a way to test whether scripts can be considered secure or not. For instance, when clicking <action|here|(lambda () (system "xterm"))> (so as to launch an <verbatim|xterm>), the editor will prompt you by default in order to confirm whether you wish to execute this script. The desired level of security can be specified in <menu|Edit|Preferences|Security>. When writing your own <scheme> extensions to <TeXmacs>, it is also possible to define routines as being secure.

  <section|General architecture of the <scheme> API><label|sec-overview-architecture>

  When programming <scheme> extensions of <TeXmacs>, it may be useful to be conscious of the internal architecture of the <scheme> modules inside <TeXmacs> (see figure <reference|scheme-api-fig>).

  <big-figure|<with|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|4|none>>|gr-mode|<tuple|edit|cline>|gr-fill-color|black|gr-line-width|1ln|<graphics||<with|fill-color|grey|<cline|<point|-6.5|-0.5>|<point|6.5|-0.5>|<point|6.5|-4>|<point|-6.5|-4>>>|<with|fill-color|pastel grey|<cline|<point|-4|-2>|<point|4|-2>|<point|4|-1>|<point|-4|-1>>>|<with|fill-color|pastel grey|<cline|<point|-6|-1>|<point|-4.5|-1>|<point|-4.5|-2.5>|<point|-0.25|-2.5>|<point|-0.25|-3.5>|<point|-6|-3.5>>>|<with|fill-color|pastel grey|<cline|<point|0.25|-2.5>|<point|4.5|-2.5>|<point|4.5|-1>|<point|6|-1>|<point|6|-3.5>|<point|0.25|-3.5>>>|<with|text-at-halign|center|text-at-valign|center|<text-at|<scheme> routines from glue|<point|3.25|-3>>>|<with|text-at-halign|center|text-at-valign|center|<text-at|Standard <scheme> language|<point|-3.25|-3>>>|<line|<point|-2.25|-2>>|<line|<point|-2.25|-2>>|<with|fill-color|black|color|none|<cline|<point|-2.5|-2.25>|<point|-2.25|-2>|<point|-2|-2.25>>>|<with|fill-color|black|color|none|<cline|<point|1.75|-2.25>|<point|2|-2>|<point|2.25|-2.25>>>|<with|fill-color|black|color|none|<cline|<point|-0.25|-0.75>|<point|0|-0.5>|<point|0.25|-0.75>>>|<with|fill-color|black|color|none|<cline|<point|-5.5|-0.75>|<point|-5.25|-0.5>|<point|-5|-0.75>>>|<with|fill-color|black|color|none|<cline|<point|5|-0.75>|<point|5.25|-0.5>|<point|5.5|-0.75>>>|<with|line-width|2ln|<line|<point|-2.25|-2.5>|<point|-2.25|-2.25>>>|<with|line-width|2ln|<line|<point|2|-2.5>|<point|2|-2.25>>>|<with|line-width|2ln|<line|<point|0|-1>|<point|0|-0.75>>>|<with|line-width|2ln|<line|<point|-5.25|-1>|<point|-5.25|-0.75>>>|<with|line-width|2ln|<line|<point|5.25|-1>|<point|5.25|-0.75>>>|<with|fill-color|pastel grey|<cline|<point|-6.5|0>|<point|6.5|0>|<point|6.5|-0.5>|<point|-6.5|-0.5>>>|<with|fill-color|grey|<cline|<point|-6.5|1>|<point|-6.5|3.5>|<point|-0.5|3.5>|<point|-0.5|1>>>|<with|fill-color|grey|<cline|<point|0.5|3.5>|<point|6.5|3.5>|<point|6.5|1>|<point|0.5|1>>>|<with|fill-color|pastel grey|<cline|<point|-6|2.5>|<point|-6|1.5>|<point|-4.5|1.5>|<point|-4.5|2.5>>>|<with|fill-color|pastel grey|<cline|<point|-4.25|1.5>|<point|-2.75|1.5>|<point|-2.75|2.5>|<point|-4.25|2.5>>>|<with|fill-color|pastel grey|<cline|<point|-2.5|1.5>|<point|-1|1.5>|<point|-1|2.5>|<point|-2.5|2.5>>>|<with|fill-color|pastel grey|<cline|<point|1|2.5>|<point|1|1.5>|<point|2.5|1.5>|<point|2.5|2.5>>>|<with|fill-color|pastel grey|<cline|<point|2.75|2.5>|<point|2.75|1.5>|<point|4.25|1.5>|<point|4.25|2.5>>>|<with|fill-color|pastel grey|<cline|<point|4.5|1.5>|<point|6|1.5>|<point|6|2.5>|<point|4.5|2.5>>>|<with|text-at-halign|center|text-at-valign|center|<text-at|Plug-ins|<point|3.5|3>>>|<with|text-at-halign|center|text-at-valign|center|<text-at|Internal modules|<point|-3.5|3>>>|<with|line-width|2ln|<line|<point|-3.5|0>|<point|-3.5|1>>>|<with|line-width|2ln|<line|<point|3.5|0>|<point|3.5|1>>>|<with|line-width|2ln|<line|<point|-0.5|2.25>|<point|0.5|2.25>>>|<with|fill-color|black|color|none|<cline|<point|-3.75|0.75>|<point|-3.5|1>|<point|-3.25|0.75>>>|<with|fill-color|black|color|none|<cline|<point|3.25|0.75>|<point|3.5|1>|<point|3.75|0.75>>>|<with|fill-color|black|color|none|<cline|<point|0.25|2.5>|<point|0.5|2.25>|<point|0.25|2>>>|<with|text-at-halign|center|text-at-valign|center|<text-at|Language extensions, utilities and libraries|<point|0|-1.5>>>>>|<label|scheme-api-fig>Schematic organization of the <scheme> API.>

  <paragraph*|Built-in <scheme> commands>

  On the very basic level, one has the standard <scheme> language, with some enhancements by the <name|Guile> implementation (these extensions are used as least as possible, for future portability). The standard <scheme> language is enriched by some routines implemented in the C++ part of <TeXmacs> and exported to <scheme> via the glue. If you unpacked the source code of <TeXmacs> in <verbatim|<em|source-dir>>, then you can find a full list of the routines exported by the glue in the files

  <verbatim| \ \ \ <em|source-dir>/src/Guile/Glue/build-glue-base.scm<new-line> \ \ \ <em|source-dir>/src/Guile/Glue/build-glue-editor.scm<new-line> \ \ \ <em|source-dir>/src/Guile/Glue/build-glue-server.scm>

  <paragraph*|Extensions to <scheme> and further utilities>

  Above the standard <scheme> language and the extra routines from the glue, <TeXmacs> comes with a second level of language extensions, utilities and libraries. The corresponding <scheme> files can be found in the directories

  <verbatim| \ \ \ $TEXMACS_PATH/progs/kernel<new-line> \ \ \ $TEXMACS_PATH/progs/utils>

  Roughly speaking, the functionality provided by this second level is the following:

  <\itemize>
    <item>A certain number of frequently used <hlink|abbreviations|#sec-utils-abbrevs>, like <scm|==> for <scm|equal?>.

    <item>General language extensions for <hlink|contextual overloading|#sec-overview-overloading>, <hlink|logical programming|#sec-overview-meta>, <abbr|etc.>

    <item><TeXmacs>-specific language extensions for the definition of <hlink|menus|#sec-utils-menus>, <hlink|keyboard shortcuts|#sec-utils-keyboard>, <abbr|etc.>

    <item>Additional routines for <hlink|<TeXmacs> content manipulation|#sec-overview-content> and pattern matching.

    <item>Further utilities and libraries for common types like strings and lists.
  </itemize>

  Whereas the modules in <verbatim|$TEXMACS_PATH/progs/kernel> are automatically loaded, all modules in <verbatim|$TEXMACS_PATH/progs/utils> have to be explicitly included.

  <paragraph*|Internal modules and plug-ins>

  The remaining <scheme> extensions of <TeXmacs> are regrouped into <em|internal modules> which usually correspond to a particular type of content. For instance, the directories

  <verbatim| \ \ \ $TEXMACS_PATH/progs/source<new-line> \ \ \ $TEXMACS_PATH/progs/math<new-line> \ \ \ $TEXMACS_PATH/progs/table>

  respectively contain routines for editing source code, mathematics and tables. Exceptions are the internal modules <verbatim|content> and <verbatim|fonts>, which rather correspond to a particular type of functionality. Each internal module corresponds to a group of files, each of which corresponds to an individual <em|<TeXmacs> module>. The internal modules are designed to be as independent as possible.

  From the <scheme> point of view, the structure of a plug-in is very similar to that of an internal module. Each plug-in defines a collection of <scheme> programs in its <verbatim|progs> subdirectory. Although distinct plug-ins may in principle depend on each other, they are usually designed in a way which makes them as independent as possible.

  <section|The module system and lazy definitions><label|sec-overview-lazyness>

  As explained above, each <scheme> file inside <TeXmacs> or one of its plug-ins corresponds to a <em|<TeXmacs> module>. The individual <TeXmacs> modules are usually grouped together into an internal or external module, which corresponds to a directory on your hard disk.

  Any <TeXmacs> module should start with an instruction of the form

  <\scm-code>
    (texmacs-module <em|name>

    \ \ (:use <em|submodule-1> ... <em|submodule-n>))
  </scm-code>

  The <verbatim|<em|name>> of the module is a list which corresponds to the location of the corresponding file. More precisely, <TeXmacs> searches for its modules in the path <verbatim|$GUILE_LOAD_PATH>, which defaults to the standard <name|Guile> load path, combined with <verbatim|$TEXMACS_PATH/progs> and all <verbatim|progs> subdirectories in the plug-ins. For instance, the module <verbatim|(math math-edit)> corresponds to the file

  <verbatim| \ \ \ $TEXMACS_PATH/progs/edit/math-edit.scm>

  The user should explicitly specify all submodules on which the module depends, except those modules which are loaded by default, <abbr|i.e.> all language extensions and utilities in the directories

  <verbatim| \ \ \ $TEXMACS_PATH/progs/kernel<new-line> \ \ \ $TEXMACS_PATH/progs/utils/library>

  All symbols which are defined inside the module using <scm|define> or <scm|define-macro> are only visible within the module itself. In order to make the symbol publicly visible you should use <scm|tm-define> or <scm|tm-define-macro>. Currently, because of implementation details for the <hlink|contextual overloading system|#sec-overview-overloading>, as soon as a symbol is declared to be public, it becomes visible inside all other modules. However, you should not rely on this: in the future, explicit importation with <scm|:use> might become<nbsp>necessary.

  Because the number of <TeXmacs> modules and plug-ins keeps on growing, it is inefficient to load all modules when booting. Instead, initialization files are assumed to declare the provided functionality in a <em|lazy> way: whenever the functionality is explicitly needed, <TeXmacs> is triggered to load the corresponding modules (if this was not already done). In addition, <TeXmacs> may load some of these modules during spare time, when the computer is waiting for user input. Indeed, this helps increasing the reactivity of <TeXmacs> at the first use of the functionality.

  For instance, assume that you defined a large new editing function <scm|foo-action> inside the module <scm|(foo-edit)>. Then your initialization file <verbatim|init-foo.scm> would typically contain a line

  <\scm-code>
    (lazy-define (foo-edit) foo-action)
  </scm-code>

  Similarly, lazy keyboard shortcuts and menus for <verbatim|foo> might be defined using

  <\scm-code>
    (lazy-keyboard (foo-kbd) in-foo-mode?)

    (lazy-menu (foo-menu) foo-menu)
  </scm-code>

  For more concrete examples, we recommend the user to take a look at the standard initialization file <verbatim|init-texmacs.scm>.

  <label|redefinitions>On the negative side, the mechanism for lazy loading has the important consequence that you can no longer make assumptions on when a particular module is loaded. For instance, when you attempt to redefine a keyboard shortcut in your personal initialization file, it may happen that the standard definition is loaded after your “redefinition”. In that case, your redefinition remains without consequence.

  For this reason, <TeXmacs> also provides the instruction <scm|import-from> to force a particular module to be loaded. Similarly, the commands <scm|lazy-keyboard-force>, <scm|lazy-plugin-force>, <abbr|etc.> may be used to force all lazy keyboard definitions <abbr|resp.> plug-ins to be loaded. In other words, the use of laziness forces to make implicit dependencies between modules more explicit.

  In the case when you want to redefine keyboard shortcuts, the <hlink|contextual overloading system|#sec-overview-overloading> gives you an even more fine-grained control. For instance, assume that the keyboard shortcut <key|x x x> has been defined twice, both in general and in math mode. After calling <scm|lazy-keyboard-force> and overriding the general definition of the shortcut, the special definition will still take precedence in math mode. Alternatively, you may redefine the keyboard shortcut using

  <\scm-code>
    (kbd-map

    \ \ (:mode prevail?)

    \ \ ("x x x" <em|action>))
  </scm-code>

  This redefinition will prevail both in general and in math mode.

  <section|Contextual overloading><label|sec-overview-overloading>

  For large software projects, it is important that different modules can be developed as independently as possible one from each other. Furthermore, fundamental modules often implement default behaviour which is to be overwritten in a more specialized module. In order to facilitate these two requirements, <TeXmacs> implements a system of <em|contextual overloading>.

  In order to get the main idea behind this system, consider the implementation of a given functionality, like hitting the return key. Depending on the context, different actions have to be undertaken: by default, we start a new paragraph; inside a table, we start a new row; etc. A naive implementation would check all possible cases in a routine <scm|kbd-enter> and call the corresponding routine. However, this makes it impossible to add a new case in a new module without modifying the module which defines <scm|kbd-enter>. By contrast, the system of contextual overloading allows the user to <em|conditionally> redefine the routine <scm|kbd-enter> several times in distinct modules.

  For instance, assume that we want to define a function <scm|hello> which inserts “Hello” by default, but “<math|hello<around|(||)>>” in mode math, while positioning the cursor between the brackets. Using contextual overloading, this may be done as follows:

  <\scm-code>
    (tm-define (hello) (insert "Hello"))

    (tm-define (hello) (:require (in-math?)) (insert-go-to "hello()" '(6)))
  </scm-code>

  \;

  The order in which routines are overloaded is important. <TeXmacs> first tries the latest (re)definition. If this definition does not satisfy the requirements (<scm|(in-math?)>, in our case), then it tries the before last (re)definition, and so on until an implementation is found which matches the requirements. For example, if we invert the two declarations in the above example, then the general unconditional definition of <scm|hello> will always prevail. If the two declarations are made inside different modules, then it is up to the user to ensure that the modules are loaded in an appropriate order.

  Inside a redefinition, it is also possible to access the former definition using the keyword <scm|former>. In particular, the code

  <\scm-code>
    (tm-define (hello)

    \ \ (if (in-math?) (insert-go-to "hello()" '(6)) (former)))
  </scm-code>

  is equivalent to the second declaration in our example.

  Contextual overloading generalizes more classical overloading on the types of the arguments, such as <name|C++> style polymorphism. Although one may overload on the types of the arguments, it is also possible to impose more general conditions on the arguments. For instance, one may sometimes wish to write the following kind of code:

  <\scm-code>
    (tm-define (my-replace what by)

    \ \ <em|default-implementation>)

    \;

    (tm-define (my-replace what by)

    \ \ (:require (== what by))

    \ \ (noop))
  </scm-code>

  Besides <scm|tm-define>, several other added language primitives support the contextual overloading mechanism. For instance, <scm|kbd-map> and <scm|menu-bind> support overloading on mode. The <scm|tm-define-macro> and <scm|tm-property> primitives are analogous to <scm|tm-define>.

  <section|Meta information and logical programming><label|sec-overview-meta>

  Small software projects usually consist of a collection of routines and data. In a large software project, where a typical contributor has no complete overview of the program, it is a good practice to associate additional <em|meta-information> to the individual routines and data. This meta-information typically serves documentation purposes, but becomes even more interesting if it can be used in an automated fashion to implement more general additional functionality.

  The <scm|tm-define> macro supports several options for associating meta-information to <scheme> functions and symbols. For instance, the <scm|:synopsis>, <scm|:argument> and <scm|:returns> options allow you to associate short documentation strings to the function, its arguments and its return value:

  <\scm-code>
    (tm-define (square x)

    \ \ (:synopsis "Compute the square of @x")

    \ \ (:argument x "A number")

    \ \ (:returns "The square of @x")

    \ \ (* x x))
  </scm-code>

  This information is exploited by <TeXmacs> in several ways. For instance, the synopsis of the function can be retrieved by executing <scm|(help square)>. More interestingly, assuming that we defined <scm|square> as above, typing <shortcut|(interactive exec-interactive-command)> followed by <scm|square> and <shortcut|(kbd-return)> allows you to execute <scm|square> in an interactive way: you will be prompted for “A number” on the footer. Moreover, after typing <shortcut|(interactive exec-interactive-command)>, you will be able to use “tab-completion” in order to enter <scm|square>: typing <key|s q u tab> will usually complete into<nbsp><scm|square>.

  In a similar vein, the <scm|:interactive> and <scm|:check-mark> options allow you to specify that a given routine requires interactive user input or when it should give rise to a check-mark when used in a menu. For instance, the statement

  <\scm-code>
    (tm-property (choose-file fun text type)

    \ \ (:interactive #t))
  </scm-code>

  in the source code of <TeXmacs> states that <scm|choose-file> is an interactive command. As a consequence, the <menu|File|Load> entry, which is defined by

  <\scm-code>
    ("Load" (choose-file load-buffer "Load file" ""))
  </scm-code>

  will be followed by dots <scm|...> in the <menu|File> menu. The interesting point here is that, although the command <scm|choose-file> may be reused several times in different menu entries, we only have to specify once that it is an interactive command. Similarly, consider the definition

  <\scm-code>
    (tm-define (toggle-session-math-input)

    \ \ (:check-mark "v" session-math-input?)

    \ \ (session-use-math-input (not (session-math-input?))))
  </scm-code>

  Given a menu item with <scm|(toggle-session-math-input)> as its associated action, this definition specifies in particular that a check-mark should be displayed before the menu item whenever the <scm|session-math-input?> predicate holds.

  Another frequently used option is <scm|:secure>, which specifies that a given routine can be used inside <TeXmacs> documents, in particular inside <markup|extern> and <markup|action> macros. For instance, the default implementation of the <markup|fold> tag allows the user to click on the “<math|<op|\<circ\>>>” before the folded text so as to unfold the tag. When doing this, the scheme script <scm|mouse-unfold> is launched. However, for this to work, the <scm|mouse-unfold> function needs to be secure:

  <\scm-code>
    (tm-define mouse-unfold

    \ \ (:secure #t)

    \ \ (with-action t

    \ \ \ \ (tree-go-to t :start)

    \ \ \ \ (fold)))
  </scm-code>

  You can read more about the tags which depend on <scheme> scripts in “<hlink|Invoking <scheme> scripts from <TeXmacs> markup|#markup-scripts>”.\ 

  In the future, the number of options for entering meta-information is likely to increase. <TeXmacs> also supports an additional mechanism for the automatic deduction of new meta-properties from existing meta-properties. This mechanism is based on a less general, but more efficient form of <em|logical programming>. However, since it is not fully stable yet, it will be documented only later.

  <section|The <TeXmacs> content model><label|sec-overview-content>

  All <TeXmacs> documents or document fragments can be thought of as <em|trees>, as explained in more detail in the chapter about the <TeXmacs> document format. Inside <scheme> programs, there are two main ways to represent such trees, depending on whether one manipulates active or passive documents:

  <paragraph*|Passive documents and <scheme> trees><label|tree-passive>

  Passive documents, like those which are processed by a<nbsp>conversion tool, are usually represented by <em|scheme trees>. For instance, the fraction

  <\equation*>
    <frac|a<rsup|2>|b+c>
  </equation*>

  is typically represented by

  <\scm-code>
    (frac (concat "a" (rsup "2")) "b+c")
  </scm-code>

  This representation is convenient in the sense that they can be manipulated directly using standard <scheme> routines on lists.

  <paragraph*|Active documents and C++ trees><label|tree-active>

  Active documents, like ones which are visible in one of the editors windows, are rather represented using the internal C++ type <verbatim|tree>, which has been exported to <scheme> via the glue. When a tree is part of a real document inside the editor, the tree is aware about its position inside the document. Using routines from the tree API, you may then make changes in the document simply by assigning new values to the tree.

  For instance, consider the following experiment: open two windows and start a <scheme> session in each window. In the second window, enter the lines

  <\session|scheme|default>
    <\input|scheme] >
      (use-modules (utils library tree))
    </input>

    <\input|scheme] >
      (define t (buffer-tree))
    </input>
  </session>

  In the first window, you may now modify the document in the second window using commands like

  <\session|scheme|default>
    <\input|scheme] >
      (tree-set! t (tree 'document (string-\<gtr\>tree "First line.")

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (string-\<gtr\>tree "Second line.")))
    </input>

    <\input|scheme] >
      (tree-set t 1 (string-\<gtr\>tree "New second line."))
    </input>

    <\input|scheme] >
      (tree-set t 0 (tree 'strong (tree-ref t 0)))
    </input>
  </session>

  <paragraph*|A common framework><label|tree-hybrid>

  From the last three lines in above experiment, it becomes apparent that it is quite cumbersome to manipulate trees using the standard tree constructors. For this reason, <TeXmacs> provides a hybrid type <verbatim|content> for manipulating scheme trees and C++ trees in a common framework. For instance, the last three lines in the above experiment may be replaced by

  <\session|scheme|default>
    <\input|scheme] >
      (tree-set! t '(document "First line." "Second line."))
    </input>

    <\input|scheme] >
      (tree-set t 1 "New second line.")
    </input>

    <\input|scheme] >
      (tree-set t 0 ‘(strong ,(tree-ref t 0)))
    </input>
  </session>

  More precisely, a scheme expression of the type <verbatim|content> is either a string, a tree or a list whose first element is a symbol and whose remaining elements are other expressions of type <verbatim|content>. <TeXmacs> provides several routines (usually prefixed by <verbatim|tm->) for basic operations on content, like <scm|tm-car>, <scm|tm-arity>, <scm|tm-\<gtr\>list>, <scm|tm-equal?>, etc. Most higher level routines are built on top of these routines, so as to accept arguments of type <verbatim|content> whenever appropriate.

  <paragraph*|Persistent positions inside trees>

  Besides the fact that trees remember their <em|positions> inside the global edit tree, it is also possible to create cursor positions inside the global edit tree, which are naturally updated when modifications take place. This technique is useful when you want to write an editing routine which does not act locally at the cursor position. For instance, the following routine can be used to insert content at the start of the current buffer in a reliable way:

  <\scm-code>
    (define (insert-at-buffer-start t)

    \ \ (with-cursor (path-start (root-tree) (buffer-path))

    \ \ \ \ (insert t)))
  </scm-code>

  The <scm|with-cursor> macro temporarily changes the cursor position, while storing the old cursor position in such a way that it will be updated during changes of the document. The user may also use the more explicit routines <scm|position-new>, <scm|position-delete>, <scm|position-set> and <scm|position-get> to manage persistent positions.

  <section|Standard utilities><label|sec-overview-utilities>

  Besides the basic concepts from the previous sections, which underly the scheme API for <TeXmacs>, the <scheme> kernel implements several other utilities and language extensions. In this section, we will briefly sketch some of them on hand of examples. Further details can be found in the chapter about <hlink|<TeXmacs> extensions to <scheme> and utilities|#sec-scheme-utils>.

  <paragraph*|Regular expressions>

  <TeXmacs> implements the routines <scm|match?> and <scm|select> for matching regular expressions and selecting subexpressions along a “path”. These routines both work for the <verbatim|content> type. For instance, in order to search all expressions of the form

  <\equation*>
    <frac|<with|color|brown|a>|1+<sqrt|<with|color|brown|b>>>
  </equation*>

  in the current buffer, where <math|<with|color|brown|a>> and <math|<with|color|brown|b>> are general expressions, one may use the following <scheme> command:

  <\session|scheme|default>
    <\input|scheme] >
      (select (buffer-tree) '(:* (:match (frac :%1 (concat "1+" (sqrt :%1))))))
    </input>
  </session>

  <paragraph*|Dialogues>

  <TeXmacs> supports several commands for interactive dialogues with the user. For instance, when executing the following scheme command, you will be prompted for two numbers, whose product will be displayed in the footer:

  <\session|scheme|default>
    <\input|Scheme] >
      (user-ask "First number:"

      \ \ (lambda (a)

      \ \ \ \ (user-ask "Second number:"

      \ \ \ \ \ \ (lambda (b)

      \ \ \ \ \ \ \ \ (set-message (number-\<gtr\>string (* (string-\<gtr\>number a)

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (string-\<gtr\>number b)))

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "product")))))
    </input>

    <\input|Scheme] >
      \;
    </input>
  </session>

  <paragraph*|User preferences>

  When writing a plug-in, you may wish to define some new user preferences. This can be done using the <scm|define-preferences> command, which adds a list of user preferences, together with their default values and a call-back routine. The call-back routine is called whenever you change the corresponding preference. For instance:

  <\scm-code>
    (define-preferences

    \ \ ("Gnu's hair color" "brown" notify-gnu-hair-change)

    \ \ ("Snail's cruising speed" "1mm/sec" notify-Achilles))
  </scm-code>

  Preferences can be set, reset and read using <scm|set-preference>, <scm|reset-preference> and <scm|get-preference>.

  <paragraph*|New data formats and converters>

  New data formats and converters can be declared using the <scm|define-format> and <scm|converter> instructions. When a format can be converted from or into <TeXmacs>, then it will automatically appear into the <menu|File|Export> and <menu|File|Import> menus. Similarly, when a format can be converted to <name|Postscript>, then it also becomes a valid format for images. <TeXmacs> also attempts to combine explicitly declared converters into new ones.

  Typically, the declaration of a new format and a converter would look like:

  <\scm-code>
    (define-format blablah

    \ \ (:name "Blablah")

    \ \ (:suffix "bla"))

    \;

    (converter blablah-file latex-file

    \ \ (:require (url-exists-in-path? "bla2tex"))

    \ \ (:shell "bla2tex" from "\<gtr\>" to))
  </scm-code>

  <chapter|<TeXmacs> extensions to <scheme> and utilities><label|sec-scheme-utils>

  <section|<TeXmacs> abbreviations><label|sec-utils-abbrevs>

  \;

  <section|Matching regular expressions><label|sec-utils-match>

  Regular expressions naturally generalize from strings to trees and allow to test whether a given tree matches a given pattern. <TeXmacs> implements the primitives <scm|match?> and <scm|match> for this purpose, which also provide support for wildcards, user-defined grammars and more.

  <\explain>
    <scm|(match? <scm-arg|expr> <scm-arg|pattern>)><explain-synopsis|check whether a scheme expression satisfies a pattern>
  <|explain>
    This function determines whether a scheme expression <scm-arg|expr> satisfies a given <scm-arg|pattern>. It will be detailed below how to form valid patterns. The pattern may contain named wildcards, in case of success, we return a list with matches for these wildcards. In case of failure, we return<nbsp><scm|#f>. The expression <scm|expr> may contain trees, in which case we understand that such tree subexpressions should match their scheme counterparts. For instance, <scm|(match? (tree "x") "x<name|">)> will return<nbsp><scm|(())>, whereas <scm|(match? (tree "x") "y<name|">)> returns <scm|#f>.
  </explain>

  <\explain>
    <scm|(match <scm-arg|l> <scm-arg|pattern> <scm-arg|bindings>)><explain-synopsis|solutions to a given pattern under bindings>
  <|explain>
    Given a list <scm-arg|l> of scheme expressions, a <scm-arg|pattern> with free variables and an association list of <scm-arg|bindings>, this routine determines all substitutions of free variables by values (extending the given <scm-arg|bindings>), for which <scm-arg|l> matches the <scm-arg|pattern>.
  </explain>

  <\explain>
    <scm|(define-regexp-grammar <scm-args|rules>)><explain-synopsis|user defined matching grammars>
  <|explain>
    Given a list of rules of the form <scm|(:<scm-arg|var> <scm-arg|pattern-1> ... <scm-arg|pattern-n>)>, this instruction defines a new terminal symbol <scm|:<scm-arg|var>> for each such rule, which matches the disjunction of the patterns <scm-arg|pattern-1> until <scm-arg|pattern-n>. This terminal symbol can then be used as an abbreviation in matching patterns. Grammar rules may be interdependent. See example below.
  </explain>

  Valid patterns are formed in the following ways:

  <\explain>
    <scm-arg|leaf><explain-synopsis|symbols, strings, etc.>
  <|explain>
    A <scm-arg|leaf> is only matched against itself.
  </explain>

  <\explain>
    <scm|(<scm-arg|pattern-1> ... <scm-arg|pattern-n>)><explain-synopsis|lists>
  <|explain>
    In the case when lists <scm|l-1> until <scm|l-n> match <scm-arg|pattern-1> until <scm-arg|pattern-n>, their concatenation matches the pattern <scm|(<scm-arg|pattern-1> ... <scm-arg|pattern-n>)>.
  </explain>

  <\explain>
    <scm|:%1>, <scm|:%2>, <scm|:%3> ..., <scm|:*><explain-synopsis|wildcards>
  <|explain>
    The wildcard <scm|:%n>, where <scm|n> is a number matches any list of length <scm|n>. The wildcard <scm|:*> matches any list, including the empty list.
  </explain>

  <\explain>
    <scm|'<scm-arg|var>><explain-synopsis|variables>
  <|explain>
    This pattern attempts to bind the variable <scm-arg|var> against the expression. If <scm-arg|var> is used only once, then it essentially behaves as a wildcard. More generally, it can be used to form patterns with identical subexpressions. For instance, the pattern <scm|(frac 'x 'x)> will match all fractions <math|<frac|x|x>>.
  </explain>

  <\explain>
    <scm|:<scm-arg|var>><explain-synopsis|user-provided grammar rules>
  <|explain>
    In the case when <scm|:<scm-arg|var>> is a user-provided terminal symbol (see <scm|define-regexp-grammar> above), this pattern matches the corresponding grammar.
  </explain>

  <\explain>
    <scm|:<scm-arg|pred?>><explain-synopsis|arbitrary <scheme> predicates>
  <|explain>
    Given a <scheme> predicate <scm-arg|pred?>, such as <scm|string?>, this pattern matches any scheme expression which satisfies the predicate.
  </explain>

  <\explain>
    <scm|(:not <scm-arg|pattern>)>

    <scm|(:or <scm-arg|pattern-1> ... <scm-arg|pattern-n>)>

    <scm|(:and <scm-arg|pattern-1> ... <scm-arg|pattern-n>)><explain-synopsis|logical operations>
  <|explain>
    Negation, disjunction and conjunction of patterns.
  </explain>

  <\explain>
    <scm|(:repeat <scm-arg|pattern>)><explain-synopsis|repetition>
  <|explain>
    Given lists <scm|l-1> until <scm|l-n> which match <scm-arg|pattern>, their concatenation matches the repetition <scm|(:repeat <scm-arg|pattern>)>. In particular, the empty list is matched.
  </explain>

  <\explain>
    <scm|(:group <scm-arg|pattern-1> ... <scm-arg|pattern-n>)><explain-synopsis|grouping>
  <|explain>
    Groups a concatenation of patterns into a new list patterns. For instance, all lists of the form <scm|(a b a b ... a b)> are matched by <scm|(:repeat (:group a b))>, whereas <scm|(:repeat (a b))> rather matches all lists of the form <scm|((a b) (a b) ... (a b))>.
  </explain>

  <\explain>
    <scm|(:quote <scm-arg|expr>)><explain-synopsis|quotation>
  <|explain>
    Only matches a given expression <scm-arg|expr>.
  </explain>

  <\example>
    The tree

    <\scm-code>
      (define t '(foo (bar "x") (bar "y") (option "z")))
    </scm-code>

    matches the pattern <scm|(foo (:repeat (bar :%1)) :*)>, but not <scm|(foo (:repeat (bar 'x)) :*)>. The call <scm|(match t '(foo 'x 'y :*))> will return <scm|(((x . (bar "x")) (y . (bar "y"))))>. Notice that <scm|(x . (bar "x"))> will be displayed as <scm|(x bar "x")>:

    <\session|scheme|default>
      <\input|Scheme] >
        (define t '(foo (bar "x") (bar "y") (option "z")))
      </input>

      <\unfolded-io|Scheme] >
        (match? t '(foo 'x 'y :*))
      <|unfolded-io>
        (((y bar "y") (x bar "x")))
      </unfolded-io>
    </session>
  </example>

  <\example>
    Consider the grammar

    <\scm-code>
      (define-regexp-grammar

      \ \ (:a a b c)

      \ \ (:b (:repeat :a)))
    </scm-code>

    Then the list <scm|(a b x y c a a)> matches the pattern <scm|(:b :%2 :b)>.
  </example>

  <section|Selection of subexpressions><label|sec-utils-select>

  Besides pattern matching on trees, <TeXmacs> provides the routine <scm|select> for pattern matching along paths. Given a tree, this mechanism typically allows the user to select all subtrees which are reached following a path which meets specific criteria. For instance, one might to select the second child of the last child or all square roots inside numerators of fractions. The syntax of the selection patterns is also used for high level tree accessors.

  <\explain>
    <scm|(select <scm-arg|expr> <scm-arg|pattern>)><explain-synopsis|select subexpressions following a pattern>
  <|explain>
    Select all subtrees inside a hybrid tree <scm-arg|expr> according to a specific path <scm-arg|pattern>.
  </explain>

  Patterns are lists of atomic patterns of one of the following forms:

  <\explain>
    <scm|0>, <scm|1>, <scm|2>, ...<explain-synopsis|select a specific child>
  <|explain>
    Given an integer <scm|n>, select the <scm|n>-th child of the input tree. For instance, <scm|(select '(frac "1" "2") '(0))> returns <scm|("1")>.
  </explain>

  <\explain>
    <scm|:first>, <scm|:last><explain-synopsis|select first or last child>
  <|explain>
    Select first or last child of the input tree.
  </explain>

  <\explain>
    <scm|(:range <scm-arg|start> <scm-arg|end>)><explain-synopsis|select children in a range>
  <|explain>
    Select all children in a specified range.
  </explain>

  <\explain>
    <scm-arg|label><explain-synopsis|select children with a given label>
  <|explain>
    Select all compound subtrees with the specified <scm-arg|label>. Example:

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (select '(document (strong "x") (math "a+b") (strong "y")) '(strong))
      <|unfolded-io>
        ((strong "x") (strong "y"))
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|:%1>, <scm|:%2>, <scm|:%3>, ...<explain-synopsis|select descendants of a given generation>
  <|explain>
    The pattern <scm|:%n>, where <scm|n> is a number, selects all descendants of the <scm|n>-th generation. Example:

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (select '(foo (bar "x" "y") (slash (dot))) '(:%2))
      <|unfolded-io>
        ("x" "y" (dot))
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|:*><explain-synopsis|select all descendants>
  <|explain>
    This pattern selects all descendants of the tree. For instance, <scm|(select t '(:* frac 0 :* sqrt))> selects all square roots inside numerators of fractions inside <scm|t>.
  </explain>

  <\explain>
    <scm|(:match <scm-arg|pattern>)><explain-synopsis|matching>
  <|explain>
    This pattern matches the input tree if and only the input tree matches the specified <scm-arg|pattern> according to <scm|match?>. Example:

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (select '(foo "x" (bar)) '(:%1 (:match :string?)))
      <|unfolded-io>
        ("x")
      </unfolded-io>
    </session>

    Example with creation of a custom predicate:

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (select '(foo "x" (bar)) '(:* (:match :tree-atomic?)))
      <|unfolded-io>
        ()
      </unfolded-io>

      <\input|Scheme] >
        \;
      </input>
    </session>

    List of useful predicates:
  </explain>

  \;

  <\explain>
    <scm|(:or <scm-arg|pattern-1> ... <scm-arg|pattern-n>)>

    <scm|(:and <scm-arg|pattern-1> ... <scm-arg|pattern-n>)><explain-synopsis|boolean expressions>
  <|explain>
    These rules allow for the selection of all subtrees which satisfy one among or all patterns <scm-arg|pattern-1> until <scm-arg|pattern-n>.
  </explain>

  In the case when the input tree is active, the function <scm|select> supports some additional patterns which allow the user to navigate inside the tree.

  <\explain>
    <scm|:up><explain-synopsis|parent>
  <|explain>
    This pattern selects the parent of the input tree, if it exists.
  </explain>

  <\explain>
    <scm|:down><explain-synopsis|child containing the cursor>
  <|explain>
    If the cursor is inside some child of the input tree, then this pattern will select this child.
  </explain>

  <\explain>
    <scm|:next><explain-synopsis|next child>
  <|explain>
    If the input tree is the <math|i>-th child of its parent, then this pattern will select the <math|<around|(|i+1|)>>-th child.
  </explain>

  <\explain>
    <scm|:previous><explain-synopsis|previous child>
  <|explain>
    If the input tree is the <math|i>-th child of its parent, then this pattern will select the <math|<around|(|i-1|)>>-th child.
  </explain>

  <section|Logical programming extensions><label|sec-utils-logic>

  \;

  <section|Function definition and contextual overloading><label|sec-utils-overload>

  Conventional programming languages often provide some means to overload certain functions depending on the types of the arguments. <TeXmacs> provides additional context-based overloading mechanisms, which require the use of the <scm|tm-define> construct for function definitions (and <scm|tm-define-macro> for macro definitions). Definition with <scm|tm-define> also allows the specification of properties of the function/macro: arguments, synopsis, etc.

  Furthermore, one may use <scm|tm-property> for associating additional properties, such as interactivity or default values for the arguments, of a function <em|which is already defined>, specifically functions exported from <c++> code through the glue.

  <\explain>
    <scm|(tm-define <scm-arg|head> <scm-args|options> <scm-args|body>)><explain-synopsis|<TeXmacs> function definition>

    <scm|(tm-define-macro <scm-arg|head> <scm-args|options> <scm-args|body>)><explain-synopsis|<TeXmacs> macro definition>
  <|explain>
    <TeXmacs> function and macro declarations are similar to usual declarations based on <scm|define> and <scm|define-macro>, except for the additional list of <scm-arg|options> and the fact that all functions and macros defined using <scm|tm-define> and <scm|tm-define-macro> are public. Each option is of the form <scm|(:<scm-arg|kind> <scm-args|arguments>)> and the <scm-arg|body> starts at the first element of the list following <scm-arg|head> which is not of this form. Available options are <scm|:type>, <scm|:synopsis>, <scm|:returns>, <scm|:note>, <scm|:argument>, <scm|:default>, <scm|:proposals>, <scm|:secure>, <scm|:check-mark>, <scm|:interactive> and <scm|:balloon>.
  </explain>

  <\explain>
    <scm|(tm-property <scm-arg|head> <scm-args|options>)><explain-synopsis|<TeXmacs> properties definition>
  <|explain>
    <scm|tm-property> allows the declaration of <TeXmacs> properties for functions which have already been defined, specifically for functions exported through the glue. Available options are <scm|:type>, <scm|:synopsis>, <scm|:returns>, <scm|:note>, <scm|:argument>, <scm|:default>, <scm|:proposals>, <scm|:secure>, <scm|:check-mark>, <scm|:interactive> and <scm|:balloon>.
  </explain>

  <paragraph*|Contextual overloading>

  We will first describe the most important <scm|:require> option for contextual overloading, which was already discussed <hlink|before|#sec-overview-overloading>.

  <\explain>
    <scm|(:require <scm-arg|cond>)><explain-synopsis|argument based overloading>
  <|explain>
    This option specifies that one necessary condition for the declaration to be valid is that the condition <scm-arg|cond> is met. This condition may involve the arguments of the function.

    As an example, let us consider the following definitions:

    <\scm-code>
      (tm-define (special t)

      \ \ (and-with p (tree-outer t)

      \ \ \ \ (special p)))

      \;

      (tm-define (special)

      \ \ (:require (tree-is? t 'frac))

      \ \ (tree-set! t ‘(frac ,(tree-ref t 1) ,(tree-ref t 0))))

      \;

      (tm-define (special)

      \ \ (:require (tree-is? t 'rsub))

      \ \ (tree-set! t ‘(rsup ,(tree-ref t 0))))
    </scm-code>

    The default implementation of <scm|special> is to apply <scm|special> to the parent <scm|p> of <scm|t> as long as <scm|t> is not the entire document itself. The two overloaded cases apply when <scm|t> is either a fraction or a right subscript.

    Assuming that your cursor is inside a fraction inside a subscript, calling <scm|special> will swap the numerator and the denominator. On the other hand, if your cursor is inside a subscript inside a fraction, then calling <scm|special> will change the subscript into a superscript.

    When the conditions of several (re)declarations are met, then the last redeclaration will be used. Inside a redeclaration, one may also use the <scm|former> keyword in order to explicitly access the former value of the redefined symbol.
  </explain>

  <\explain>
    <scm|(:mode <scm-arg|mode>)><explain-synopsis|mode-based overloading>
  <|explain>
    This option is equivalent to <scm|(:require (<scm-arg|mode>))> and specifies that the definition is only valid when we are in a given <scm-arg|mode>. New modes are defined using <scm|texmacs-modes> and modes can inherit from other modes.
  </explain>

  <\explain>
    <scm|(texmacs-modes . <scm-arg|modedefs>)> <explain-synopsis|define new texmacs modes>
  <|explain>
    Use this macro to define new modes that you can use for contextual overloading, for instance in <scm|kbd-map>. Modes may be made dependent on other modes. This macro takes a variable number of definitions as arguments, each of the form <scm|(mode-name conditions . dependencies)>. End your <scm|mode-name> and any dependencies with one <scm|%>, like this:

    <\scm-code>
      (texmacs-modes

      \ \ (in-verbatim% (inside? 'verbatim) in-text%)

      \ \ (in-tt% (inside? 'tt)))
    </scm-code>

    When creating new modes remember to place first the faster checks (against booleans, etc.) for speed.
  </explain>

  <paragraph*|Other options for function and macro declarations>

  Besides the contextual overloading options, the <scm|tm-define> and <scm|tm-define-macro> primitives admit several other options for attaching additional information to the function or macro. We will now describe these options and explain how the additional information attached to functions can be exploited.

  <\warning>
    A current limitation of the implementation is that functions overloaded using <scm|:require> and <scm|:mode> cannot have different options. This means in particular that you cannot specify different values for <scm|:synopsis> depending on the context.
  </warning>

  <\explain>
    <scm|(:synopsis <scm-arg|short-help>)><explain-synopsis|short description>
  <|explain>
    This option gives a short description of the function or macro, in the form of a string <scm-arg|short-help>. As a convention, <scheme> expressions may be encoded inside this string by using the <verbatim|@>-prefix. For instance:

    <\scm-code>
      (tm-define (list-square l)

      \ \ (:synopsis "Appends the list @l to itself")

      \ \ (append l l))
    </scm-code>

    The synopsis of a function is used for instance in order to provide a short help string for the function. In the future, we might also use it for help balloons describing menu items.
  </explain>

  <\explain>
    <scm|(:argument <scm-arg|var> <scm-arg|description>)>

    <scm|(:argument <scm-arg|var> <scm-arg|type> <scm-arg|description>)><explain-synopsis|argument description>
  <|explain>
    This option gives a short <scm-arg|description> of one of the arguments <scm-arg|var> to the function or macro. Such a description is used for instance for the prompts, when calling the function interactively. For these uses, the second format allows for the specification of a <scm-arg|type> which changes how the widgets/prompts work. Some allowed values are <scm|"string">, the default, and <scm|"file"> and <scm|"directory">. If any of the last two is specified, tab completion in the interactive prompt will traverse the file system.
  </explain>

  <\explain>
    <scm|(:returns <scm-arg|description>)><explain-synopsis|return value description>
  <|explain>
    This option gives a short <scm-arg|description> of the return value of the function or macro.
  </explain>

  <\explain>
    <scm|(:type (-\<gtr\> <scm-arg|from> <scm-arg|to>))><explain-synopsis|type conversion description>
  <|explain>
    This option specifies that a function or macro performs a conversion from the data type <scm-arg|from> to the data type <scm-arg|to>.
  </explain>

  <section|Interactive dialogues><label|sec-utils-dialogue>

  \;

  <section|User preferences><label|sec-utils-preferences>

  Preferences are used to store any information you need to keep across different runs of <TeXmacs>, like window position and size, active menu bars, etc. Internally they are stored in the users home directory as a <scheme> list of items like <scm|("name" value)> which therefore has in principle no structure. However, a good practice to avoid conflicts is to prefix your options by the name of the plugin or module you are creating, like in <scm|"gui:help-window-position">.

  The first step in defining a new preference is adding it with <scm|define-preferences> and assigning a call-back function to handle changes in the preference. This is important for instance in menus, where a click on an item simply sets some preference to some value and it's up to the call-back to actually take the necessary actions.

  <\warning*>
    One may not store the boolean values <scm|#t>, <scm|#f> directly into preferences. Instead one should use the strings <scm|"on"> and <scm|"off">. This is due to the internal storage of default values for preferences using <scm|ahash-table>.
  </warning*>

  <\explain>
    <scm|(define-preferences <scm-arg|list>)><explain-synopsis|define new preferences with defaults and call-backs>
  <|explain>
    Each element of <scm-arg|list> is of the form <scm|("somename" default-value notify-procedure)> where <scm|notify-procedure> is a procedure taking two arguments like this:

    <scm|(define (notify-procedure property-name value) (do-things))>

    Remember to use the strings <scm|"on"> and <scm|"off"> instead of booleans <scm|#t>, <scm|#f>.

    <\unfolded-documentation>
      Example
    <|unfolded-documentation>
      <\session|scheme|default>
        <\input|Scheme] >
          (define (notify-test pref value)

          \ \ (display* "Hey! " pref " changed to " value) (newline))
        </input>

        <\input|Scheme] >
          (define-preferences ("test:pref" "off" notify-test))
        </input>

        <\unfolded-io|Scheme] >
          (get-preference "test:pref")
        <|unfolded-io>
          "off"
        </unfolded-io>

        <\input|Scheme] >
          (set-preference "test:pref" "on")
        </input>

        <\unfolded-io|Scheme] >
          (preference-on? "test:pref")
        <|unfolded-io>
          #t
        </unfolded-io>

        <\input|Scheme] >
          \;
        </input>
      </session>
    </unfolded-documentation>
  </explain>

  <\explain>
    <scm|(set-preference <scm-arg|name> <scm-arg|value>)><explain-synopsis|set user preference>
  <|explain>
    Save preference <scm|name> with value <scm|value>. Then call the call-back associated to this preference, as defined in <scm|define-preferences>.

    Remember to use the strings <scm|"on"> and <scm|"off"> instead of booleans <scm|#t>, <scm|#f>.
  </explain>

  <\explain>
    <scm|(append-preference <scm-arg|name> <scm-arg|value>)><explain-synopsis|appends a value to the list for a preference>
  <|explain>
    This convenience function appends <scm|value> to the list of values of preference <scm|name>, or creates a list with one element in case the preference didn't exist. The call-back associated to this preference, as defined in <scm|define-preferences> is called once the modification is done.
  </explain>

  <\explain>
    <scm|(reset-preference <scm-arg|name>)><explain-synopsis|delete user preference>
  <|explain>
    Deletes preference <scm|name> from the user preferences.
  </explain>

  <\explain>
    <scm|(get-preference <scm-arg|name>)><explain-synopsis|get user preference>
  <|explain>
    Returns the value of preference <scm|name>. If the preference is not defined the string <scm|"default"> is returned.
  </explain>

  <\explain>
    <scm|(preference-on? <scm-arg|name>)><explain-synopsis|test boolean user preference>
  <|explain>
    Returns <scm|#t> if the value of preference <scm|name> is <scm|"on">.
  </explain>

  <\explain>
    <scm|(toggle-preference <scm-arg|name>)><explain-synopsis|change value of boolean user preference>
  <|explain>
    Toggles the value of preference <scm|name> between <scm|"on"> and <scm|"off">.
  </explain>

  <section|Adding converters><label|sec-utils-convert>

  \;

  <section|Keyboard bindings><label|sec-utils-keyboard>

  \;

  <section|Defining menus><label|sec-utils-menus>

  \;

  <chapter|Programming routines for editing documents><label|sec-scheme-edit>

  <section|The <TeXmacs> editing model><label|sec-edit-model>

  Routines for editing documents are usually based on one or several of the following ingredients:

  <\enumerate>
    <item>Identification of the document fragments which have to be edited.

    <item>Modification of one or several document fragments.

    <item>Moving the cursor to a new place.
  </enumerate>

  Before going into the precise API which allows you to carry out these tasks, let us first describe the fundamental underlying data types, and go through an example.

  <paragraph*|Document fragments>

  All <TeXmacs> documents or document fragments can be thought of as <em|trees>, as explained in more detail in the chapter about the <TeXmacs> document format. For instance, the mathematical formula

  <\equation>
    <label|example-edit-formula>a<rsub|1>+\<cdots\>+a<rsub|n>
  </equation>

  corresponds to the tree

  <\equation>
    <label|example-edit-tree><tree|<markup|concat>|a|<tree|<markup|rsub>|1>|+\<cdots\>+a|<tree|<markup|rsub>|n>>
  </equation>

  Trees which are part of a document which is effectively being edited are said to be <hlink|active|#tree-active>, and they are implemented using the <scheme> type<nbsp><verbatim|tree>.

  Besides this representation format, which is preferred when editing document fragments, <TeXmacs> also allows you to represent <hlink|passive|#tree-passive> document fragments by <scheme> trees. This alternative representation, which corresponds to the <scheme> type <verbatim|stree>, is more convenient when writing routines for processing documents (such as conversions to another format). Finally, <TeXmacs> provides a <hlink|hybrid|#tree-hybrid> representation, which corresponds to the <scheme> type <verbatim|content>. The <verbatim|content> type (corresponding to the prefix <verbatim|tm->, for simplicity) is typically used for writing abstract utility routines for trees, which can then be applied indistinctly to objects of type <verbatim|tree> or <verbatim|stree>.

  One major advantage of active trees (of type <verbatim|tree>) is that they are aware of their own location in the document. As a consequence, <TeXmacs> provides editing routines which allow you to modify the document simply by assigning a tree to a different value. For instance, assume that the <scheme> variable <scm|t> contains the subscript <math|1> in formula (<reference|example-edit-formula>). Then the instruction

  <\scm-code>
    (tree-set! t "2")
  </scm-code>

  will simultaneously change the subscript into a <math|2> and update the <scheme> variable <scm|t>. Another nicety is that the value of <scm|t> is <em|persistent> during changes of other parts of the document. For instance, if we change the <math|a>'s into <math|b>'s in the formula (<reference|example-edit-formula>), then <scm|t> keeps its value <em|and> its location. Of course, the location of <scm|t> may be lost when <scm|t> or one of its parents is modified. Nevertheless, the modification routines are designed in such a way that we try hard to remember locations. For instance, if “<math|a<rsub|0>+>” is inserted in front of the formula (<reference|example-edit-formula>) using the routine <scm|tree-insert!>, then <scm|t> keeps its value <em|and> its location, even though one of its ancestors was altered.

  Some further precisions and terminology will be useful. First of all, we have seen a distinction between <em|active> and <em|passive> trees, according to whether a tree is part of a document or not. Secondly, <TeXmacs> both supports <em|native trees> (of type <verbatim|tree>), which are implemented in C++, and <em|scheme trees> (of type <verbatim|stree>), which have a more familiar <scheme> syntax. Finally, <em|hybrid trees> unify native and scheme trees. Formally speaking, a hybrid tree is either a string, a native tree or a list whose first element is a symbol and whose other elements are again hybrid trees. We notice that active trees are necessarily native, but native trees may both be active or passive. Furthermore, certain descendants of an inactive tree may be active, but we never have the contrary.

  <paragraph*|Positions inside document fragments>

  The main way to address positions inside a tree is via a list of positive integers, called a <em|path>, and corresponding to the <scheme> type <verbatim|path>. For instance, assume that <scm|x> corresponds to the expression<nbsp>(<reference|example-edit-formula>). Then the subscript <math|1> is identified uniquely by the path<nbsp><rigid|<scm|(1 0)>>. Similarly the cursor position just behind the subscript<nbsp><math|1> corresponds to the path<nbsp><rigid|<scm|(1 0 1)>>. More generally, if <scm|p> is a path to a string leaf, then the path <scm|(rcons p i)> corresponds to the cursor position just behind the <scm|i>-th character in the string (we notice that <scm|rcons> is used to append a new element at the end of a list). If <scm|p> is a path to a non-string subtree, then <scm|(rcons p 0)> and <scm|(rcons p 1>) correspond to the cursor positions before and behind this subtree.

  It should be noticed that paths do not necessarily correspond to <em|valid> subtrees or cursor positions. Clearly, some of the elements in the path may be “out of range”. However, certain <em|a priori> possible cursor positions may correspond to invisible parts of the document (like a cursor position inside a folded argument or an attribute of <markup|with>). Moreover, two possible cursor positions may actually coincide, like the paths <scm|(0)> and <scm|(0 0)> inside the expression<nbsp>(<reference|example-edit-formula>). In this example, only the second cursor path is valid. Usually, the validity of a cursor path may be quickly detected using DRD (Data Relation Definition) information, which is determined from the style file. In exceptional cases, the validity may only be available after typesetting the document.

  It should also be noticed that all active trees are a subtree of the global <em|<TeXmacs> edit tree> or <em|root tree>, which can be retrieved using <scm|(root-tree)>. The routines <scm|tree-\<gtr\>path> and <scm|path-\<gtr\>tree> can be used in order to get the location of an active tree and the active tree at a given location.

  A simple way to address subtrees of a tree in a more persistent way is using object of type <verbatim|tree>, <abbr|i.e.> by considering the subtrees themselves. The persistent analogue of a cursor path is a <em|persistent position>, which corresponds to an object of <scheme> type <verbatim|position>. One particularity of persistent positions is that, even when a tree into which they point is removed, they keep indicating a valid close position in the remaining document. For instance, assume that <scm|pos> stands for the cursor position <scm|(1 0 1)> in the expression<nbsp>(<reference|example-edit-formula>). If we remove <math|a<rsub|1>+\<cdots\>+>, then the tree corresponding to the remaining expression <math|a<rsub|n>> is given by

  <\equation*>
    <tree|<markup|concat>|a|<tree|<markup|rsub>|n>>
  </equation*>

  and the position associated to <scm|pos> becomes <scm|(0 0)>. <TeXmacs> provides the routines <scm|position-new>, <scm|position-delete>, <scm|position-set> and <scm|position-get> to create, delete, set and get persistent cursor positions.

  <paragraph*|Semantic navigation and further utilities>

  Because accessing subtrees using paths may become quite cumbersome, <TeXmacs> provides some additional functionality to simplify this task. As a general rule, the routines <scm|select> and <scm|match?> may be used to select all subtrees of a given tree which match a certain pattern. For instance, if<nbsp><scm|x> corresponds to the expression<nbsp>(<reference|example-edit-formula>), then

  <\scm-code>
    (select x '(rsub :%1))
  </scm-code>

  returns a list with the two subscripts <math|1> and <math|n>. In fact, <scm|select> may also be used in order to navigate through a tree. For instance, if <scm|t> corresponds to the subscript <math|1> in<nbsp>(<reference|example-edit-formula>), then

  <\scm-code>
    (select t '(:up :next))
  </scm-code>

  returns the list with one element “<math|+\<cdots\>+a>”. The routine <scm|select> is implicitly called by many routines which operate on trees. For instance, with <scm|t> as above,

  <\scm-code>
    (tree-ref t :up :next)
  </scm-code>

  directly returns the tree “<math|+\<cdots\>+a>”.

  Besides simpler access to subtrees of a tree or other “close trees”, <TeXmacs> also provides several other useful mechanisms for writing editing routines. For instance, the routine <scm|tree-innermost> and the macro <scm|with-innermost> may be used to retrieve the innermost supertree of a certain type at the current cursor position. Since many editing routines operate at the current cursor position, two other useful macros are <scm|with-cursor> and <scm|cursor-after>, which allow you to perform some operations at a temporarily distinct cursor position <abbr|resp.> to compute the cursor position after some operations, without actually changing the current cursor position.

  <paragraph*|A worked example>

  In order to illustrate the <TeXmacs> API for editing documents on a simple example, assume that we wish to write a function <scm|swap-numerator-denominator> which allows us to swap the numerator and the denominator of the innermost fraction at the current cursor position.

  The innermost fraction may simply be retrieved using the macro <scm|with-innermost>. Together with the routine <scm|tree-set!> for modifying a tree, this yields a first simple implementation:

  <\scm-code>
    (define (swap-numerator-denominator)

    \ \ (with-innermost t 'frac

    \ \ \ \ (tree-set! t ‘(frac ,(tree-ref t 1) ,(tree-ref t 0)))))
  </scm-code>

  It should be noticed that the macro <scm|with-innermost> ignores its body whenever no innermost fraction is found.

  The above implementation has the disadvantage that we loose the current cursor position inside the numerator or denominator (wherever we were). The following refined implementation allows us to remain at the “same position” modulo the exchange numerator/denominator:

  <\scm-code>
    (define (swap-numerator-denominator)

    \ \ (with-innermost t 'frac

    \ \ \ \ (with p (tree-cursor-path t)

    \ \ \ \ \ \ (tree-set! t ‘(frac ,(tree-ref t 1) ,(tree-ref t 0)))

    \ \ \ \ \ \ (tree-go-to t (cons (- 1 (car p)) (cdr p))))))
  </scm-code>

  Here we used the routines <scm|tree-cursor-path> and <scm|tree-go-to>, which allow us to manipulate the cursor position relative to a given tree.

  As the icing on the cake, we may make our routine available through the mechanism of structured variants:

  <\scm-code>
    (define (variant-circulate t forward?)

    \ \ (:require (tree-is? t 'frac))

    \ \ (swap-numerator-denominator))
  </scm-code>

  Notice that this implementation can be incorrect when operating on nested fractions. The implementation can be further improved by letting <scm|swap-numerator-denominator> operate on a specific<nbsp>tree:

  <\scm-code>
    (define (swap-numerator-denominator t)

    \ \ (:require (tree-is? t 'frac))

    \ \ (with p (tree-cursor-path t)

    \ \ \ \ (tree-set! t ‘(frac ,(tree-ref t 1) ,(tree-ref t 0)))

    \ \ \ \ (tree-go-to t (cons (- 1 (car p)) (cdr p)))))
  </scm-code>

  The corresponding generic routine could be defined as

  <\scm-code>
    (define (swap-numerator-denominator t)

    \ \ (and-with p (tree-outer t)

    \ \ \ \ (swap-numerator-denominator p)))
  </scm-code>

  This piece of code will perform an outward recursion until a specific handler is found. We may now replace the call <scm|(swap-numerator-denominator)> by <scm|(swap-numerator-denominator (cursor-tree))>.

  The new implementation also allows us to toggle the numerator and denominator of a<nbsp>selected fraction using <scm|(swap-numerator-denominator (focus-tree))>. However, the focus is not necessarily conserved during the operation, thereby disallowing to restore the original state by toggling a second time. We may explicitly conserve the focus as follows:

  <\scm-code>
    (define (swap-numerator-denominator t)

    \ \ (:require (tree-is? t 'frac))

    \ \ (with p (tree-cursor-path t)

    \ \ \ \ (tree-set! t ‘(frac ,(tree-ref t 1) ,(tree-ref t 0)))

    \ \ \ \ (tree-go-to t (cons (- 1 (car p)) (cdr p)))

    \ \ \ \ (tree-focus t)))
  </scm-code>

  This routine will even work when we are inside a nested fraction and operating on the outer fraction.

  <section|Fundamental tree modification routines><label|sec-edit-fundamental>

  From an internal point of view, all modifications to the <TeXmacs> edit tree are decomposed into atomic modifications of eight different types. In this section, we describe the <scheme> interface to these fundamental modification routines. Even though it is usually more convenient to use higher level modification routines, as described in the <hlink|next section|#sec-edit-modify>, the fundamental tree modification routines may occasionally be useful as well.

  It should be emphasized that the fundamental tree modification routines are <em|not> checked for their correctness. It is the responsibility of the user to verify that the operations are valid and that they lead to a correct new edit tree. Although it is sometimes possible to leave the edit tree in a temporarily incorrect or “unsimplified” state (for instance, by allowing subtrees of the form <rigid|<scm|(concat "")>>), this practice is not generally recommended, and may lead to severe bugs.

  <\explain>
    <scm|(tree-assign! <scm-arg|var> <scm-arg|new-value>)><explain-synopsis|tree assignment>
  <|explain>
    On input, we have a <scheme> variable <scm-arg|var> of type <verbatim|tree> and <scm-arg|new-value> of type <verbatim|content>. The macro replaces the tree by <scm-arg|new-value> and updates <scm-arg|var> accordingly. The new tree value of <scm-arg|var> is returned.
  </explain>

  <\explain>
    <scm|(tree-insert! <scm-arg|var> <scm-arg|pos> <scm-arg|ins>)><explain-synopsis|insertion of new nodes or characters>
  <|explain>
    The first parameter <scm-arg|var> is a <scheme> variable of type <verbatim|tree>. If <scm-arg|var> is a compound tree, then <scm-arg|ins> should be a list <math|u<rsub|0>,\<ldots\>,u<rsub|l-1>> of new children of type <verbatim|content>. In that case, the routine inserts <math|u<rsub|0>,\<ldots\>,u<rsub|l-1>> into the children of <scm-arg|var>, at position <scm-arg|pos> (see figure <reference|insert-remove-fig>). If <scm-arg|var> is a string tree, then <scm-arg|ins> should be of string content type, and the string <scm-arg|ins> is inserted into <scm-arg|var> at position <scm-arg|pos>. The variable <scm-arg|var> is updated with the result of the insertion and the result is returned.
  </explain>

  <\explain>
    <scm|(tree-remove! <scm-arg|var> <scm-arg|pos> <scm-arg|nr>)><explain-synopsis|removal of nodes or characters>
  <|explain>
    The first parameter <scm-arg|var> is a <scheme> variable of type <verbatim|tree>. If <scm-arg|var> is a compound tree, then <scm-arg|nr> of its children are removed, starting at position <scm-arg|pos> (see figure <reference|insert-remove-fig>). If <scm-arg|var> is a string tree, then <scm-arg|nr> characters are removed, starting at position <scm-arg|pos>. The variable <scm-arg|var> is updated with the result of the removal and the result is returned.
  </explain>

  <\big-figure>
    <\equation*>
      <tabular*|<tformat|<table|<row|<cell|<tabular*|<tformat|<cwith|1|1|3|3|cell-valign|c>|<table|<row|<cell|<tree|t|t<rsub|0>|\<cdots\>|t<rsub|n-1>>>|<cell|>|<cell|\<longrightarrowlim\><rsup|insert<around|(|t,i,u|)>>>|<cell|>|<cell|<tree|t|t<rsub|0>|\<cdots\>|t<rsub|i-1>|u<rsub|0>|\<cdots\>|u<rsub|l-1>|t<rsub|i>|\<cdots\>|t<rsub|n-1>>>>>>>>>|<row|<cell|>>|<row|<cell|<tabular*|<tformat|<cwith|1|1|3|3|cell-valign|c>|<table|<row|<cell|<tree|t|t<rsub|0>|\<cdots\>|t<rsub|n-1>>>|<cell|>|<cell|\<longrightarrowlim\><rsup|remove<around|(|t,i,l|)>>>|<cell|>|<cell|<tree|t|t<rsub|0>|\<cdots\>|t<rsub|i-1>|t<rsub|i+l>|\<cdots\>|t<rsub|n-1>>>>>>>>>>>>
    </equation*>

    \;
  <|big-figure>
    <label|insert-remove-fig>Illustration of the operations <scm|(tree-insert! t i u)> and <scm|(tree-remove! t i l)>. If <scm|u> has length<nbsp><scm|l>, then we notice that <scm|(tree-remove! t i l)> undos the insertion <scm|(tree-insert! t i u)>.
  </big-figure>

  \;

  <\explain>
    <scm|(tree-split! <scm-arg|var> <scm-arg|pos> <scm-arg|at>)><explain-synopsis|split the children into two parts>
  <|explain>
    The first parameter <scm-arg|var> is a <scheme> variable of type <verbatim|tree>. The macro is used to split the child <math|u> of <scm-arg|var> at position <scm-arg|pos> into two parts. If <math|u> is a compound tree, then the first part consists of the first <scm-arg|at> children and the second part of the remaining ones. Both parts carry the same label as <math|u> and <math|u> is replaced by the two parts inside <scm-arg|var> (see figure <reference|split-join-fig>). If <math|u> is string tree, then it is rather split into two strings at position <scm-arg|at>. The variable <scm-arg|var> is updated with the result of the split command and the result is returned.
  </explain>

  <\explain>
    <scm|(tree-join! <scm-arg|var> <scm-arg|pos>)><explain-synopsis|join two adjacent nodes>
  <|explain>
    The first parameter <scm-arg|var> is a <scheme> variable of type <verbatim|tree>. This macro is used to join the child <math|u> of <scm-arg|var> at position <scm-arg|pos> with the child <math|v> at position <scm-arg|pos>+1. If <math|u> and <math|v> are trees, then they are removed from <scm-arg|var> and replaced by a single tree which has the same label as <math|u> and whose children are those of <math|u>, followed by the children of <math|v> (see figure <reference|split-join-fig>). If <math|u> and <math|v> are strings, then they are replaced by their concatenation. The variable <scm-arg|var> is updated with the result of the join command and the result is returned.
  </explain>

  <\big-figure>
    <\equation*>
      <tabular*|<tformat|<table|<row|<cell|<tabular*|<tformat|<cwith|1|1|3|3|cell-valign|c>|<table|<row|<cell|<tree|t|t<rsub|0>|\<cdots\>|<resize|<tree|t<rsub|i>|t<rsub|i,0>|\<cdots\>|t<rsub|i,k-1>>|<plus|1l|1fn>||<minus|1r|1fn>|>|\<cdots\>|t<rsub|n-1>>>|<cell|>|<cell|\<longrightarrowlim\><rsup|split<around|(|t,i,j|)>>>|<cell|>|<cell|<tree|t|t<rsub|0>|\<cdots\>|<resize|<tree|t<rsub|i>|t<rsub|i,0>|\<cdots\>|t<rsub|i,j-1>>|<plus|1l|1fn>|||>|<resize|<tree|t<rsub|i>|t<rsub|i,j>|\<cdots\>|t<rsub|i,k-1>>|||<minus|1r|1fn>|>|\<cdots\>|t<rsub|n-1>>>>>>><space|1em><space|1em>>>|<row|<cell|>>|<row|<cell|<tabular*|<tformat|<cwith|1|1|3|3|cell-valign|c>|<table|<row|<cell|<tree|t|t<rsub|0>|\<cdots\>|<resize|<tree|t<rsub|i>|t<rsub|i,0>|\<cdots\>|t<rsub|i,j-1>>|<plus|1l|2fn>|||>|<resize|<tree|t<rsub|i+1>|t<rsub|i+1,j>|\<cdots\>|t<rsub|i+1,k-1>>|||<minus|1r|2fn>|>|\<cdots\>|t<rsub|n-1>>>|<cell|>|<cell|\<longrightarrowlim\><rsup|join<around|(|t,i|)>>>|<cell|>|<cell|<tree|t|t<rsub|0>|\<cdots\>|<resize|<tree|t<rsub|i>|t<rsub|i,0>|\<cdots\>|t<rsub|i,j-1>|t<rsub|i+1,0>|\<cdots\>|t<rsub|i+1,k-1>>|<plus|1l|4fn>||<minus|1r|4fn>|>|\<cdots\>|t<rsub|n-1>>>>>>>>>>>>
    </equation*>

    \;
  <|big-figure>
    <label|split-join-fig>Illustration of the operations <scm|(tree-split! t i j)> and <scm|(tree-join! t i)>. Notice that <scm|(tree-join! t i)> undos <scm|(tree-split! t i j)>.
  </big-figure>

  <\explain>
    <scm|(tree-assign-node! <scm-arg|var> <scm-arg|lab>)><explain-synopsis|assign the label of a tree>
  <|explain>
    This macro replaces the label of a compound tree stored in a <scheme> variable <scm-arg|var> by a new value <scm-arg|lab>. The result of the substitution is returned.
  </explain>

  <\explain>
    <scm|(tree-insert-node! <scm-arg|var> <scm-arg|pos> <scm-arg|ins>)><explain-synopsis|insert the tree as a child of another one>
  <|explain>
    Given a <scheme> variable <scm-arg|var>, containing a tree, and a content tree <scm-arg|ins>, this macro replaces <scm-arg|var> by <scm-arg|ins>, with <scm-arg|var> inserted as a new child of <scm-arg|ins> at position <scm-arg|pos> (see figure <reference|insert-remove-node-fig>). The result of the insertion is returned.
  </explain>

  <\explain>
    <scm|(tree-remove-node! <scm-arg|var> <scm-arg|pos>)><explain-synopsis|replace a tree by a child>
  <|explain>
    Given a <scheme> variable <scm-arg|var>, containing a compound tree, this macro replaces <scm-arg|var> by its child at position <scm-arg|pos> (see figure <reference|insert-remove-node-fig>). The value of this child is returned.
  </explain>

  <\big-figure>
    <\equation*>
      <tabular*|<tformat|<table|<row|<cell|<tabular*|<tformat|<cwith|1|1|3|3|cell-valign|c>|<cwith|1|1|1|1|cell-valign|c>|<table|<row|<cell|t>|<cell|>|<cell|\<longrightarrowlim\><rsup|insert-node<around|(|t,i,u|)>>>|<cell|>|<cell|<tree|u|u<rsub|0>|\<cdots\>|u<rsub|i-1>|t|u<rsub|i>|\<cdots\>|u<rsub|n-1>>>>>>>>>|<row|<cell|>>|<row|<cell|<tabular*|<tformat|<cwith|1|1|3|3|cell-valign|c>|<cwith|1|1|5|5|cell-valign|c>|<table|<row|<cell|<tree|t|t<rsub|0>|\<cdots\>|t<rsub|n-1>>>|<cell|>|<cell|\<longrightarrowlim\><rsup|remove-node<around|(|t,i|)>>>|<cell|>|<cell|t<rsub|i>>>>>>>>>>>
    </equation*>

    \;
  <|big-figure>
    <label|insert-remove-node-fig>Illustration of the operations <scm|(tree-insert-node! t i u)> and <scm|(tree-remove-node! t i)>. Notice that the second operation undoes the first one.
  </big-figure>

  <\remark>
    Each of the macros <scm|tree-assign!>, <scm|tree-insert!>, <abbr|etc.> has a functional counterpart <verbatim|<scm|tree-assign>>, <verbatim|<scm|tree-insert>>, etc. The first parameter of these counterparts can be an arbitrary “l-<no-break>value” and does not have to be a scheme variable. However, in the case when a <scheme> variable is passed as the first parameter, these variants do not necessarily update its contents with the return value.
  </remark>

  <section|High level modification routines><label|sec-edit-modify>

  The routine <scm|tree-set> and the corresponding macro <scm|tree-set!> can be used as a higher level interface to the fundamental routines for modifying trees as described in the <hlink|previous section|#sec-edit-fundamental>. However, it is still up to the user to verify that the resulting edit tree is still correct.

  <\explain>
    <scm|(tree-set <scm-arg|which> <scm-args|accessors> <scm-arg|new-value>)>

    <scm|(tree-set! <scm-arg|which> <scm-args|accessors> <scm-arg|new-value>)><explain-synopsis|smart tree assignment>
  <|explain>
    This routine replaces the tree <scm|(tree-ref <scm-arg|which> <scm-args|accessors>)> by a new content value <scm-arg|new-value>. Besides the fact that the routine <scm|tree-set> supports additional accessors for <scm-arg|which> (see the description of <scm|tree-ref> below), <scm|tree-set> differs from <scm|tree-assign> in this respect that <scm|tree-set> tries to cleverly decompose the assignment into fundamental modification routines. The objective of this decomposition is to make a less intrusive modifications in the document, so as to preserve as many tree positions and cursor positions as possible.

    For instance, the operation <scm|(tree-set t t)> is a no-operation for all trees <scm|t>. A more complex operations like

    <\scm-code>
      (<scm|tree-set!> t ‘(foo "Hop" ,(<scm|tree-ref> t 2)))
    </scm-code>

    is decomposed into the following fundamental modifications:

    <\scm-code>
      (<scm|tree-remove-node!> t 2)

      (<scm|tree-insert-node!> t 1 '(foo "Hop"))
    </scm-code>

    Like in the case <scm|tree-assign> and <scm|tree-assign!>, you should use the macro <scm|tree-set!> in order to update the value of <scm-arg|which> if <scm-arg|which> is a <scheme> variable <scm-arg|accessors> is the empty list.
  </explain>

  <\explain>
    <scm|(tree-ref <scm-arg|which> <scm-args|accessors>)><explain-synopsis|enhanced tree access>
  <|explain>
    In its simplest form, this routine allows for the quick access of a subtree of <scm-arg|which> via a list of integers <scm-arg|accessors>. For instance, if <scm-arg|which> contains the tree <scm|(frac "a" (sqrt "b")))>, then <scm|(tree-ref <scm-arg|which> 1 0)> returns the tree <scm|"b">.

    In its general form, <scm|tree-ref> relies on the routine <scm|select> in order to compute the desired subtree. With <scm-arg|which> as in the above example, this makes it possible to retrieve the subtree <rigid|<scm|(sqrt "b")>> using <scm|(tree-ref t 'frac)>. In the case when there are several matches, the first match is returned. For instance, if <scm-arg|which> contains the tree <rigid|<scm|(frac (sqrt "a") (sqrt "b")))>>, then <scm|(tree-ref t 'frac)> returns <rigid|<scm|(sqrt "a")>>.

    In fact, the result of <scm|tree-ref> is not necessarily a subtree of <scm-arg|which>: the <scm|select> utility also accepts the accessors <scm|:up>, <scm|:down>, <scm|:next>, <scm|:previous>, <abbr|etc.> for navigating inside the edit tree starting with <scm-arg|which>. For instance, <scm|(tree-ref (cursor-tree) :up)> returns the parent of the cursor tree. For more details, we refer to the documentation of <scm|select>.
  </explain>

  Besides the above routine for the direct modification of a subtree of the document, <TeXmacs> also provides several routines for inserting content at the current cursor position.

  <\explain>
    <scm|(insert <scm-arg|what>)><explain-synopsis|insertion of content>
  <|explain>
    Insert the content <scm-arg|what> at the current cursor position. <TeXmacs> does some additional checking whether it is allowed to perform the insertion. For instance, it is disallowed to insert multi-paragraph content inside a mathematical formula. Whenever the user attempts to make an invalid insertion, then <scm|insert> is equivalent to a no-operation.
  </explain>

  <\explain>
    <scm|(make <scm-arg|lab>)><explain-synopsis|insertion of a tag>
  <|explain>
    This routine may be used to insert a valid tag with label <scm-arg|lab>. As many empty arguments as necessary are inserted in order to make the tag valid. Similarly, if <scm-arg|lab> is a multi-paragraph tag, then the necessary operations are performed to put the tag in a separate paragraph.
  </explain>

  <scm|make-with>, <scm|insert-return>, etc.

  <section|Path-based navigation><label|sec-edit-path-navigate>

  \;

  <chapter|<TeXmacs> buffer management><label|sec-scheme-buffer>

  <section|Introduction><label|sec-buffer-intro>

  There are three main kinds of objects for buffer management in <TeXmacs>:

  <\description>
    <item*|Buffers>Every open <TeXmacs> document is stored in a unique editable buffer. Buffers typically admit a<nbsp>one to one correspondence to files on disk or elsewhere on the web. Some buffers are of a<nbsp>more auxiliary nature, such as automatically generated help buffers. All buffers admit a unique URL. In the case of auxiliary buffers, this URL is really a read-only “placeholder”, so saving this kind of buffers is impossible (of course, it remains possible to save the buffer under a new name).

    <item*|Views>It is possible to have multiple views on the same buffer. Every view is identified by a<nbsp>unique automatically generated URL, which again acts as a placeholder.

    <item*|Windows>Views (contrary to the buffers themselves) can be displayed in actual windows. Currently, any <TeXmacs> window contains a unique view and a view may only be displayed in one window at the same time (of course, it is possible to display different views on the same buffer in different windows). Windows are again represented by automatically generated<nbsp>URLS.
  </description>

  <\remark>
    In the future, views and windows should really be considered as documents themselves. Changes in the view will be automatically propagated (or not) to the corresponding buffer, and the other views. Windows will contain a document which specifies its layout (menus and toolbars). The corresponding view (or views) will be an active hyperlink (or active hyperlinks). The current APIs already reflect these future development intentions.
  </remark>

  <section|Manipulating <TeXmacs> buffers><label|sec-buffer-api>

  <paragraph|Basic buffer management>

  <\explain>
    <scm|(buffer-list)><explain-synopsis|list of all buffers>
  <|explain>
    This routine returns the list of all open buffers.
  </explain>

  <\explain>
    <scm|(current-buffer)><explain-synopsis|current buffer>
  <|explain>
    Return the current view. The program may abort if there exists no current buffer.
  </explain>

  <\explain>
    <scm|(path-\<gtr\>buffer <scm-arg|p>)><explain-synopsis|buffer which contains a certain path>
  <|explain>
    Return the buffer which contains a certain path <scm-arg|p>, or <scm|#f>.
  </explain>

  <\explain>
    <scm|(tree-\<gtr\>buffer <scm-arg|t>)><explain-synopsis|buffer which contains a certain tree>
  <|explain>
    Return the buffer which contains a certain tree <scm-arg|t>, or <scm|#f>.
  </explain>

  <\explain>
    <scm|(buffer-\<gtr\>views <scm-arg|buf>)><explain-synopsis|list of views on a buffer>
  <|explain>
    This routine returns the list of views on the buffer <scm-arg|buf>.
  </explain>

  <\explain>
    <scm|(buffer-\<gtr\>windows <scm-arg|buf>)><explain-synopsis|list of windows containing buffer>
  <|explain>
    This routine returns the list of windows in which the buffer <scm-arg|buf> is currently being displayed.
  </explain>

  <\explain>
    <scm|(buffer-new)><explain-synopsis|create a new buffer>
  <|explain>
    Create a new buffer and returns its URL.
  </explain>

  <\explain>
    <scm|(buffer-rename <scm-arg|buf> <scm-arg|new-name>)><explain-synopsis|create a new buffer>
  <|explain>
    Give a new name <scm-arg|new-name> to the buffer <scm-arg|buf>.
  </explain>

  <\explain>
    <scm|(switch-to-buffer <scm-arg|buf>)><explain-synopsis|switch the editor's focus>
  <|explain>
    Switch the editor's focus to the buffer <scm-arg|buf>.
  </explain>

  <paragraph|Information associated to buffers>

  <\explain>
    <scm|(buffer-set <scm-arg|buf> <scm-arg|rich-t>)>

    <scm|(buffer-get <scm-arg|buf>)><explain-synopsis|set/get the contents of the buffer>
  <|explain>
    Set the contents of the buffer <scm-arg|buf> to the rich tree <scm-arg|rich-t>, <abbr|resp.> get the rich contents of <scm-arg|buf>. Rich trees do not only contain the actual body of the document, but also some meta-data, such as its style, initial values of environment variables, and other auxiliary data attached to the document.
  </explain>

  <\explain>
    <scm|(buffer-set-body <scm-arg|buf> <scm-arg|t>)>

    <scm|(buffer-get-body <scm-arg|buf>)><explain-synopsis|set/get the main body of the buffer>
  <|explain>
    Set the main body of the buffer <scm-arg|buf> to the tree <scm-arg|t>, <abbr|resp.> get the main body of <scm-arg|buf>.
  </explain>

  <\explain>
    <scm|(buffer-set-master <scm-arg|buf> <scm-arg|master>)>

    <scm|(buffer-get-master <scm-arg|buf>)><explain-synopsis|set/get the master of the buffer>
  <|explain>
    Set the master of the buffer <scm-arg|buf> to <scm-arg|master>, <abbr|resp.> get the master of <scm-arg|buf>. The master of a buffer should again be a buffer. Usually, the master of a buffer is the buffer itself. Otherwise, the buffer will behave similarly as its master in some respects. For instance, if a buffer <verbatim|a/b.tm> admits <verbatim|x/y.tm> as its master, then a hyperlink to <verbatim|c.tm> will point to <verbatim|x/c.tm> and not to <verbatim|a/c.tm>.
  </explain>

  <\explain>
    <scm|(buffer-set-title <scm-arg|buf> <scm-arg|name>)>

    <scm|(buffer-get-title <scm-arg|buf>)><explain-synopsis|set/get the title of the buffer>
  <|explain>
    Set the title of the buffer <scm-arg|buf> to the string <scm-arg|name>, <abbr|resp.> get the title of <scm-arg|buf>. The title is for instance used as the title for the window.
  </explain>

  <\explain>
    <scm|(buffer-set-title <scm-arg|buf> <scm-arg|name>)>

    <scm|(buffer-get-title <scm-arg|buf>)><explain-synopsis|set/get the title of the buffer>
  <|explain>
    Set the title of the buffer <scm-arg|buf> to the string <scm-arg|name>, <abbr|resp.> get the title of <scm-arg|buf>. The title is for instance used as the title for the window.
  </explain>

  <\explain>
    <scm|(buffer-last-save <scm-arg|buf>)>

    <scm|(buffer-last-visited <scm-arg|buf>)><explain-synopsis|time when a buffer was visited/saved last>
  <|explain>
    Return the time when the buffer <scm-arg|buf> was visited or saved last.
  </explain>

  <\explain>
    <scm|(buffer-modified? <scm-arg|buf>)>

    <scm|(buffer-pretend-saved <scm-arg|buf>)><explain-synopsis|check for modifications since last save>
  <|explain>
    The predicate <scm|buffer-modified?> check whether the buffer <scm-arg|buf> was modified since the last time it was saved. The routine <scm|buffer-pretend-saved> can be used in order to pretend that the<nbsp>buffer <scm-arg|buf> was saved, without actually saving it. This can for instance be useful if no worthwhile changes occurred in the buffer since the genuine last save.
  </explain>

  <paragraph|Synchronizing with the external world>

  Buffers inside <TeXmacs> usually correspond to actual files on disk or elsewhere. When changes occur on either side (<abbr|e.g.> when editing the buffer, or modifying the file on disk using an external program), the following routines can be used in order to synchronize the buffer inside <TeXmacs> with its corresponding file on disk.

  <\explain>
    <scm|(buffer-load <scm-arg|buf>)><explain-synopsis|load buffer>
  <|explain>
    Retrieve the buffer <scm-arg|buf> from disk (or elsewhere). Returns <scm|#t> on error and <scm|#f> otherwise. The format being used for loading files is chosen as a function of the extension of <scm-arg|buf>.
  </explain>

  <\explain>
    <scm|(buffer-save <scm-arg|buf>)><explain-synopsis|save buffer>
  <|explain>
    Save the buffer <scm-arg|buf> to disk (or elsewhere). Returns <scm|#t> on error and <scm|#f> otherwise. The format being used for saving files is chosen as a function of the extension of <scm-arg|buf>.
  </explain>

  <\explain>
    <scm|(buffer-import <scm-arg|buf> <scm-arg|src> <scm-arg|fm>)><explain-synopsis|import buffer>
  <|explain>
    Import the buffer <scm-arg|buf> from <scm-arg|src>, using the format <scm-arg|fm>. Returns <scm|#t> on error and <scm|#f> otherwise.
  </explain>

  <\explain>
    <scm|(buffer-export <scm-arg|buf> <scm-arg|dest> <scm-arg|fm>)><explain-synopsis|export buffer>
  <|explain>
    Export the buffer <scm-arg|buf> to <scm-arg|dest>, using the format <scm-arg|fm>. Returns <scm|#t> on error and <scm|#f> otherwise.
  </explain>

  <\explain>
    <scm|(tree-import <scm-arg|src> <scm-arg|fm>)><explain-synopsis|import a tree>
  <|explain>
    Import a tree from the URL <scm-arg|src>, using the format <scm-arg|fm>.
  </explain>

  <\explain>
    <scm|(tree-export <scm-arg|t> <scm-arg|dest> <scm-arg|fm>)><explain-synopsis|export a tree>
  <|explain>
    Export a tree to the URL <scm-arg|dest>, using the format <scm-arg|fm>.
  </explain>

  <section|Manipulating <TeXmacs> views><label|sec-view-api>

  <\explain>
    <scm|(view-list)><explain-synopsis|list of all views>
  <|explain>
    This routine returns the list of all available views, sorted by inverse chronological order. That is, views which were selected more recently will occur earlier in the list.
  </explain>

  <\explain>
    <scm|(current-view)><explain-synopsis|current view>
  <|explain>
    Return the current view or <scm|#f>.
  </explain>

  <\explain>
    <scm|(view-\<gtr\>buffer <scm-arg|vw>)><explain-synopsis|buffer to which the view is attached>
  <|explain>
    This routine returns the buffer to which the view <scm-arg|vw> is attached.
  </explain>

  <\explain>
    <scm|(view-\<gtr\>window <scm-arg|vw>)><explain-synopsis|window to which the view is attached>
  <|explain>
    This routine returns the window in which the view <scm-arg|vw> is being displayed or <scm|#f>.
  </explain>

  <\explain>
    <scm|(view-new <scm-arg|buf>)>

    <scm|(view-passive <scm-arg|buf>)>

    <scm|(view-recent <scm-arg|buf>)><explain-synopsis|get view on buffer>
  <|explain>
    All three routines return a view on the buffer <scm-arg|buf>. In the case of <scm|view-new>, we systematically create a new view. The routine <scm|view-passive> first attempts to find an existing view on <scm-arg|buf> which is not attached to a window; if no such view exists, then a new one is created. The last routine <scm|view-recent> returns the most recent existing view, with a preference for the current view, or another visible view. Again, a new view is created if no suitable recent view exists.
  </explain>

  <section|Manipulating <TeXmacs> windows><label|sec-window-api>

  <\explain>
    <scm|(window-list)><explain-synopsis|list of all <TeXmacs> windows>
  <|explain>
    Return the list of all <TeXmacs> windows.
  </explain>

  <\explain>
    <scm|(current-window)><explain-synopsis|current window>
  <|explain>
    Return the current window. The program may abort if there exists no current window.
  </explain>

  <\explain>
    <scm|(window-\<gtr\>buffer <scm-arg|win>)><explain-synopsis|buffer displayed in window>
  <|explain>
    This routine returns the buffer which is currently being displayed in the window <scm-arg|win>. Warning: in the future, when a window will be allowed to contain multiple buffers, this routine might be replaced by <scm|window-\<gtr\>buffers>.
  </explain>

  <\explain>
    <scm|(window-\<gtr\>view <scm-arg|win>)><explain-synopsis|view displayed in window>
  <|explain>
    This routine returns the view which is currently being displayed in the window <scm-arg|win>. Warning: in the future, when a window will be allowed to contain multiple views, this routine might be replaced by <scm|window-\<gtr\>views>.
  </explain>

  <\explain>
    <scm|(window-set-buffer <scm-arg|win> <scm-arg|buf>)><explain-synopsis|show buffer in window>
  <|explain>
    Display the buffer <scm-arg|buf> in the window <scm-arg|win>.
  </explain>

  <\explain>
    <scm|(window-set-view <scm-arg|win> <scm-arg|vw>)><explain-synopsis|show view in window>
  <|explain>
    Display the view <scm-arg|vw> in the window <scm-arg|win>. The program may abort if the view was already attached to another window.
  </explain>

  <\explain>
    <scm|(window-focus <scm-arg|win>)><explain-synopsis|focus window>
  <|explain>
    Set the current focus to the window <scm-arg|win>. The current implementation is still a bit bugged and only correct if you want to execute a sequence of commands under the assumption that <scm-arg|win> carries the focus and if you return the focus to the original window at the end.
  </explain>

  <\explain>
    <scm|(open-window)><explain-synopsis|create new window>
  <|explain>
    Create a new window with an empty buffer and return the <abbr|URL> of the window.
  </explain>

  <\explain>
    <scm|(open-buffer-in-window <scm-arg|buf> <scm-arg|cnt> <scm-arg|attrs>)> <explain-synopsis|No synopsis available>
  <|explain>
    Create a new window and set its main buffer to that identified by the <abbr|URL> <scm-arg|buf>. If <scm-arg|buf> is not yet a valid buffer, it is created and its contents set to <scm-arg|cnt>, otherwise the second parameter is ignored. The window is created with its attributes set to <scm-arg|attrs> (currently only the geometry is taken into account, but this might be extended in the future, see the <c++> function <cpp|url new_window (bool map_flag= true, tree geom= "")>)
  </explain>

  <chapter|Scheme interface for the graphical mode><label|sec-scheme-graphics>

  <section|Low level graphics manipulation><label|sec-graphics-api-1>

  <paragraph*|Rationale>

  <TeXmacs> provides a small low-level library for the manipulation of graphics on top of the usual tree interface. One particularity of graphics operations is that they usually concern a large number of continuous changes (as a function of mouse movement) to one or more objects (under construction or being edited). On the one hand, this means that not all movements have to be undoable. On the other hand, this implies that some optimizations may be necessary to obtain a reasonable speed.

  For these reasons, the library allows the programmer to focus attention on one or several objects in a graphics and to quickly perform operations on these objects. Focus is mostly understood to be temporary: typically, the focus is released as soon as an operation has been completed, i.e. the construction of a polyline.

  From the implementation point of view, the selected objects may either be removed from the document (current implementation), or kept in the document (future implementation), while displaying them on top of the other objects (if necessary).

  <paragraph*|Definitions>

  <\description>
    <item*|Tree>As in the main tree API. There are three main types of trees with graphical markup: graphics, shapes and groups.

    <item*|Enhanced tree>Trees with graphical markup can be enhanced to provide additional properties for the markup by means of with tags. For instance, an "enhanced shape" (see below) might be a polyline together with a particular color and line width.

    <item*|Radical and properties>In the case of an enhanced tree of the form <scm|(with <scm-args|props> <scm-arg|object>)>, <scm-arg|object> is called the radical of the enhanced tree and <scm-args|props> the properties of the enhanced tree. Notice that an enhanced tree is allowed to be reduced to its radical, in which case it has no properties.

    <item*|Graphics>This term corresponds to the main graphics, which is an ordered list of enhanced shapes or groups. Enhancements for the main graphics can be divided in two categories:

    <\itemize>
      <item>Global properties for the graphics itself, e.g. rendering properties, or a background grid.

      <item>Editing properties, which control the current editing behaviour of the graphics (polyline mode, current pen colour, etc.).
    </itemize>

    <item*|Shape>A shape is an atomic graphical markup primitive, such as a polyline. Typical enhancements for shapes are pen color, fill color, line width, arrow mode, etc.

    <item*|Group>A group is an ordered list of enhanced shapes or groups. The possible enhancements for groups are the same as the ones for shapes (and, in this respect, groups therefore differ from graphics).

    <item*|Sketch> The current sketch corresponds to a single or ordered list of enhanced shapes or groups on which the graphical editor is currently operating. There are two main modes for the sketch:

    <\description>
      <item*|SELECTING>the sketch corresponds to a selection of enhanced shapes or groups in the main document.

      <item*|MODIFYING>the sketch corresponds to a single or ordered list of enhanced shapes or groups which are being constructed or modified. The trees in the sketch can be new trees or trees which correspond to marked (invisible) trees in the main document.
    </description>

    The current sketch is usually displayed on top of all other graphics, together with several control points.
  </description>

  <paragraph*|Manipulation of enhanced trees>

  <\explain>
    <scm|(enhanced-tree-\<gtr\>radical <scm-arg|t>)><explain-synopsis|get radical>
  <|explain>
    \ Given an enhanced tree <scm-arg|t>, return its radical.
  </explain>

  <\explain>
    <scm|(radical-\<gtr\>enhanced-tree <scm-arg|t>)><explain-synopsis|get enhanced tree>
  <|explain>
    Given a radical <scm-arg|t>, find its parent which corresponds to its largest enhancement. If <scm-arg|t> does not belong to a TeXmacs document, this routine returns <scm|#f>.
  </explain>

  <\explain>
    <scm|(enhanced-tree-set! <scm-arg|t> <scm-args|p> <scm-arg|u>)>

    <scm|(enhanced-tree-ref <scm-arg|t> <scm-args|p>)>

    <scm|(enhanced-tree-arity <scm-arg|t> <scm-args|p>)><explain-synopsis|analogue of basic tree API>
  <|explain>
    These routines are similar to tree-set, <scm|tree-set!>, etc. except that they operate on the radical of the enhanced tree.
  </explain>

  <\explain>
    <scm|(enhanced-tree-properties-set! <scm-arg|t> <scm-arg|l>)><explain-synopsis|set properties>
  <|explain>
    Given an enhanced tree <scm-arg|t>, override its properties with the elements in the association list <scm-arg|l>.
  </explain>

  <\explain>
    <scm|(enhanced-tree-properties-ref <scm-arg|t>)><explain-synopsis|get properties>
  <|explain>
    Obtain an association list with all properties of the enhanced tree <scm-arg|t>.
  </explain>

  <\explain>
    <scm|(enhanced-tree-property-set! <scm-arg|t> <scm-arg|var> <scm-arg|val>)><explain-synopsis|set enhanced property>
  <|explain>
    Set the property <scm-arg|var> of an enhanced tree <scm-arg|t> to <scm-arg|val>.
  </explain>

  <\explain>
    <scm|(enhanced-tree-property-ref t var)><explain-synopsis|get enhanced property>
  <|explain>
    Obtain the property <scm-arg|var> of an enhanced tree <scm-arg|t>.
  </explain>

  <paragraph*|Sketch manipulation>

  <\explain>
    <scm|(sketch-tree)><explain-synopsis|get current sketch>
  <|explain>
    Return the current sketch tree.
  </explain>

  <\explain>
    <scm|(sketch-new <scm-arg|t>)><explain-synopsis|start sketch>
  <|explain>
    Put a new tree in the sketch, which is not part of the document. This routine is typically called when starting the construction of a new enhanced shape.
  </explain>

  <\explain>
    <scm|(sketch-set <scm-arg|t>)><explain-synopsis|set sketch tree>
  <|explain>
    Assign the sketch which a tree <scm-arg|t> which is part of the document (and maintain the correspondence between <scm-arg|t> and the sketch). This routine is typically called when editing an enhanced shape.
  </explain>

  <\explain>
    <scm|(sketch-reset)><explain-synopsis|reset sketch tree>
  <|explain>
    Assign the sketch with an empty group of objects. This routine is typically called before starting the selection of a group of objects.
  </explain>

  <\explain>
    <scm|(sketch-toggle <scm-arg|t>)><explain-synopsis|toggle a tree in the sketch>
  <|explain>
    When the sketch is an enhanced group, this routine toggles whether a tree t in the document belongs to the group (and we maintain the correspondence between t and the corresponding subtree in the sketch). This routine is typically called when selecting a group of objects.
  </explain>

  <\explain>
    <scm|(sketch-checkout)><explain-synopsis|checkout the sketch>
  <|explain>
    Enter MODIFYING mode and potentially disable the counterparts of the trees in the sketch in the main document.
  </explain>

  <\explain>
    <scm|(sketch-commit)><explain-synopsis|commit the sketch>
  <|explain>
    Commit changes made to the sketch in MODIFYING mode and return to SELECTING mode.
  </explain>

  <\explain>
    <scm|(sketch-cancel)><explain-synopsis|cancel the sketch>
  <|explain>
    Cancel any changes made to the sketch in MODIFYING mode and return to the state of the document before the call of sketch-checkout.
  </explain>

  <paragraph*|Miscellaneous>

  <\explain>
    <scm|(sketch-controls-set <scm-arg|l>)><explain-synopsis|set controls>
  <|explain>
    Assign a list of markup objects with control ornaments to the current sketch. The ornaments are rendered on top of the sketch as a visual aid for the user. Typically, when editing a polyline, <scm-arg|l> consists of a list of control points.
  </explain>

  <section|Graphics interface between C++ and <scheme>><label|sec-graphics-api-2>

  <paragraph*|Rationale>

  <TeXmacs> both implements a low-level part of the graphics in C++ and the high-level user interface in <scheme>. This API describes how both parts interact.

  The low-level C++ mainly takes care of transforming the graphical markup in a typeset box. It also provides routines for translating between physical coordinates (relative to the window) into logical coordinates (the local coordinate system of the graphics) and routines for interacting with the typeset boxes (finding the closest objects to a given point or region or projecting a point on a grid).

  <paragraph*|Definitions>

  <\description>
    <item*|Editor coordinates>The coordinates of the outermost typeset box. Mouse events are typically passed in these coordinates. The corresponding data type is <verbatim|SI>.

    <item*|Graphics coordinates>The coordinates of the innermost graphics corresponding to the current cursor position.

    <item*|Grid>The current grid relative to the graphics for editing objects (this grid may theoretically be different from the grid which is displayed). The current grid consists both of a mathematical type of grid (no grid, cartesian grid, polar grid, etc.), together with special points which correspond either to control points, intersections of curves with the grid, intersections of curves, or self-intersections of curves.

    <item*|Grid point>A point on the grid is a triple <scm|(<scm-arg|p> <scm-arg|distance> <scm-arg|type>)>, where <scm-arg|p> is a point in graphics coordinates, <scm-arg|distance> its distance to the point which was projected on the grid (see <verbatim|grid-project> below) and <scm-arg|type> the type of grid point with a potential origin. For instance, <scm-arg|type> can be <verbatim|plain> or something like <verbatim|(control t)> for a control point corresponding to the tree <scm|t> in the document.
  </description>

  <paragraph*|Coordinate transformations>

  <\explain>
    <scm|(editor-\<gtr\>graphics <scm-arg|p>)><explain-synopsis|get graphics coordinates>
  <|explain>
    Transform a point <scm-arg|p> of the form <scm|(<scm-arg|x> <scm-arg|y>)> from the editor coordinates into the graphics coordinates.
  </explain>

  <\explain>
    <scm|(graphics-\<gtr\>editor p)><explain-synopsis|get editor coordinates>
  <|explain>
    Transform a point <scm-arg|p> of the form <scm|(<scm-arg|x> <scm-arg|y>)> from the graphics coordinates into the editor coordinates.
  </explain>

  <paragraph*|Grid routines>

  <\explain>
    <scm|(grid-project <scm-arg|p>)><explain-synopsis|project point on grid>
  <|explain>
    Given a point <scm-arg|p> (in graphics coordinates), find its projection on \ the current grid, the <scm-arg|distance> part of the projection being the distance between <scm-arg|p> and its projection.

    Note: the routine grid-project can also be used in order to find editable shapes and groups close to the current pointer position. Indeed, the corresponding control points are understood to lie on the grid in our sense.
  </explain>

  <\explain>
    <scm|(grid-point-pertinence\<less\>? <scm-arg|p> <scm-arg|q>)>

    <scm|(grid-point-pertinence\<less\>=? <scm-arg|p> <scm-arg|q>)><explain-synopsis|order by pertinence>
  <|explain>
    Grid points are ordered by pertinence as a function of type and distance. For instance, control points have higher pertinence than plain grid points and closer grid points are considered better than farther ones.
  </explain>

  <paragraph*|Selection of shapes>

  <\explain>
    <scm|(graphics-find-disk <scm-arg|p> <scm-arg|r>)><explain-synopsis|search shapes in disk>
  <|explain>
    Return the list of all trees in the graphics which intersect a disk with center <scm-arg|p> and radius <scm-arg|r> (in graphics coordinates).
  </explain>

  <\explain>
    <scm|(graphics-find-rectangle <scm-arg|p> <scm-arg|q>)><explain-synopsis|search shapes in rectangle>
  <|explain>
    Return the list of all trees in the graphics which intersect a rectangle with corners <scm-arg|p> and <scm-arg|q> (in graphics coordinates).
  </explain>

  <paragraph*|Computations with shapes>

  <\explain>
    <scm|(box-info t)><explain-synopsis|get bounding box for a shape>
  <|explain>
    \ Get a bounding box (and other information) about a shape <scm-arg|t>. <scm-arg|t> can be a tree or a scheme tree.
  </explain>

  <\remark>
    This section might be extended, since a lot of the graphical intelligence is implemented in the C++ code. For instance, we might want to compute the intersections of two curves inside the Scheme code. Also, when we will allow for user macros, we might want routines which return the graphical expansion of the macro (the constituent elementary shapes, i.e. polylines, splines, etc.).
  </remark>

  <chapter|Extending the graphical user interface><label|sec-scheme-gui>

  Most of the user interface to <TeXmacs> is dynamically created from within the interpreted <scheme> code. New menus and buttons can be added, or the existing ones reused and rearranged, even the main editor can be embedded anywhere.

  Imagine you want to implement some feature which requires interaction with the user. One possible approach is to use the facility <scm|interactive>, which according to the user's preferences will either popup a dialog or ask in the footer bar, based in metadata you provide inside your <scm|tm-define>'d function. See “<hlink|Meta information and logical programming|#sec-overview-meta>” for more on this topic. However, automatically generated content is not always the best approach, so you might want to explicitly design your interface placing it inside a complicated dialog. The following sections should help you with this.

  <section|An introduction to widgets><label|sec-scheme-gui-intro>

  In <TeXmacs> you create and extend the visual interface using <em|widgets>. This word means either the basic building blocks you have at your disposal, like buttons, popup lists, etc. or the collections of those into dialogs, menu bars or whatever. This rather loose concept might be confusing, especially when we refer to what usually are know as dialogs as widgets, but it makes sense because all sorts of widgets can be aggregated to build more complicated ones as well.<\footnote>
    If you miss some particular ‘‘building block'' from your OS, you might see whether it's feasible as an aggregation of simpler ones or try and play with the UI interface code in C++ (but you'll have to add it for every supported platform!).
  </footnote>

  However, it must be kept in mind that items intended to be inserted in a menu bar won't necessarily display as they do in a separate window: complicated aggregations of widgets might be better placed in a separate window or dialogue, as explained in "<hlink|Dialogs and composite widgets|#sec-scheme-gui-dialogs>".

  A complete reference with all the available widgets is the "<hlink|Widgets reference guide|#sec-scheme-gui-reference>", and you can find some examples in the other subsections of "<hlink|Extending the graphical user interface|#sec-scheme-gui>". If you'd rather see the sources, the whole list of keywords is in the table <scm|gui-make-table> inside <verbatim|menu-define.scm>.

  To create a widget, you'll first need to use <scm|tm-widget> to define a new one. The call to this function uses its particular syntax, with many keywords for the creation of widgets. But we'll start with some buttons and labels.\ 

  Execute the following two lines to get the unavoidable example and leave your mouse over the “Hello” button.

  <\session|scheme|default>
    <\input|Scheme] >
      (tm-widget (example1) ("Hello" "world!"))
    </input>

    <\input|Scheme] >
      (top-window example1 "A first try")
    </input>
  </session>

  As you can see, buttons are implicitly created by simply writing a list with the button's title and a tooltip to be displayed when the user hovers over the button. A bit confusing, and also ugly, because this is intended for <with|font-shape|italic|toolbar> buttons. What you probably want is this:

  <\session|scheme|default>
    <\input|Scheme] >
      (tm-widget (example2) (explicit-buttons ("Hello" (noop))))
    </input>

    <\input|Scheme] >
      (top-window example2 "A nicer button")
    </input>
  </session>

  The second argument is now a <scheme> command to be executed when the user clicks the button, in this case a no-operation, or <scm|(noop)>. Try changing it for <scm|(display "World")> or anything that suits you.

  The next step is to add some text next to the button, i.e. a label. This is done with the <scm|text> keyword, as in <scm|(text "Hello")>, but in order to have both widgets sit side by side, you'll need a container widget as described in "<hlink|Containers, glue, refresh and co.|#sec-scheme-gui-advanced>", such as <scm|hlist>:

  <\session|scheme|default>
    <\unfolded-io|Scheme] >
      (tm-widget (example3)

      \ \ (hlist\ 

      \ \ \ \ (text "Hello")\ 

      \ \ \ \ (explicit-buttons ("world" (display "!\\n")))))
    <|unfolded-io>
      \;
    </unfolded-io>

    <\input|Scheme] >
      (top-window example3 "Some text")
    </input>
  </session>

  That was nice, but as you see, the two widgets are packed together until you resize the window. We need to explicitly tell <TeXmacs> to insert some space between them:

  <\session|scheme|default>
    <\unfolded-io|Scheme] >
      (tm-widget (example3)

      \ \ (hlist\ 

      \ \ \ \ (text "Hello")

      \ \ \ \ \<gtr\>\<gtr\>\<gtr\>

      \ \ \ \ (explicit-buttons ("world" (display "!\\n")))))
    <|unfolded-io>
      \;
    </unfolded-io>

    <\input|Scheme] >
      (top-window example3 "Some text")
    </input>
  </session>

  The special symbol <scm|\<gtr\>\<gtr\>\<gtr\>> is just one of the predefined glue widgets described in "<hlink|Containers, glue, refresh and co.|#sec-scheme-gui-advanced>".

  Text attributes may be changed for <scm|text> widgets and many others by enclosing them inside what we'll name <with|font-shape|italic|style widgets>. These attributes are <scm|mini>, <scm|monospaced>, <scm|grey>, <scm|inert>, <scm|centered> and <scm|bold>, and respectively: reduce the size of the widget, choose a <tt|monospaced font>, set the color to <with|color|grey|grey>, deactivate the widget (meaning it is rendered, but greyed out and inactive), center it and choose a bold face. Here is an example:

  <\session|scheme|default>
    <\unfolded-io|Scheme] >
      (tm-widget (example3)

      \ \ (hlist\ 

      \ \ \ \ (bold (text "Hello"))

      \ \ \ \ \<gtr\>\<gtr\>\<gtr\>

      \ \ \ \ (inert (explicit-buttons ("world" (display "!\\n"))))))
    <|unfolded-io>
      \;
    </unfolded-io>

    <\input|Scheme] >
      (top-window example3 "Some text")
    </input>
  </session>

  From here you can go on reading “<hlink|Extending the graphical user interface|#sec-scheme-gui>” or see the sample widgets in <verbatim|menu-test.scm>.

  <section|Menus and toolbars><label|sec-scheme-gui-menus>

  As we said before, menus are special collections of widgets:

  <with|color|red|Problems with toolbars, system menus, context menus... Menu containers: horizontal menu, vertical menu. Separators.>

  <section|Displaying lists and trees><label|sec-scheme-gui-lists-trees>

  <paragraph|Displaying lists with <scm|enum>, <scm|choice> and <scm|choices>>

  <\explain>
    <scm|(enum <scm-arg|cmd> <scm-arg|items> <scm-arg|default> <scm-arg|width>)><explain-synopsis|a combo box>
  <|explain>
    Builds a combo box which will execute <scm-arg|cmd> whenever the user makes a choice. The <scm-arg|width> may be given in any <TeXmacs> length unit.

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (tm-widget (test-enum)

        \ \ (enum (display* "First " answer "\\n")

        \ \ \ \ \ \ \ \ '("gnu" "gnat" "zebra")

        \ \ \ \ \ \ \ \ "zebra" "10em")))
      <|unfolded-io>
        \;
      </unfolded-io>

      <\input|Scheme] >
        (show test-enum)
      </input>
    </session>
  </explain>

  <\explain>
    <scm|(choice <scm-arg|cmd> <scm-arg|items> <scm-arg|default>)><explain-synopsis|a list of items allowing one to be chosen>
  <|explain>
    Builds a list of items which will execute <scm-arg|cmd> whenever the user makes a choice. <scm-arg|items> is a list, <scm-arg|default> a value. Contrary to <scm|enum>, all items are displayed simultaneously. If one desires scrollbars, the widget must be enclosed in a <scm|scrollable> container. The width of the widget may be set using a <scm|resize> widget.

    <\session|scheme|default>
      <\input|Scheme] >
        (tm-widget (test-choice)

        \ \ (resize "200px" "50px"

        \ \ \ \ (scrollable

        \ \ \ \ \ \ (choice (display* answer "\\n")

        \ \ \ \ \ \ \ \ \ \ \ \ \ \ '("First" "Second" "Third" "Fourth" "Fifth" "Sixth")

        \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Third"))))
      </input>

      <\input|Scheme] >
        (show test-choice)
      </input>
    </session>
  </explain>

  <\explain>
    <scm|(choices <scm-arg|cmd> <scm-arg|items> <scm-arg|defaults>)><explain-synopsis|a list of items allowing several to be chosen>
  <|explain>
    Builds a list of items which will execute <scm-arg|cmd> whenever the user makes a choice. Several items may be selected at the same time. Both <scm-arg|items> and <scm-arg|defaults> are hence lists. Contrary to <scm|enum>, all items are displayed simultaneously. If one desires scrollbars, the widget must be enclosed in a <scm|scrollable> container. The width of the widget may be set using a <scm|resize> widget.

    <\session|scheme|default>
      <\input|Scheme] >
        (tm-widget (test-choices)

        \ \ (resize "200px" "100px"

        \ \ \ \ (scrollable

        \ \ \ \ \ \ (choices (display* answer "\\n")

        \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ '("A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L")

        \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ '("B" "D" "F" "H" "J" "L")))))
      </input>

      <\input|Scheme] >
        (show test-choices)
      </input>
    </session>
  </explain>

  <paragraph|Displaying trees with <scm|tree-widget>>

  <\explain>
    <scm|(tree-widget cmd <scm-arg|data> <scm-arg|data-roles>)><explain-synopsis|a tree view>
  <|explain>
    The <scm|tree-widget> provides a graphical representation of a <TeXmacs> tree <scm-arg|data> (not a <scheme> tree!). This may be part of a document or any other tree. The first node in <scm-arg|data> won't be displayed. All other nodes may have attributes called <em|data roles> which will determine the textual representation of the node, whether it has some icon next to it and which one, etc. These attributes are simply children of the nodes in <scm-arg|data> at predefined positions given by the data roles specification in the argument <scm-arg|data-roles>. This is a list of identifiers for each tree label present in the data. For instance, with the following data roles specification:

    <\scm-code>
      (list

      \ \ (library \ \ \ DisplayRole DecorationRole UserRole:1)

      \ \ (collection DisplayRole UserRole:1))
    </scm-code>

    we use the data:

    <\scm-code>
      (root

      \ \ (library "Library" "icon.png" 12345

      \ \ \ \ (collection "Cool stuff" 001)

      \ \ \ \ (collection "Things to read" 002)

      \ \ \ \ (collection "Current work" 003

      \ \ \ \ \ \ (collection "Forever current" 004)

      \ \ \ \ \ \ (collection "Read me" 005))))
    </scm-code>

    Notice that the node <scm|root> won't be displayed by the <scm|tree-widget> and needs no data roles. Here <scm|UserRole:1> is used to store database ids but it can be anything else. The supported data roles are:

    <\verbatim-code>
      <\code>
        DisplayRole \ \ \ \ \ \ \ ; a string to be displayed

        EditRole \ \ \ \ \ \ \ \ \ \ ; a string valid for an editable representation

        ToolTipRole \ \ \ \ \ \ \ ; a small tooltip to display when the mouse hovers over

        StatusTipRole \ \ \ \ \ ; for the status bar (if present and supported)

        DecorationRole \ \ \ \ ; file name of an icon to use

        CommandRole \ \ \ \ \ \ \ ; sent to the command executed after (double?) clicks

        UserRole:\<less\>number\<gtr\> \ ; left to user definition (will be returned as strings)
      </code>
    </verbatim-code>

    <paragraph|Default data roles>It is possible to omit some or all of the data role specification. By default the widget will use the tree label's string representation for <scm|DisplayRole>, <scm|EditRole>, <scm|ToolTipRole> and <scm|StatusTipRole>. For the <scm|DecorationRole> it will try to load pixmaps named <shell|treelabel-\<less\>label\<gtr\>.xpm> in <shell|$TEXMACS_PIXMAP_PATH>. This search <with|font-series|bold|won't> happen if the <scm|DecorationRole> is specified (i.e. a full path with or without environment variables and wildcards must be given). The default <scm|CommandRole> is the subtree itself (see below).

    <paragraph|Using commands>The first argument of <scm|tree-widget>, <scm-arg|cmd>, \ is a <scheme> lambda that will be called when items are clicked. The procedure must have the following signature:

    <\scm-code>
      (lambda (Event CommandRole . UserRoles) (...))
    </scm-code>

    where:

    <\itemize-dot>
      <item><scm|Event> is an integer: either 1, 2 or 4 for a single, right or middle click respectively. In the future, other events could be supported (like double clicks, drag&drop, unfold, etc.)

      <item><scm|CommandRole> is either the value of that role if given for the data item, or the subtree itself otherwise.

      <item><scm|UserRoles> is a (possibly empty) list with the data for those roles given in the data role specification.
    </itemize-dot>

    If multiple selections are enabled and one is made, <scm|CommandRole> and <scm|UserRole> will both be lists (not implemented yet). Keep in mind that the data is a <TeXmacs> tree and thus not a copy but always a pointer to the actual data (unless you copy or transform it into another format with e.g. <scm|tree-\<gtr\>stree>)

    <paragraph|Examples>See <scm|widget10> in <verbatim|menu-test.scm> and ‘‘<hlink|Displaying lists and trees|#sec-scheme-gui-lists-trees>''.
  </explain>

  <paragraph|An example using data roles>

  We build on the previous example, but now we add a command. Notice how the way one adds commands to <scm|tree-view> departs from that of other widgets, where instead of a procedure one must provide a list with code expecting one or two arguments with fixed names (usually <scm|answer> and <scm|filter>). <with|font-shape|italic|Note to self>: this is easily changed in <scm|$tree-view>, but it seems easier to manage empty arguments this way.

  <\session|scheme|default>
    <\input|Scheme] >
      (define t

      \ \ (stree-\<gtr\>tree

      \ \ \ '(root

      \ \ \ \ \ (library "Library" "$TEXMACS_PIXMAP_PATH/tm_german.xpm" 01

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ (collection "Cool stuff" 001)

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ (collection "Things to read" 002)

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ (collection "Current work" 003

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (collection "Forever current" 004)

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (collection "Read me" 005))))))
    </input>

    <\input|Scheme] >
      (define dd

      \ \ (stree-\<gtr\>tree

      \ \ \ '(list (library DisplayRole DecorationRole UserRole:1)

      \ \ \ \ \ \ \ \ \ \ (collection DisplayRole UserRole:1))))
    </input>

    <\input|Scheme] >
      (define (action clicked cmd-role . user-roles)

      \ \ (display* "clicked= " clicked ", cmd-role= " cmd-role

      \ \ \ \ \ \ \ \ \ \ \ \ ", user-roles= " user-roles "\\n")))
    </input>

    <\input|Scheme] >
      (tm-widget (widget-library)

      \ \ (resize ("150px" "400px" "9000px") ("300px" "600px" "9000px")

      \ \ \ \ (vertical

      \ \ \ \ \ \ (bold (text "Testing tree-view"))

      \ \ \ \ \ \ ===

      \ \ \ \ \ \ (tree-view action t dd))))
    </input>

    <\input|Scheme] >
      (top-window widget-library "Tree View")
    </input>
  </session>

  Notice how we must add <shell|$TEXMACS_PIXMAP_PATH> to the name of the pixmap because we are not using the default <scm|DecorationRole>.\ 

  <subparagraph|An example using the buffer tree>

  We can even use the <scm|buffer-tree> as argument to <scm|tree-widget>. Changes in the buffer will show up immediately in the widget. In this example we use the default data role specification.

  <\warning>
    As of this writing (31 Dec. 2013) the <name|Qt> implementation is sloppy and forces a full reloading of the data model for each <cpp|modification> of the <cpp|tree>. The slowdown is already noticeable with documents of a few pages like this one. Additionally, the current selection in the widget is lost after each modification to the buffer (fixing this requires writing a fully fledged <cpp|observer> and probably an intermediate copy of the data).
  </warning>

  <\session|scheme|default>
    <\input|Scheme] >
      (tm-widget (widget-buffer)

      \ \ (resize ("150px" "400px" "9000px") ("300px" "600px" "9000px")

      \ \ \ \ (vertical

      \ \ \ \ \ \ (bold (text "Testing tree-view"))

      \ \ \ \ \ \ ===

      \ \ \ \ \ \ (tree-view noop (buffer-tree) (stree-\<gtr\>tree '(dummy))))))
    </input>

    <\input|Scheme] >
      (top-window widget-buffer "Tree View")
    </input>
  </session>

  <subparagraph|An example with the side tools>

  If your <TeXmacs> has the side tools enabled, you can try this:

  <\session|scheme|default>
    <\input|Scheme] >
      (tm-widget (texmacs-side-tools)

      \ \ (vertical

      \ \ \ \ (hlist (glue #t #f 15 0) (text "Document tree:") (glue #t #f 15 0))

      \ \ \ \ ---

      \ \ \ \ (tree-view noop (buffer-tree) (stree-\<gtr\>tree '(unused)))))
    </input>
  </session>

  <section|Dialogs and composite widgets><label|sec-scheme-gui-dialogs>

  <with|font-shape|italic|Dialogs> are collections of widgets arranged in a window in order to perform a common task. You might want to create one of this in order to configure or interact with a plugin: add some configuration options as well as some common actions and have the window always open besides your document. A good example whose code might help is the preferences dialog <scm|(open-preferences)>.

  In order to create more complex layouts than those we did before you'll need a few containers. Among these are <scm|aligned> and <scm|tabs>, which we explain below. A very useful macro which you'll be using often is <scm|dynamic>: it allows you to embed one widget into another.

  Let's see how you create a dialog. To get started here is one little example taken from <verbatim|menu-test.scm>:

  <\session|scheme|default>
    <\unfolded-io|Scheme] >
      (tm-widget (widget1)

      \ \ (centered

      \ \ \ \ (aligned

      \ \ \ \ \ \ (item (text "First:")

      \ \ \ \ \ \ \ \ (toggle (display* "First " answer "\\n") #f))

      \ \ \ \ \ \ (item (text "Second:")

      \ \ \ \ \ \ \ \ (toggle (display* "Second " answer "\\n") #f)))))
    <|unfolded-io>
      \;
    </unfolded-io>
  </session>

  The keyword <scm|centered> is clear, just center whatever it contains, but <scm|aligned> not so much: it builds two column tables, with each row of type <scm|item>. As you can see, each <scm|item> takes two arguments, which can be of <with|font-shape|italic|any> type.

  The <scm|toggle> is another example of a widget which triggers a <scheme> command whenever it's clicked, or toggled in this case. The second argument stands for the default state of the <scm|toggle>.

  Again, in order to display this you create a <scm|top-window> and give it a title.

  <\session|scheme|default>
    <\input|Scheme] >
      (top-window widget1 "Two toggle widgets")
    </input>
  </session>

  You'll notice that the created window is too small and the title is not wholly displayed. You can force it to be of a certain size using <scm|resize>:

  <\session|scheme|default>
    <\unfolded-io|Scheme] >
      (tm-widget (widget1)

      \ \ (centered

      \ \ \ \ (resize "500px" "200px"

      \ \ \ \ \ \ (aligned

      \ \ \ \ \ \ \ \ (item (text "First:")

      \ \ \ \ \ \ \ \ \ \ (toggle (display* "First " answer "\\n") #f))

      \ \ \ \ \ \ \ \ (item (text "Second:")

      \ \ \ \ \ \ \ \ \ \ (toggle (display* "Second " answer "\\n") #f))))))
    <|unfolded-io>
      \;
    </unfolded-io>

    <\input|Scheme] >
      (top-window widget1 "A bigger window")
    </input>
  </session>

  <scm|resize> is another of the several available container or <hlink|content management widgets|#sec-scheme-gui-advanced>. It accepts two sorts of arguments. Either one sets a fixed size for the widget with two strings, as in the example above, or one passes two lists, the first for widths, the second for heights, with the minimum, default and maximum values in that order, like this:\ 

  <scm|(resize ("100px" "200px" "400px") ("100px" "200px" "400px") (some-widget-here))>

  This sets <scm|some-widget-here> to have a default square size of 200x200 pixels.

  If you want to add the usual buttons you use <scm|bottom-buttons> like in the following example. Notice that the widget now accepts one parameter <scm|cmd> which will be called when the user clicks the “Ok” button.

  <\session|scheme|default>
    <\unfolded-io|Scheme] >
      (tm-widget (widget1-buttons cmd)

      \ \ (centered

      \ \ \ \ (aligned

      \ \ \ \ \ \ (item (text "First:")

      \ \ \ \ \ \ \ \ (toggle (display* "First " answer "\\n") #f))

      \ \ \ \ \ \ (item (text "Second:")

      \ \ \ \ \ \ \ \ (toggle (display* "Second " answer "\\n") #f))))

      \ \ (bottom-buttons \<gtr\>\<gtr\> ("Ok" (cmd "Ok"))))
    <|unfolded-io>
      \;
    </unfolded-io>
  </session>

  Since the widget now needs an argument, we must use another function to display it, namely <scm|dialogue-window>, which will also close the window after the button has been clicked.

  <\session|scheme|default>
    <\input|Scheme] >
      (dialogue-window widget1-buttons (lambda (arg) (display* arg "\\n")) "Two toggles")
    </input>
  </session>

  That special <scm|\<gtr\>\<gtr\>> at the end of the widget inserts as before whitespace, but it stretches and aligns the <scm|bottom-buttons> to the right. This is just another example of a <hlink|glue widget|#sec-scheme-gui-advanced>.

  <subsection|Composite widgets>

  Note that our second dialog, <scm|widget1-buttons> is just a copy of <scm|widget1> with an extra line at the end. We could have spared us the keystrokes in this way:

  <\session|scheme|default>
    <\unfolded-io|Scheme] >
      (tm-widget (widget1-buttons-smarter cmd)

      \ \ (dynamic (widget1))

      \ \ (bottom-buttons \<gtr\>\<gtr\> ("Ok" (cmd "Ok"))))
    <|unfolded-io>
      \;
    </unfolded-io>

    <\input|Scheme] >
      (dialogue-window widget1-buttons-smarter (lambda (arg) (display* arg "\\n")) "Two toggles")
    </input>

    \;
  </session>

  As you can see, the approach we've shown has a shortcoming: there's no way to access all the values of the different widgets in your dialog at the same time. Of course you can use the function <scm|cmd> passed to your widget to perform some computations, but in case you need to retrieve or store complicated data, what you need is a form.

  <section|Forms><label|sec-scheme-gui-forms>

  As explained in “<hlink|Dialogs and composite widgets|#sec-scheme-gui-dialogs>” the available widgets can be used to compose dialog windows which perform one simple task. But sometimes one needs to read complex input from the user and forms provide one mechanism to do this. They allow you to define multiple named fields of several types, whose values are stored in a hash table. The contents of this hash can be retrieved when the user clicks a button using the functions <scm|form-fields> and <scm|form-values>.

  In the following example you can see that the syntax is pretty much the same as for regular widgets, but you must prefix the keywords with <scm|form-> :

  <\session|scheme|default>
    <\folded-io|Scheme] >
      (tm-widget (form3 cmd)

      \ \ (resize "500px" "500px"

      \ \ \ \ (padded

      \ \ \ \ \ \ (form "Test"

      \ \ \ \ \ \ \ \ (aligned

      \ \ \ \ \ \ \ \ \ \ (item (text "Input:")

      \ \ \ \ \ \ \ \ \ \ \ \ (form-input "fieldname1" "string" '("one") "1w"))

      \ \ \ \ \ \ \ \ \ \ (item === ===)

      \ \ \ \ \ \ \ \ \ \ (item (text "Enum:")

      \ \ \ \ \ \ \ \ \ \ \ \ (form-enum "fieldname2" '("one" "two" "three") "two" "1w"))

      \ \ \ \ \ \ \ \ \ \ (item === ===)

      \ \ \ \ \ \ \ \ \ \ (item (text "Choice:")

      \ \ \ \ \ \ \ \ \ \ \ \ (form-choice "fieldname3" '("one" "two" "three") "one"))

      \ \ \ \ \ \ \ \ \ \ (item === ===)

      \ \ \ \ \ \ \ \ \ \ (item (text "Choices:")

      \ \ \ \ \ \ \ \ \ \ \ \ (form-choices "fieldname4"\ 

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ '("one" "two" "three")\ 

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ '("one" "two"))))

      \ \ \ \ \ \ \ \ (bottom-buttons

      \ \ \ \ \ \ \ \ \ \ ("Cancel" (cmd "cancel")) \<gtr\>\<gtr\>

      \ \ \ \ \ \ \ \ \ \ ("Ok"

      \ \ \ \ \ \ \ \ \ \ \ (display* (form-fields) " -\<gtr\> " (form-values) "\\n")

      \ \ \ \ \ \ \ \ \ \ \ (cmd "ok")))))))
    <|folded-io>
      \;
    </folded-io>

    <\input|Scheme] >
      (dialogue-window form3 (lambda (x) (display* x "\\n")) "Test of form3")
    </input>
  </session>

  A complete list of the widgets you can embed in a form is in the table <scm|gui-make-table> inside <verbatim|menu-define.scm>.

  <section|Containers, glue, refresh and co.><label|sec-scheme-gui-advanced>

  <subsection|Attribute widgets>

  In what follows <scm-arg|widget> can be anything defined using <scm|tm-widget>.

  <\explain>
    <scm|(centered <scm-arg|widget>)><explain-synopsis|centers <scm-arg|widget>>
  <|explain>
    This does just that: it centers <scm-arg|widget> with respect to the enclosing widget. Although we are calling this an attribute, the effect is achieved by using a vertical list and a horizontal one together with four <scm|glue> widgets. This means that in the following example, the first widget is actually expanded to something like the second one.

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (tm-widget (wid1)

        \ \ (centered (text "I'm centered.")))
      <|unfolded-io>
        ((guile-user) (guile-user))
      </unfolded-io>

      <\folded-io|Scheme] >
        (tm-widget (wid2)

        \ \ (vlist

        \ \ \ \ (glue #f #f 0 10)

        \ \ \ \ (hlist

        \ \ \ \ \ \ (glue #t #f 25 0)

        \ \ \ \ \ \ (text "I'm centered.")

        \ \ \ \ \ \ (glue #t #f 25 0))

        \ \ \ \ (glue #f #f 0 10)))
      <|folded-io>
        ((guile-user) (guile-user))
      </folded-io>

      <\input|Scheme] >
        (show wid1)
      </input>

      <\input|Scheme] >
        (show wid2)
      </input>
    </session>
  </explain>

  <\explain>
    <scm|(resize (<scm-arg|w1> <scm-arg|w2> <scm-arg|w3>) (<scm-arg|h1> <scm-arg|h2> <scm-arg|h3>) <scm-arg|wid>)>

    <scm|(resize <scm-arg|w> <scm-arg|h> <scm-arg|widget>)><explain-synopsis|resizes <scm-arg|widget>>
  <|explain>
    These two variants resize the argument. The first one specifies a minimum size of <scm-arg|w1><math|\<times\>><scm-arg|h1>, a default size of <scm-arg|w2><math|\<times\>><scm-arg|h2> and a maximum size of <scm-arg|w3><math|\<times\>><scm-arg|h3>. <scm-arg|widget> will be set to the default size and will be allowed to resize but not beyond the bounds specified. The second alternative sets a fixed width and height.

    Sizes are specified as strings with a unit suffix, like in <scm|"150px">.

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (tm-widget (wid)

        \ \ (resize "200px" "70px" (text "I'm stuck!")))
      <|unfolded-io>
        \;
      </unfolded-io>

      <\input|Scheme] >
        (show wid)
      </input>
    </session>
  </explain>

  <\explain>
    <scm|(padded <scm-arg|widget>)><explain-synopsis|surrounds <scm-arg|widget> by padding>
  <|explain>
    This sets some fixed padding around <scm-arg|widget>. As in the case of <scm|centered>, the effect is achieved by means of several widgets into which this macro expands. These are actually the same as in the example there, but the <scm|glue> widgets are all fixed (i.e. have all their expansion parameters set to <scm|#f>).
  </explain>

  <subsection|Container or layout widgets>

  You can arrange widgets horizontally or vertically, or in two column mode as in forms. When running the QT version the latter will default to the OS standard for arranging labels and their associated input widgets in dialogs. Other possibilities are splitters and tabbed widgets. A very useful macro is <scm|dynamic>, which allows you to embed one widget into another.

  <\explain>
    <scm|(aligned <scm-arg|items-list>)><explain-synopsis|arranges items in a two column table>
  <|explain>
    \;
  </explain>

  <\explain>
    <scm|(hlist <scm-arg|widgets>)> <explain-synopsis|arranges items horizontally>
  <|explain>
    \;
  </explain>

  <\explain>
    <scm|(vlist <scm-arg|widgets>)><explain-synopsis|arranges items vertically>
  <|explain>
    \;
  </explain>

  <\explain>
    <scm|(hsplit (item (<scm-arg|widget>)) (item (<scm-arg|widget>)) ...)><explain-synopsis|arranges two items in a split panel>
  <|explain>
    \;
  </explain>

  <\explain>
    <scm|(tabs (tab (<scm-arg|widget>)) (tab (<scm-arg|widget>)) ...)><explain-synopsis|a tabbed widget>
  <|explain>
    \;
  </explain>

  <\explain>
    <scm|(dynamic (<scm-arg|widget>))><explain-synopsis|embeds a tm-widget into another one>
  <|explain>
    \;
  </explain>

  <subsection|Glue widgets>

  Besides laying out widgets in containers, you will often want to specify how they eat up space around them when the user resizes the window. By default (most?) widgets take up as much space as they can (i.e. they always expand) unless you used <scm|resize> with them or they can have their size set with a parameter. If you don't want this to happen you can place invisible spacers around them which will (if you tell them to) gobble up as much as they can, either vertically or horizontally or in both directions.

  <TeXmacs> provides one such basic building block:

  <\explain>
    <scm|(glue <scm-arg|horiz> <scm-arg|vert> <scm-arg|width> <scm-arg|height>)><explain-synopsis|possibly expanding whitespace>
  <|explain>
    The first two parameters, <scm-arg|horiz> and <scm-arg|vert>, are of boolean type and specify whether the <scm|glue> widget will try to expand horizontally or vertically when its surroundings do. The last two parameters, <scm-arg|width> <scm-arg|height>, either fix the size for non-expanding <scm|glue> or set a minimum one.

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (tm-widget (wid1)

        \ \ (centered (text "I'm centered.")))
      <|unfolded-io>
        \;
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (tm-widget (wid2)

        \ \ (vlist

        \ \ \ \ ===

        \ \ \ \ (hlist

        \ \ \ \ \ \ (glue #t #f 25 0)

        \ \ \ \ \ \ (text "I'm centered.")

        \ \ \ \ \ \ (glue #t #f 25 0))

        \ \ \ \ (glue #f #f 0 10)))
      <|unfolded-io>
        \;
      </unfolded-io>

      <\input|Scheme] >
        (show wid1)
      </input>

      <\input|Scheme] >
        (show wid2)
      </input>
    </session>
  </explain>

  In addition to the basic <scm|glue> widget, there are several convenience macros.

  <\explain>
    <scm|===><explain-synopsis|vertical separator>
  <|explain>
    Expands to <scm|(glue #f #f 0 5)>.
  </explain>

  <\explain>
    <scm|======><explain-synopsis|big vertical separator>
  <|explain>
    Expands to <scm|(glue #f #f 0 15)>.
  </explain>

  <\explain>
    <scm|//><explain-synopsis|horizontal separator>
  <|explain>
    Expands to <scm|(glue #f #f 5 0)>.
  </explain>

  <\explain>
    <scm|///><explain-synopsis|big horizontal separator>
  <|explain>
    Expands to <scm|(glue #f #f 15 0)>.
  </explain>

  <\explain>
    <scm|\<gtr\>\<gtr\>><explain-synopsis|expanding horizontal separator>
  <|explain>
    Expands to <scm|(glue #t #f 5 0)>.
  </explain>

  <\explain>
    <scm|\<gtr\>\<gtr\>\<gtr\>><explain-synopsis|big expanding horizontal separator>
  <|explain>
    Expands to <scm|(glue #t #f 15 0)>.
  </explain>

  For the specific use in menus the following two macros are defined:

  <\explain>
    <scm|\|><explain-synopsis|horizontal separator>
  <|explain>
    (A vertical bar)
  </explain>

  <\explain>
    <scm|---><explain-synopsis|vertical separator>
  <|explain>
    (Three dashes)
  </explain>

  <subsection|Refresh widgets>

  Refresh widgets redraw their contents every time a command is executed. They achieve this re-evaluating the code for the whole widget, so you can have new values in your variables...

  <section|Widgets reference guide><label|sec-scheme-gui-reference>

  This should be a comprehensive list of all the widgets available to the user, following this schema:

  <\explain>
    <scm|some-symbol><explain-synopsis|Some synopsis>
  <|explain>
    Some explanation.
  </explain>

  An excerpt from <verbatim|progs/kernel/gui/menu-define.scm>, as of SVN revision 5238:

  <\scm>
    (define-table gui-make-table

    \ \ (eval ,gui-make-eval)

    \ \ (dynamic ,gui-make-dynamic)

    \ \ (former ,gui-make-former)

    \ \ (link ,gui-make-link)

    \ \ (let ,gui-make-let)

    \ \ (let* ,gui-make-let)

    \ \ (with ,gui-make-with)

    \ \ (receive ,gui-make-with)

    \ \ (for ,gui-make-for)

    \ \ (cond ,gui-make-cond)

    \ \ (refresh ,gui-make-refresh)

    \ \ (group ,gui-make-group)

    \ \ (text ,gui-make-text)

    \ \ (glue ,gui-make-glue)

    \ \ (color ,gui-make-color)

    \ \ (texmacs-output ,gui-make-texmacs-output)

    \ \ (texmacs-input ,gui-make-texmacs-input)

    \ \ (input ,gui-make-input)

    \ \ (enum ,gui-make-enum)

    \ \ (choice ,gui-make-choice)

    \ \ (choices ,gui-make-choices)

    \ \ (toggle ,gui-make-toggle)

    \ \ (icon ,gui-make-icon)

    \ \ (concat ,gui-make-concat)

    \ \ (verbatim ,gui-make-verbatim)

    \ \ (check ,gui-make-check)

    \ \ (balloon ,gui-make-balloon)

    \ \ (-\<gtr\> ,gui-make-submenu)

    \ \ (=\<gtr\> ,gui-make-top-submenu)

    \ \ (horizontal ,gui-make-horizontal)

    \ \ (vertical ,gui-make-vertical)

    \ \ (hlist ,gui-make-hlist)

    \ \ (vlist ,gui-make-vlist)

    \ \ (aligned ,gui-make-aligned)

    \ \ (item ,gui-make-item)

    \ \ (meti ,gui-make-meti)

    \ \ (tabs ,gui-make-tabs)

    \ \ (tab ,gui-make-tab)

    \ \ (inert ,gui-make-inert)

    \ \ (explicit-buttons ,gui-make-explicit-buttons)

    \ \ (bold ,gui-make-bold)

    \ \ (tile ,gui-make-tile)

    \ \ (scrollable ,gui-make-scrollable)

    \ \ (resize ,gui-make-resize)

    \ \ (hsplit ,gui-make-hsplit)

    \ \ (vsplit ,gui-make-vsplit)

    \ \ (minibar ,gui-make-minibar)

    \ \ (extend ,gui-make-extend)

    \ \ (padded ,gui-make-padded)

    \ \ (centered ,gui-make-centered)

    \ \ (bottom-buttons ,gui-make-bottom-buttons)

    \ \ (assuming ,gui-make-assuming)

    \ \ (if ,gui-make-if)

    \ \ (when ,gui-make-when)

    \ \ (mini ,gui-make-mini)

    \ \ (symbol ,gui-make-symbol)

    \ \ (promise ,gui-make-promise)

    \ \ (ink ,gui-make-ink)

    \ \ (form ,gui-make-form)

    \ \ (form-input ,gui-make-form-input)

    \ \ (form-enum ,gui-make-form-enum)

    \ \ (form-choice ,gui-make-form-choice)

    \ \ (form-choices ,gui-make-form-choices))

    \;

    (tm-define (gui-make x)

    \ \ ;;(display* "x= " x "\\n")

    \ \ (cond ((symbol? x)

    \ \ \ \ \ \ \ \ \ (cond ((== x '---) '$---)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((== x '===) (gui-make '(glue #f #f 0 5)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((== x '======) (gui-make '(glue #f #f 0 15)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((== x '/) '$/)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((== x '//) (gui-make '(glue #f #f 5 0)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((== x '///) (gui-make '(glue #f #f 15 0)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((== x '\<gtr\>\<gtr\>) (gui-make '(glue #t #f 5 0)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((== x '\<gtr\>\<gtr\>\<gtr\>) (gui-make '(glue #t #f 15 0)))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ((== x (string-\<gtr\>symbol "\|")) '$/)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (else

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (texmacs-error "gui-make" "invalid menu item ~S" x))))

    \ \ \ \ \ \ \ \ ((string? x) x)

    \ \ \ \ \ \ \ \ ((and (pair? x) (ahash-ref gui-make-table (car x)))

    \ \ \ \ \ \ \ \ \ (apply (car (ahash-ref gui-make-table (car x))) (list x)))

    \ \ \ \ \ \ \ \ ((and (pair? x) (or (string? (car x)) (pair? (car x))))

    \ \ \ \ \ \ \ \ \ `($\<gtr\> ,(gui-make (car x)) ,@(cdr x)))

    \ \ \ \ \ \ \ \ (else

    \ \ \ \ \ \ \ \ \ \ (texmacs-error "gui-make" "invalid menu item ~S" x))))
  </scm>

  \;

  <chapter|Writing <TeXmacs> bibliography styles><label|sec-bibliography>

  <section|Introduction>

  <TeXmacs> admits support both for <BibTeX> and a native tool for managing bibliographies. <BibTeX> styles are denoted by their usual names. <TeXmacs> styles are prefixed by <verbatim|tm->. For example, the <TeXmacs> <verbatim|<rigid|tm-plain>> style is the replacement for the <BibTeX> <verbatim|plain> style. Equivalents for the following <BibTeX> styles have been implemented: <verbatim|abbrv>, <verbatim|alpha>, <verbatim|ieeetr>, <verbatim|plain> et <verbatim|siam>. These styles can therefore be used without installation of <BibTeX>.

  New bibliography styles can be defined by the user. Each style is associated to a<nbsp>unique <scheme> file, which should be added to the directory <verbatim|$TEXMACS_PATH/prog/bibtex>. Style files are treated as regular Scheme programs. Since the creation of a style file from scratch is a complex task, we recommend you customize existing style files or modules. In the next sections, we will describe the creation of a new style on a simple example and give a detailed lists of available <scheme> functions which facilitate the creation of new styles.

  <section|Example of a simple bibliography style>

  Bibliographic style files are stored in directory <verbatim|$TEXMACS_PATH/progs/bibtex>. They have the name of the style followed with extension <verbatim|.scm>. For example, <verbatim|example.scm> is the file name associated to the style <verbatim|example>, which is denoted by <verbatim|tm-example> when it is used in a <TeXmacs> document.

  All style files must be declared as a module as follows:

  <\scm-code>
    (texmacs-module (bibtex example)

    \ \ (:use (bibtex bib-utils)))
  </scm-code>

  The module <verbatim|bib-utils> contains all useful functions needed to write bibliographic styles.

  All style files must me declared as a bibliographic style as follows:

  <scm-code|(bib-define-style "example" "plain")>

  The first argument to <scm|bib-define-style> is the name of the current style. The second argument is the name of a fall-back style, <verbatim|plain> in our case. If a function is not defined in current style, the function from the fall-back style is used instead. Hence, the following minimalistic style file behaves in an identical way as the <verbatim|plain> style:

  <\scm-code>
    (texmacs-module (bibtex example)

    \ \ (:use (bibtex bib-utils)))

    \;

    (bib-define-style "example" "plain")
  </scm-code>

  Each formatting function defined in the default style can be overloaded in the current style. For example, the function <scm|bib-format-date> is used to format the date in the <verbatim|plain> style. It is redefinable in our example style as follows:

  <\scm-code>
    (tm-define (bib-format-date e)

    \ \ (:mode bib-example?)

    \ \ (bib-format-field e "year"))
  </scm-code>

  All exported functions must be prefixed with <verbatim|bib->. Overloaded functions must be followed with directive <scm|(:mode bib-example?)>, in which <verbatim|example> is the name of the current style.

  Our complete example file <verbatim|example.scm> is as follows:

  <\scm-code>
    (texmacs-module (bibtex example)

    \ \ (:use (bibtex bib-utils)))

    \;

    (bib-define-style "example" "plain")

    \;

    (tm-define (bib-format-date e)

    \ \ (:mode bib-example?)

    \ \ (bib-format-field e "year"))
  </scm-code>

  It behaves in a similar way as the <verbatim|plain> style, except that all dates are formatted according to our custom routine.

  <section|<scheme> functions for writing bibliography styles>

  <subsection|Style management>

  <\explain>
    <scm|(bib-define-style name default)><explain-synopsis|style declaration>
  <|explain>
    This function declares a style called <scm|name> (string) with fall-back style <scm|default> (string). The style is selected by choosing <verbatim|tm-><scm|name> when adding a bibliography to a document. Whenever a<nbsp>formatting function is not defined in the current style, its definition in the fall-back style is used as replacement.
  </explain>

  <\explain>
    <scm|(bib-with-style style expr)><explain-synopsis|local style>
  <|explain>
    This function evaluates expression <scm|expr> as if the current style were <scm|style> (string).
  </explain>

  <subsection|Field related routines>

  <\explain>
    <scm|(bib-field entry field)><explain-synopsis|field data>
  <|explain>
    This function creates a <TeXmacs> tree corresponding to the field <scm|field> (string) of entry <scm|entry> without format. In some cases, the output is special:

    <\itemize-dot>
      <item>If <scm|field> is <scm|"author"> or <scm|"editor">, we return a tree with label <verbatim|bib-names> followed by a list of author names; each author name is a tree with label <verbatim|bib-name> containing four elements: first name, particule (von), last name and suffix (jr);

      <item>If <scm|field> is <scm|"page">, then we return a list of integers: the empty list, or a singleton with a page number, or a pair corresponding to a pages interval.
    </itemize-dot>
  </explain>

  <\explain>
    <scm|(bib-format-field entry field)><explain-synopsis|basic format>
  <|explain>
    This function creates a <TeXmacs> tree corresponding to the field <scm|field> (string) of entry <scm|entry>, with basic format.
  </explain>

  <\explain>
    <scm|(bib-format-field-Locase entry field)><explain-synopsis|special format>
  <|explain>
    This function is similar to <scm|bib-format-field> ; but field are formatted in lower case with an upper case letter at the beginning.
  </explain>

  <\explain>
    <scm|(bib-empty? entry field)><explain-synopsis|null-test of a field>
  <|explain>
    This function returns boolean <scm|#t> if the field <scm|field> (string) of entry <scm|entry> is empty or absent; it returns <scm|#f> in the other cases.
  </explain>

  <subsection|Routines for structuring the output>

  <\explain>
    <scm|(bib-new-block tm)><explain-synopsis|new block>
  <|explain>
    This function creates a<TeXmacs> tree consisting of a block containing <TeXmacs> tree <scm|tm>.
  </explain>

  <\explain>
    <scm|(bib-new-list sep ltm)><explain-synopsis|separated list>
  <|explain>
    This function creates a <TeXmacs> tree which is the concatenation of all the elements of list <scm|ltm> separated with <TeXmacs> tree <scm|sep>.
  </explain>

  <\explain>
    <scm|(bib-new-list-spc ltm)><explain-synopsis|blank separated list>
  <|explain>
    This function is equivalent to the evaluation of <scm|(bib-new-list " " ltm)>.
  </explain>

  <\explain>
    <scm|(bib-new-sentence ltm)><explain-synopsis|new sentence>
  <|explain>
    This function creates a <TeXmacs> tree corresponding to a sentence containing all the elements of list <scm|ltm> separated by commas.
  </explain>

  <subsection|Routines for textual manipulations>

  <\explain>
    <scm|(bib-abbreviate name dot spc)><explain-synopsis|name abbreviation>
  <|explain>
    This function creates a <TeXmacs> tree corresponding to the abbreviation of the name contained in <scm|name> <TeXmacs> tree: it retrieves the list of first letters of each word, followed by <scm|dot> (<TeXmacs> tree) and separated by <scm|spc> (<TeXmacs> tree).
  </explain>

  <\explain>
    <scm|(bib-add-period tm)><explain-synopsis|dot>
  <|explain>
    This function creates a <TeXmacs> tree with a dot at the end of <scm|tm>.
  </explain>

  <\explain>
    <scm|(bib-default tm)><explain-synopsis|default <TeXmacs> tree>
  <|explain>
    This function creates a <TeXmacs> tree without label <verbatim|keep-case>.
  </explain>

  <\explain>
    <scm|(bib-emphasize tm)><explain-synopsis|italic>
  <|explain>
    This function creates a <TeXmacs> tree corresponding to the italic version of <scm|tm>.
  </explain>

  <\explain>
    <scm|(bib-locase tm)><explain-synopsis|lower case>
  <|explain>
    This function creates a <TeXmacs> tree, which is equal to <scm|tm> with all letters in lower case, except for those within <verbatim|keep-case> blocks.
  </explain>

  <\explain>
    <scm|(bib-prefix tm nbcar)><explain-synopsis|beginning of a <TeXmacs> tree>
  <|explain>
    This function returns a string containing the first <scm|nbcar> characters of <scm|tm>.
  </explain>

  <\explain>
    <scm|(bib-upcase tm)><explain-synopsis|upper case>
  <|explain>
    This function creates a <TeXmacs> tree, which is equal to <scm|tm> with all letters in upper case, except for those within <verbatim|keep-case> blocks.
  </explain>

  <\explain>
    <scm|(bib-upcase-first tm)><explain-synopsis|upper case first letter>
  <|explain>
    This function creates a <TeXmacs> tree, which is equal to <scm|tm> with its first letter in upper case, except inside <verbatim|keep-case> blocks.
  </explain>

  <subsection|Miscellaneous routines>

  <\explain>
    <scm|(bib-null? v)><explain-synopsis|null-test>
  <|explain>
    This function returns boolean <scm|#t> if value <scm|v> is empty; it returns <scm|#f> in the other cases.
  </explain>

  <\explain>
    <scm|(bib-purify tm)><explain-synopsis|flattening of a <TeXmacs> tree>
  <|explain>
    This function returns a string made of all letters of the <TeXmacs> tree <scm|tm>.
  </explain>

  <\explain>
    <scm|(bib-simplify tm)><explain-synopsis|simplification of a <TeXmacs> tree>
  <|explain>
    This function returns a <TeXmacs> tree corresponding to the simplification of <TeXmacs> tree <scm|tm>.
  </explain>

  <\explain>
    <scm|(bib-text-length tm)><explain-synopsis|length of a <TeXmacs> tree>
  <|explain>
    This function returns the length of <TeXmacs> tree <scm|tm>.
  </explain>

  <\explain>
    <scm|(bib-translate msg)><explain-synopsis|translation>
  <|explain>
    This function translates the string message <scm|msg> from english into the current language.
  </explain>

  <chapter|About the API documentation><label|sec-api>

  Documentation for <TeXmacs> internal features and API is typically written as part of the general documentation, where it's most natural for someone reading the manual as a book. However it often happens that some <scheme> module or procedure needs documenting but doesn't fit into any of the available sections of the manual. The purpose of this section is precisely to assemble all those pieces of information. Currently (jan. 2016) there are very sketchy pages for:

  <section|The <TeXmacs> file system><label|sec-tmfs>

  The <TeXmacs> file system is a complicated beast, with versioning, network access and authentication built in among other things. This documentation should be completed with all those features, but in the meantime, we have the following:

  <subsection|A <verbatim|tmfs> primer><label|sec-tmfs-basics>

  <subsection|The <TeXmacs> filesystem>

  Many things in <TeXmacs> can be referenced through a <abbr|URI> with <verbatim|tmfs> as schema. Examples of entities in this system are buffers, views and windows or at a higher level help buffers and search results. A <TeXmacs> <abbr|URI> follows the format:

  <center|<verbatim|tmfs://handler[/query]>>

  Requests to open <abbr|URI>s such as these are sent to a <em|handler>, which actually is a set of procedures implementing the basic operations related to the type of content they handle: loading the content, saving it (if possible or necessary), setting the window title and establishing access permissions are the basic operations. Predefined handlers which the user usually encounters are <verbatim|grep>, <verbatim|help>, <verbatim|history>, <verbatim|revision> and <verbatim|apidoc>: they accept a query representing search strings, files or help pages and render results in the appropriate language into a new buffer. The <em|query> is a string in the usual format <tt|variable1=value1&variable2=value2>. Its parsing can be done using <scm|query-ref>.

  Situations where using this system makes more sense than regular documents are for instance documentation, which must be chosen from several languages and possibly be compiled on the fly from various sources (see module <verbatim|doc.apidoc> and related modules) and automatically generated content, like that resulting from interacting from an external system for version control of documents (see handler <tt|version> in module <verbatim|version.version-tmfs>).

  <subsection|Implementing a handler>

  The definition of a handler is done via <scm|tmfs-handler> or with the convenience macros <scm|tmfs-load-handler>, <scm|tmfs-save-handler>, <scm|tmfs-permission-handler> and <scm|tmfs-title-handler>.

  Below we'll implement a basic load handler named <tt|simple> which will accept two sorts of arguments: <scm|type> and <scm|what>. We shall use two procedures, one to handle the requests, another to create the document.

  <\session|scheme|default>
    <\folded-io|Scheme] >
      (tm-define (simple-load header body)

      \ \ ‘(document

      \ \ \ \ \ (TeXmacs ,(texmacs-version))

      \ \ \ \ \ (style (tuple "generic"))

      \ \ \ \ \ (body (document (section ,header) ,body))))
    <|folded-io>
      \;
    </folded-io>
  </session>

  As you can see, we don't do much other than creating a <TeXmacs> document. The load handler won't be complicated either. We only parse the query string with the help of <scm|query-ref> and then display one of three possible buffers.

  <\session|scheme|default>
    <\folded-io|Scheme] >
      (tmfs-load-handler (simple qry)

      \ \ (let ((type (query-ref qry "type"))

      \ \ \ \ \ \ \ \ (what (query-ref qry "what")))

      \ \ \ \ (tm-\<gtr\>stree

      \ \ \ \ \ \ (cond ((== type "very") (simple-load "Very simple" what))

      \ \ \ \ \ \ \ \ \ \ \ \ ((== type "totally") (simple-load "Totally simple" what))

      \ \ \ \ \ \ \ \ \ \ \ \ (else (simple-load "Error"

      \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (string-append "Query unknown: " what)))))))
    <|folded-io>
      \;
    </folded-io>
  </session>

  We can test this right away with:

  <\session|scheme|default>
    <\input>
      Scheme]\ 
    <|input>
      (load-buffer "tmfs://simple/type=very&what=example")
    </input>
  </session>

  Or embedded in a document using tags like <markup|hlink> and <markup|branch>: click here to test it.

  You can set read/write permissions implementing a <em|permission handler>, and the window's title using a <em|title handler>:

  <\session|scheme|default>
    <\folded-io|Scheme] >
      (tmfs-permission-handler (simple name type)\ 

      \ \ (display* "Name= " name "\\nType= " type "\\n")

      \ \ #t)
    <|folded-io>
      \;
    </folded-io>

    <\folded-io|Scheme] >
      (tmfs-title-handler (simple qry doc) "Simple handler - Some title here")
    <|folded-io>
      \;
    </folded-io>
  </session>

  <\explain>
    <scm|(tmfs-load-handler (<scm-arg|name> <scm-arg|qry>) <scm-arg|body>)><explain-synopsis|define load handler for @name>
  <|explain>
    A <em|load handler> for <scm-arg|name> is invoked when <TeXmacs> receives a request to open a <abbr|URI> of type <verbatim|tmfs://<scm-arg|name>/<scm-arg|qry>>. The <scm-arg|body> of the handler is passed <verbatim|qry> as parameter (see <scm|query-ref>) and must return a complete <TeXmacs> buffer. Consider the following example:

    <\scm-code>
      (tmfs-load-handler (id qry)

      \ \ ‘(document

      \ \ \ \ \ (TeXmacs ,(texmacs-version))

      \ \ \ \ \ (style (tuple "generic"))

      \ \ \ \ \ (body (document ,qry))))
    </scm-code>

    This will open <abbr|URI>s with the format <verbatim|tmfs://id/whatever_arguments>.

    Creation of the buffer contents may be simplified using the procedures defined in module <verbatim|kernel.gui.gui-markup>.
  </explain>

  <\explain>
    <scm|(tmfs-save-handler (<scm-arg|name> <scm-arg|qry> <scm-arg|doc>) <scm-arg|body>)><explain-synopsis|define save handler for <scm-arg|name>>
  </explain|A <em|save handler> is invoked when the user tries to save a buffer of type <verbatim|tmfs://<scm-arg|name>/...> See also <scm|tmfs-load-handler> and others.>

  <\explain>
    <scm|(tmfs-title-handler (<scm-arg|name> <scm-arg|qry> <scm-arg|doc>) <scm-arg|body>)><explain-synopsis|define title handler <scm-arg|name>>
  </explain|A <em|title handler> is invoked to build the title for a window displaying a buffer of type <verbatim|tmfs://<scm-arg|name>/...> It is expected to return a simple string in the right language for the user.>

  <\explain>
    <scm|(tmfs-permission-handler (<scm-arg|name> <scm-arg|qry> <scm-arg|kind>) <scm-arg|body>)><explain-synopsis|define master handler <scm-arg|name>>
  </explain|A <em|permissions handler> decides whether the buffer corresponding to the query made to the handler may be loaded/saved, etc. <scm-arg|kind> may take one of the values <scm|"load">, (...)>

  <\explain>
    <scm|(tmfs-master-handler (<scm-arg|name> <scm-arg|qry> <scm-arg|doc>) <scm-arg|body>)><explain-synopsis|define title handler <scm-arg|name>>
  </explain|A <em|master handler> is... (possibly related to the concept of master document in a project, but this needs checking)>

  <\explain>
    <scm|(query-ref <scm-arg|qry> <scm-arg|arg>)><explain-synopsis|return value of parameter <scm-arg|arg> in query <scm-arg|qry>>
  </explain|Given a <scm-arg|qry> string of type <tt|variable1=value1&variable2=value2>, <scm|query-ref> will return <tt|value1> for an <scm-arg|arg> value of <scm|value1>, etc.>

  <subsection|Installing the handler>

  In order to make your handler available from any menu item or document upon startup, you must add it to the initialization process, that is to <verbatim|init-texmacs.scm> or <verbatim|my-init-texmacs.scm>, using the macro <scm|lazy-tmfs-handler>. This will delay loading of your code either until it is required or <TeXmacs> is idle waiting for user input.

  <\remark>
    \ The keywords <tt|buffer>, <tt|view> and <tt|window> may not be used as names for handlers since they are used internally by <TeXmacs>.
  </remark>

  <\explain>
    <scm|(lazy-tmfs-handler <scm-arg|module> <scm-arg|handler>)><explain-synopsis|lazily install a <verbatim|tmfs> handler>
  <|explain>
    Inform <TeXmacs> that <scm-arg|handler> is available in module <scm-arg|module>. <scm-arg|module> must be a list of symbols (like <scm|(kernel gui gui-markup)>) representing the <scheme> module where you'll have defined your handler using <scm|tmfs-handler> or with the convenience macros <scm|tmfs-load-handler>, <scm|tmfs-save-handler>, <scm|tmfs-permission-handler> and <scm|tmfs-title-handler>.
  </explain>

  <section|The URL system><label|sec-url>

  <TeXmacs> uses a tree representation for urls. This allows us to generalize the concept of an url and allow paths and patterns to be regarded as urls too. There are three main types of urls:

  <\itemize-dot>
    <item>rootless urls, like a/b/c. These urls are mainly used in computations. For example, they can be appended to another url.

    <item>Standard rooted urls, like file:///usr or https://www.texmacs.org. These are the same as those used on the web.

    <item>System urls, characterized by a "default" root. These urls are similar to standard rooted urls, but they behave in a slightly different way with respect to concatenation. For instance https://www.texmacs.org/Web * file:///tmp would yield file:///tmp, where as https://www.texmacs.org/Web /tmp yields https://www.texmacs.org/tmp
  </itemize-dot>

  There are several formats for parsing (and printing) urls:

  <\itemize-dot>
    <item>System format: the usual format on your operating system. On unix systems "/usr/bin:/usr/local/bin" would be a valid url representing a path and on windows systems "c:\\windows;c:\\TeXmacs" would be OK.

    <item>Unix format: this format forces unix-like notation even for other systems like Windows. This is convenient for url's in the source code. Unix environment variables like ~ and $TEXMACS_PATH can also be part of the url.

    <item>Standard format: the format which is used on the web. Notice that ftp://www.texmacs.org/pub and ftp://www.texmacs.org/pub/ represent different urls. The second one is represented by concating on the right with an empty name.
  </itemize-dot>

  When an explicit operation on urls need to be performed, like reading a file, the url is first "resolved" into a single url with a unique name (modulo symbolic links) for the resource (first match). Next, the url is "concretized" as a system-specific file name which is understood by the operating system. Note that for remote urls this may involve downloading a file. Concretized urls should be used quickly and not memorized, since such names may be the names of temporary files, which can be destroyed afterwards.

  <subsection|Navigation>

  <\explain>
    <scm|(go-to-url <scm-arg|u> . <scm-arg|opt-from>)><explain-synopsis|Jump to the url @u>
  <|explain>
    Opens a new buffer with the contents of the resource at <scm-arg|u>. This can be either a full <abbr|URL> or a file path, absolute or relative to the current <scm|buffer-master>. Both types of argument accept parameters. The second, optional argument, is an optional path for the cursor history.

    You can pass parameters in <scm-arg|u> in two ways: appending a hash <tt|#> and some text, like in <verbatim|some/path/some-file.tm#blah> will open the file and jump to the first label of name <tt|blah> found, if any. The other possibility is the usual way in the web: append a question mark <tt|?> followed by pairs <tt|parameter=value>. Currently the parameters <tt|line>, <tt|column> and <tt|select>, which respectively jump to the chosen location and select the given text at that line, are supported by default for any file of format <scm|generic-file>. (see <scm|define-format>).
  </explain>

  <subsection|Predicates>

  <\explain>
    <scm|(url-concat? <scm-arg|u>)><explain-synopsis|Returns #t if @u contains multiple subdirs>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-concat? "a/b")
      <|unfolded-io>
        #t
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (url-concat? "file.ext")
      <|unfolded-io>
        #f
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-or? <scm-arg|u>)><explain-synopsis|#t if the url contains an alternative>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-or? "a/b:c")
      <|unfolded-io>
        #t
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (url-expand )
      <|unfolded-io>
        \<less\>url a/b:c\<gtr\>
      </unfolded-io>

      <\input|Scheme] >
        \;
      </input>
    </session>
  </explain>

  <\explain>
    <scm|(url-rooted? <scm-arg|u>)><explain-synopsis|Test whether @u is absolute>
  <|explain>
    Return <scm|#t> if the url is absolute. Absolute urls may be for instance full paths in the file system or internet <abbr|URL>s starting with a protocol specification like <verbatim|ftp> or <verbatim|http>. The <verbatim|tmfs> urls are also understood to be rooted. See also <scm|url-rooted-tmfs?>, <scm|url-rooted-web?> and <scm|url-rooted-protocol?>.
  </explain>

  <\explain>
    <scm|(url-descends? <scm-arg|u1> <scm-arg|u2>)><explain-synopsis|Test whether @u1 is a parent for @u2 ?>
  <|explain>
    \;
  </explain>

  <\explain>
    <scm|(url-regular? <scm-arg|u>)><explain-synopsis|Test whether the url refers to regular file>
  <|explain>
    Applies only to filesystem urls. Returns <scm|#t> if the url is a regular file, <scm|#f> otherwise. See also <scm|url-directory?> and <scm|url-link?>.

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-regular? "$TEXMACS_PATH/LICENSE")
      <|unfolded-io>
        #t
      </unfolded-io>

      <\input|Scheme] >
        \;
      </input>
    </session>
  </explain>

  <\explain>
    <scm|(url-directory? <scm-arg|u>)><explain-synopsis|Test whether the url refers to a directory>
  <|explain>
    Applies only to filesystem urls. Returns <scm|#t> if the url is a directory and it exists, <scm|#f> otherwise.

    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-directory? "/tmp")
      <|unfolded-io>
        #t
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (url-directory? "/tmp_not_exist")
      <|unfolded-io>
        #f
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (url-directory? "$TEXMACS_PATH/LICENSE")
      <|unfolded-io>
        #f
      </unfolded-io>

      <\input|Scheme] >
        \;
      </input>
    </session>
  </explain>

  <\explain>
    <scm|(url-link? <scm-arg|u>)><explain-synopsis|Test whether the url refers to a symbolic link>
  <|explain>
    Applies only to filesystem urls. Returns <scm|#t> if the url is a symbolic link, <scm|#f> otherwise.
  </explain>

  <subsection|Operations>

  <\explain>
    <scm|(url-head <scm-arg|u>)><explain-synopsis|Return the directory part of @u>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-head "/tmp")
      <|unfolded-io>
        \<less\>url /\<gtr\>
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (url-head "/tmp/a.out")
      <|unfolded-io>
        \<less\>url /tmp\<gtr\>
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-tail <scm-arg|u>)><explain-synopsis|Return the file name without path of @u>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-tail "/tmp")
      <|unfolded-io>
        \<less\>url tmp\<gtr\>
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (url-tail "/tmp/hello.tm")
      <|unfolded-io>
        \<less\>url hello.tm\<gtr\>
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-suffix <scm-arg|u>)><explain-synopsis|Returns the suffix (extension) of @u>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-suffix "/tmp/hello.tm")
      <|unfolded-io>
        "tm"
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-basename <scm-arg|u>)><explain-synopsis|Return the basename as string for @u>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-basename "/tmp")
      <|unfolded-io>
        "tmp"
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (url-basename "/tmp/hello.tm")
      <|unfolded-io>
        "hello"
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-glue <scm-arg|u> <scm-arg|s>)><explain-synopsis|Returns \ @u with suffix @s appended>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-glue (url-basename (current-buffer)) ".new")
      <|unfolded-io>
        \<less\>url url.en.new\<gtr\>
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-unglue <scm-arg|u> <scm-arg|n>)><explain-synopsis|Removes @n characters from the suffix of @u>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-unglue (current-buffer) 3) ;output edited
      <|unfolded-io>
        \<less\>url (...)/src/TeXmacs/doc/devel/scheme/api/url.en\<gtr\>
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-relative <scm-arg|base> <scm-arg|u>)><explain-synopsis|Prepends the head of \ @base to @u>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-relative "/a/b/c.tm" "d.tm")
      <|unfolded-io>
        \<less\>url /a/b/d.tm\<gtr\>
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-delta <scm-arg|base> <scm-arg|u>)><explain-synopsis|Computes the change in url from @base to @u>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-delta "/a/b/c/file.tm" "/a/b")
      <|unfolded-io>
        \<less\>url ../../b\<gtr\>
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-root <scm-arg|u>)><explain-synopsis|Returns the root (protocol) of @u>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-root (current-buffer))
      <|unfolded-io>
        "default"
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (url-root "https://www.texmacs.org")
      <|unfolded-io>
        "https"
      </unfolded-io>
    </session>
  </explain>

  <\explain>
    <scm|(url-unroot <scm-arg|u>)><explain-synopsis|Removes the root (protocol) of @u>
  <|explain>
    <\session|scheme|default>
      <\unfolded-io|Scheme] >
        (url-unroot "/a/b/c")
      <|unfolded-io>
        \<less\>url a/b/c\<gtr\>
      </unfolded-io>

      <\unfolded-io|Scheme] >
        (url-unroot "https://www.texmacs.org")
      <|unfolded-io>
        \<less\>url www.texmacs.org\<gtr\>
      </unfolded-io>
    </session>
  </explain>

  <todo|Yet to be documented:>

  <\cpp-code>
    url \ \ \ reroot (url u, string s); \ \ \ \ // reroot using new protocol

    url \ \ \ expand (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ // rewrite a/{b:c} -\<gtr\> a/b:a/c

    url \ \ \ sort (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ // order items in ors

    url \ \ \ factor (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ // inverse of expand; also sorts

    bool \ \ descends (url u, url base); \ \ // does u descend from base?

    bool \ \ is_secure (url u); \ \ \ \ \ \ \ \ \ \ \ // is u secure?
  </cpp-code>

  <subsection|Resolution>

  <todo|Yet to be documented:>

  <\cpp-code>
    url \ complete (url u, string filter= "fr"); // wildcard completion

    url \ resolve (url u, string filter= "fr"); \ // find first match only

    url \ resolve_in_path (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ // find file in path

    bool exists (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ // file exists

    bool exists_in_path (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ // file exists in path

    bool has_permission (url u, string filter); // check file permissions

    url \ descendance (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ // utility for style&package menus

    url \ subdirectories (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ // similarly for patters

    url \ concretize_url (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ // variant of concretize below

    string concretize (url u); \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ // system name for resolved url

    string materialize (url u, string f= "fr"); // resolve +
  </cpp-code>

  <section|Notification and download of updates><label|sec-automatic-updates>

  As of <name|svn> revision 7196, <TeXmacs> supports automatic notification of available downloads from a repository and their installation using the <name|Sparkle> framework for <name|MacOS> and <name|WinSparkle> under <name|Windows>.

  In order to guarantee the origin of releases, these must be signed with a <name|DSA> key, whose public part will be bundled with the application. On the server side a so-called <with|font-shape|italic|appcast> must be updated for each release. It is an <name|xml> file containing information about available downloads, their contents and their digital signatures, following the specification for <name|Sparkle>/<name|WinSparkle>. For the moment we refer to <name|Sparkle>'s documentation for more details.

  In principle it should be easy for anyone to release their custom versions of <TeXmacs> and let their users autoupdate them with a simple change in the config files. For this they only need provide the public key and the <name|url> of the appcast.

  <subsection|Operating system specifics>

  Under <name|MacOS> the process of creation of the appcast is partially automated through the <name|make> build rule <verbatim|MACOS_RELEASE>. Calling <verbatim|make MACOS_RELEASE> will compile and bundle <TeXmacs>, then zip and finally digitally sign the resulting <verbatim|TeXmacs-*.app.zip> with the script <verbatim|admin/misc/sign_update>. In order for this to work, one has to set the environment variable <verbatim|TEXMACS_PRIVATE_DSA> to point to the location of the private <name|DSA> key used to sign releases. At the end of the build process a chunk of <name|XML> is printed that can be pasted in the <verbatim|appcast.xml> file.

  Under <name|Windows> digital signatures are not yet supported by <name|WinSparkle> and as such will be ignored (Aug. 2013).

  There is no support for automatic notification of releases under <name|Linux> yet. Automatic download and installation is unlikely to happen due to the way packaging systems work for most distributions.

  <subsection|Client side interface>

  <\explain>
    <scm|(check-updates-background)><explain-synopsis|check for updates in the background>
  <|explain>
    Start a background check for updates. A dialog box pops up only if there's an update. Configuration variables must be properly set for this call to work. In particular, the appcast url must be set via the preference <scm|"updater:appcast">.
  </explain>

  <\explain>
    <scm|(check-updates-foreground)><explain-synopsis|check for updates in the foreground>
  <|explain>
    Start a check for updates immediately popping up a dialog with the progress. This call is non-blocking at least with <name|Sparkle> and <name|WinSparkle> since they run in separate threads.
  </explain>

  <\explain>
    <scm|(check-updates-interval <scm-arg|integer>)><explain-synopsis|sets the update interval>
  <|explain>
    Sets the interval in hours to wait between automatic checks if these are activated via <scm|"updater:automatic-checks">. Note that this <with|font-series|bold|does not> alter the value of the preference <scm|"updater:interval">, whose use is preferred.
  </explain>

  <\explain>
    <scm|(check-updates-interval <scm-arg|boolean>)><explain-synopsis|sets the update interval>
  <|explain>
    Tells <TeXmacs> whether to automatically check for updates. Note that this <with|font-series|bold|does not> alter the value of the preference <scm|"updater:automatic-checks">, whose use is preferred.
  </explain>

  The following preferences determine the behaviour of the automatic update system:

  <\explain>
    <scm|("updater:appcast" <scm-arg|url>)><explain-synopsis|preference>
  <|explain>
    The <name|url> to the appcast which will be used by the startup check. An empty or undefined value will deactivate both automatic and manual checks.
  </explain>

  <\explain>
    <scm|("updater:automatic-checks" <scm-arg|boolean>)><explain-synopsis|preference>
  <|explain>
    Whether <TeXmacs> should automatically look for updates in the background (some time) after startup. Use <scm|"updater:check-interval"> to set the number of hours to wait between checks.
  </explain>

  <\explain>
    <scm|("updater:check-interval" <scm-arg|integer>)><explain-synopsis|preference>
  <|explain>
    How often should <TeXmacs> look for updates? The interval is given in hours, with a minimum of one. Setting this to zero deactivates automatic checks by setting <scm|"updater:automatic-checks"> to false.
  </explain>

  <\explain>
    <scm|("updater:public-dsa-key" <scm-arg|url>)><explain-synopsis|preference>
  <|explain>
    The file with the public <name|DSA> key to use to verify the digital signature of releases. This feature is currently (Aug. 2013) only supported under <name|MacOS>, but the preference value is ignored: <name|Sparkle> will use the value set in the <verbatim|SUPublicDSAKeyFile> key in the application bundle's <tt|Info.plist> dictionary.
  </explain>

  <section|All glue functions><label|sec-glue-auto-doc>

  This document lists all available <scheme> functions that are implemented in the <c++> code and which, consequently, are neither defined nor documented in the <scheme> modules. Ideally each of these functions should be documented elsewhere in the documentation.

  This document was generated automatically from the glue code definitions by the script <verbatim|src/src/Scheme/Glue/make-apidoc-doc.scm> in <TeXmacs> source code.

  \;

  \;

  <\explain>
    <scm|(texmacs-version-release <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|texmacs_version> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(version-before? <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|version_inf> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(updater-supported?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|updater_supported> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(updater-running?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|updater_is_running> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(updater-check-background)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|updater_check_background> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(updater-check-foreground)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|updater_check_foreground> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(updater-last-check)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|updater_last_check> which returns <scm|long>.
  </explain>

  <\explain>
    <scm|(updater-set-interval <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|updater_set_interval> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(get-original-path)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_original_path> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(os-win32?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|os_win32> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(os-mingw?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|os_mingw> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(os-macos?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|os_macos> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(has-printing-cmd?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|has_printing_cmd> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(x-gui?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|gui_is_x> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(qt-gui?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|gui_is_qt> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(gui-version)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|gui_version> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(default-look-and-feel)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|default_look_and_feel> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(default-chinese-font)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|default_chinese_font_name> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(default-japanese-font)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|default_japanese_font_name> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(default-korean-font)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|default_korean_font_name> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(get-retina-factor)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_retina_factor> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-retina-zoom)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_retina_zoom> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-retina-icons)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_retina_icons> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-retina-scale)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_retina_scale> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(set-retina-factor <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_retina_factor> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-retina-zoom <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_retina_zoom> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-retina-icons <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_retina_icons> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-retina-scale <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_retina_scale> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tm-output <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_output> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tm-errput <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_errput> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(win32-display <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|win32_display> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-error)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cpp_error> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(supports-native-pdf?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|supports_native_pdf> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(supports-ghostscript?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|supports_ghostscript> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(rescue-mode?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|in_rescue_mode> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(scheme-dialect)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|scheme_dialect> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(get-texmacs-path)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_texmacs_path> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(get-texmacs-home-path)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_texmacs_home_path> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(plugin-list)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|plugin_list> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(set-fast-environments <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_fast_environments> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-exists-in-tt? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tt_font_exists> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(eval-system <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|eval_system> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(var-eval-system <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|var_eval_system> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(evaluate-system <scm-arg|array_string> <scm-arg|array_int> <scm-arg|array_string> <scm-arg|array_int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|evaluate_system> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(get-locale-language)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_locale_language> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(get-locale-charset)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_locale_charset> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(locale-to-language <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|locale_to_language> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(language-to-locale <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|language_to_locale> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(texmacs-time)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|texmacs_time> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(pretty-time <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|pretty_time> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(texmacs-memory)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mem_used> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(bench-print <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bench_print> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(bench-print-all)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bench_print> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-wait <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|system_wait> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-show-kbd)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_show_kbd> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(set-show-kbd <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_show_kbd> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-latex-command <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_latex_command> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-bibtex-command <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_bibtex_command> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(number-latex-errors <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|number_latex_errors> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(number-latex-pages <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|number_latex_pages> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(math-symbol-group <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|math_symbol_group> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(math-group-members <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|math_group_members> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(math-symbol-type <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|math_symbol_type> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(object-\<gtr\>command <scm-arg|object>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|as_command> which returns <scm|command>.
  </explain>

  <\explain>
    <scm|(command-eval <scm-arg|command>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|eval> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(command-apply <scm-arg|command> <scm-arg|object>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|apply> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(exec-delayed <scm-arg|object>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|exec_delayed> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(exec-delayed-pause <scm-arg|object>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|exec_delayed_pause> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(protected-call <scm-arg|object>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|protected_call> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(notify-preferences-booted)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|notify_preferences_booted> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-has-preference? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|has_user_preference> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(cpp-get-preference <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_user_preference> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(cpp-set-preference <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_user_preference> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-reset-preference <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|reset_user_preference> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(save-preferences)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|save_user_preferences> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-default-printing-command)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_printing_default> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(set-input-language <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_input_language> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-input-language)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_input_language> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(set-output-language <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|gui_set_output_language> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-output-language)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_output_language> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(translate <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|translate> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-translate <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|translate_as_is> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(translate-from-to <scm-arg|content> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|translate> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tree-translate <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_translate> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-translate-from-to <scm-arg|content> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_translate> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(force-load-translations <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|force_load_dictionary> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(color <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|named_color> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-hex-color <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_hex_color> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(named-color-\<gtr\>xcolormap <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|named_color_to_xcolormap> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(rgba-\<gtr\>named-color <scm-arg|array_int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|named_rgb_color> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(named-color-\<gtr\>rgba <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_named_rgb_color> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(new-author)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|new_author> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(set-author <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_author> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-author)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_author> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(debug-set <scm-arg|string> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|debug_set> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(debug-get <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|debug_get> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(debug-message <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|debug_message> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-debug-messages <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_debug_messages> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(clear-debug-messages)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|clear_debug_messages> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cout-buffer)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cout_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cout-unbuffer)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cout_unbuffer> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(mark-new)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|new_marker> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(glyph-register <scm-arg|string> <scm-arg|array_array_array_double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|register_glyph> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(glyph-recognize <scm-arg|array_array_array_double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|recognize_glyph> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(set-new-fonts <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_new_fonts> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(new-fonts?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_new_fonts> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tmtm-eqnumber-\<gtr\>nonumber <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|eqnumber_to_nonumber> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(busy-versioning?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_busy_versioning> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(players-set-elapsed <scm-arg|tree> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|players_set_elapsed> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(players-set-speed <scm-arg|tree> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|players_set_speed> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(apply-effect <scm-arg|content> <scm-arg|array_url> <scm-arg|url> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|apply_effect> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tt-exists? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tt_font_exists> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tt-dump <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tt_dump> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tt-font-name <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tt_font_name> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(tt-analyze <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tt_analyze> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-database-build <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_build> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-build-local)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_build_local> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-extend-local <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_extend_local> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-build-global)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_build_global> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-build-characteristics <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_build_characteristics> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-insert-global <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_build_global> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-save-local-delta)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_save_local_delta> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-load)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_load> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-save)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_save> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-filter)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_filter> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(font-database-families)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_families> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-database-delta-families)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_delta_families> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-database-styles <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_styles> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-database-search <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_search> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-database-characteristics <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_characteristics> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-database-substitutions <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|font_database_substitutions> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(font-family-\<gtr\>master <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|family_to_master> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(font-master-\<gtr\>families <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|master_to_families> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-master-features <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|master_features> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-family-features <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|family_features> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-family-strict-features <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|family_strict_features> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-style-features <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|style_features> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-guessed-features <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|guessed_features> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-guessed-distance <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|guessed_distance> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(font-master-guessed-distance <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|guessed_distance> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(font-family-guessed-features <scm-arg|string> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|guessed_features> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(characteristic-distance <scm-arg|array_string> <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|characteristic_distance> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(trace-distance <scm-arg|string> <scm-arg|string> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|trace_distance> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(logical-font-public <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|logical_font> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(logical-font-exact <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|logical_font_exact> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(logical-font-private <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|logical_font> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(logical-font-family <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_family> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(logical-font-variant <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_variant> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(logical-font-series <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_series> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(logical-font-shape <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_shape> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(logical-font-search <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_font> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(logical-font-search-exact <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_font_exact> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(search-font-families <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_font_families> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(search-font-styles <scm-arg|string> <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_font_styles> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(logical-font-patch <scm-arg|array_string> <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|patch_font> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(logical-font-substitute <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|apply_substitutions> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(font-family-main <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|main_family> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(image-\<gtr\>psdoc <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|image_to_psdoc> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(anim-control-times <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_control_times> which returns <scm|array_double>.
  </explain>

  <\explain>
    <scm|(tree-\<gtr\>stree <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_to_scheme_tree> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(stree-\<gtr\>tree <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|scheme_tree_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-\<gtr\>string <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|coerce_tree_string> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-\<gtr\>tree <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|coerce_string_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tm-\<gtr\>tree <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-atomic? <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_atomic> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-compound? <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_compound> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-label <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|L> which returns <scm|tree_label>.
  </explain>

  <\explain>
    <scm|(tree-children <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|A> which returns <scm|array_tree>.
  </explain>

  <\explain>
    <scm|(tree-arity <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|N> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tree-child-ref <scm-arg|tree> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_ref> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-child-set! <scm-arg|tree> <scm-arg|int> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_set> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-child-insert <scm-arg|content> <scm-arg|int> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_child_insert> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-ip <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|obtain_ip> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(tree-active? <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_active> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-eq? <scm-arg|tree> <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|strong_equal> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(subtree <scm-arg|tree> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|subtree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-range <scm-arg|tree> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_range> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-copy <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|copy> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-append <scm-arg|tree> <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_append> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-right-index <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|right_index> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tree-label-extension? <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_extension> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-label-macro? <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_macro> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-label-parameter? <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_parameter> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-label-type <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_tag_type> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tree-multi-paragraph? <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_multi_paragraph> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-simplify <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|simplify_correct> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-minimal-arity <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|minimal_arity> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tree-maximal-arity <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|maximal_arity> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tree-possible-arity? <scm-arg|tree> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|correct_arity> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-insert_point <scm-arg|tree> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|insert_point> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tree-is-dynamic? <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_dynamic> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-accessible-child? <scm-arg|tree> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_accessible_child> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-accessible-children <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|accessible_children> which returns <scm|array_tree>.
  </explain>

  <\explain>
    <scm|(tree-all-accessible? <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|all_accessible> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-none-accessible? <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|none_accessible> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-name <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_name> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tree-long-name <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_long_name> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tree-child-name <scm-arg|content> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_child_name> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tree-child-long-name <scm-arg|content> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_child_long_name> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tree-child-type <scm-arg|content> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_child_type> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tree-child-env* <scm-arg|content> <scm-arg|int> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_env_child> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-child-env <scm-arg|content> <scm-arg|int> <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_env_child> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-descendant-env* <scm-arg|content> <scm-arg|path> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_env_descendant> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-descendant-env <scm-arg|content> <scm-arg|path> <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_env_descendant> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-load-inclusion <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|load_inclusion> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-as-string <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_as_string> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tree-extents <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_extents> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-empty? <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_empty> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-multi-line? <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_multi_line> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-is-buffer? <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|admits_edit_observer> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-search-sections <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_sections> which returns <scm|array_tree>.
  </explain>

  <\explain>
    <scm|(tree-search-tree <scm-arg|content> <scm-arg|content> <scm-arg|path> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search> which returns <scm|array_path>.
  </explain>

  <\explain>
    <scm|(tree-search-tree-at <scm-arg|content> <scm-arg|content> <scm-arg|path> <scm-arg|path> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search> which returns <scm|array_path>.
  </explain>

  <\explain>
    <scm|(tree-spell <scm-arg|string> <scm-arg|content> <scm-arg|path> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell> which returns <scm|array_path>.
  </explain>

  <\explain>
    <scm|(tree-spell-at <scm-arg|string> <scm-arg|content> <scm-arg|path> <scm-arg|path> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell> which returns <scm|array_path>.
  </explain>

  <\explain>
    <scm|(tree-spell-selection <scm-arg|string> <scm-arg|content> <scm-arg|path> <scm-arg|path> <scm-arg|path> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell> which returns <scm|array_path>.
  </explain>

  <\explain>
    <scm|(previous-search-hit <scm-arg|array_path> <scm-arg|path> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|previous_search_hit> which returns <scm|array_path>.
  </explain>

  <\explain>
    <scm|(next-search-hit <scm-arg|array_path> <scm-arg|path> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|next_search_hit> which returns <scm|array_path>.
  </explain>

  <\explain>
    <scm|(navigate-search-hit <scm-arg|path> <scm-arg|bool> <scm-arg|bool> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|navigate_search_hit> which returns <scm|array_path>.
  </explain>

  <\explain>
    <scm|(tag-minimal-arity <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|minimal_arity> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tag-maximal-arity <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|maximal_arity> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tag-possible-arity? <scm-arg|tree_label> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|correct_arity> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(set-access-mode <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_access_mode> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-access-mode)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_access_mode> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tree-assign <scm-arg|tree> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_assign> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-var-insert <scm-arg|tree> <scm-arg|int> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_insert> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-remove <scm-arg|tree> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_remove> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-split <scm-arg|tree> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_split> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-join <scm-arg|tree> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_join> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-assign-node <scm-arg|tree> <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_assign_node> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-insert-node <scm-arg|tree> <scm-arg|int> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_insert_node> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-remove-node <scm-arg|tree> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_remove_node> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(cpp-tree-correct-node <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|correct_node> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-tree-correct-downwards <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|correct_downwards> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-tree-correct-upwards <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|correct_upwards> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(concat-tokenize-math <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|concat_tokenize> which returns <scm|array_tree>.
  </explain>

  <\explain>
    <scm|(concat-decompose <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|concat_decompose> which returns <scm|array_tree>.
  </explain>

  <\explain>
    <scm|(concat-recompose <scm-arg|array_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|concat_recompose> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(with-like? <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_with_like> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(with-same-type? <scm-arg|content> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|with_same_type> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(with-similar-type? <scm-arg|content> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|with_similar_type> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(with-correct <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|with_correct> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(with-correct-superfluous <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|superfluous_with_correct> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(invisible-correct-superfluous <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|superfluous_invisible_correct> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(invisible-correct-missing <scm-arg|content> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|missing_invisible_correct> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(automatic-correct <scm-arg|content> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|automatic_correct> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(manual-correct <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|manual_correct> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-upgrade-brackets <scm-arg|content> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|upgrade_brackets> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-upgrade-big <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|upgrade_big> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-downgrade-brackets <scm-arg|content> <scm-arg|bool> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|downgrade_brackets> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-downgrade-big <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|downgrade_big> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(math-status-print)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|math_status_print> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(math-status-reset)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|math_status_reset> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(math-stats-compile <scm-arg|string> <scm-arg|content> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|compile_stats> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(math-stats-occurrences <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|number_occurrences> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(math-stats-number-in-role <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|number_in_role> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(path-strip <scm-arg|path> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|strip> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-inf? <scm-arg|path> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|path_inf> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(path-inf-eq? <scm-arg|path> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|path_inf_eq> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(path-less? <scm-arg|path> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|path_less> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(path-less-eq? <scm-arg|path> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|path_less_eq> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(path-start <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|start> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-end <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|end> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-next <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|next_valid> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-previous <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|previous_valid> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-next-word <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|next_word> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-previous-word <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|previous_word> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-next-node <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|next_node> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-previous-node <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|previous_node> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-next-tag <scm-arg|content> <scm-arg|path> <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|next_tag> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-previous-tag <scm-arg|content> <scm-arg|path> <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|previous_tag> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-next-tag-same-argument <scm-arg|content> <scm-arg|path> <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|next_tag_same_argument> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-previous-tag-same-argument <scm-arg|content> <scm-arg|path> <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|previous_tag_same_argument> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-next-argument <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|next_argument> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-previous-argument <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|previous_argument> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(path-previous-section <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|previous_section> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(make-modification <scm-arg|string> <scm-arg|path> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_modification> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-assign <scm-arg|path> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mod_assign> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-insert <scm-arg|path> <scm-arg|int> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mod_insert> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-remove <scm-arg|path> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mod_remove> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-split <scm-arg|path> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mod_split> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-join <scm-arg|path> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mod_join> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-assign-node <scm-arg|path> <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mod_assign_node> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-insert-node <scm-arg|path> <scm-arg|int> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mod_insert_node> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-remove-node <scm-arg|path> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mod_remove_node> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-set-cursor <scm-arg|path> <scm-arg|int> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mod_set_cursor> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-kind <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_type> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(modification-path <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_path> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(modification-tree <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(modification-root <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|root> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(modification-index <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|index> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(modification-argument <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|argument> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(modification-label <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|L> which returns <scm|tree_label>.
  </explain>

  <\explain>
    <scm|(modification-copy <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|copy> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-applicable? <scm-arg|content> <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_applicable> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(modification-apply <scm-arg|content> <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|var_clean_apply> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(modification-inplace-apply <scm-arg|tree> <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|var_apply> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(modification-invert <scm-arg|modification> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|invert> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-commute? <scm-arg|modification> <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|commute> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(modification-can-pull? <scm-arg|modification> <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|can_pull> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(modification-pull <scm-arg|modification> <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|pull> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(modification-co-pull <scm-arg|modification> <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|co_pull> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(patch-pair <scm-arg|modification> <scm-arg|modification>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|patch> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-compound <scm-arg|array_patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|patch> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-branch <scm-arg|array_patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|branch_patch> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-birth <scm-arg|double> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|patch> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-author <scm-arg|double> <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|patch> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-pair? <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_modification> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(patch-compound? <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_compound> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(patch-branch? <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_branch> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(patch-birth? <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_birth> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(patch-author? <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_author> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(patch-arity <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|N> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(patch-ref <scm-arg|patch> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|access> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-direct <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_modification> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(patch-inverse <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_inverse> which returns <scm|modification>.
  </explain>

  <\explain>
    <scm|(patch-get-birth <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_birth> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(patch-get-author <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_author> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(patch-copy <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|copy> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-applicable? <scm-arg|patch> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_applicable> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(patch-apply <scm-arg|content> <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|var_clean_apply> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(patch-inplace-apply <scm-arg|tree> <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|var_apply> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(patch-compactify <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|compactify> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-cursor-hint <scm-arg|patch> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cursor_hint> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(patch-invert <scm-arg|patch> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|invert> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-commute? <scm-arg|patch> <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|commute> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(patch-can-pull? <scm-arg|patch> <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|can_pull> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(patch-pull <scm-arg|patch> <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|pull> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-co-pull <scm-arg|patch> <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|co_pull> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-remove-set-cursor <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_set_cursor> which returns <scm|patch>.
  </explain>

  <\explain>
    <scm|(patch-modifies? <scm-arg|patch>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|does_modify> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-\<gtr\>ids <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_ids> which returns <scm|list_string>.
  </explain>

  <\explain>
    <scm|(id-\<gtr\>trees <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_trees> which returns <scm|list_tree>.
  </explain>

  <\explain>
    <scm|(vertex-\<gtr\>links <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_links> which returns <scm|list_tree>.
  </explain>

  <\explain>
    <scm|(tree-\<gtr\>tree-pointer <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_pointer_new> which returns <scm|observer>.
  </explain>

  <\explain>
    <scm|(tree-pointer-detach <scm-arg|observer>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_pointer_delete> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tree-pointer-\<gtr\>tree <scm-arg|observer>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|obtain_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(current-link-types)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|all_link_types> which returns <scm|list_string>.
  </explain>

  <\explain>
    <scm|(get-locus-rendering <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_locus_rendering> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(set-locus-rendering <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_locus_rendering> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(declare-visited <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|declare_visited> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(has-been-visited? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|has_been_visited> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(graphics-set <scm-arg|content> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_graphical_value> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(graphics-has? <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|has_graphical_value> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(graphics-ref <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_graphical_value> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(graphics-needs-update?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|graphics_needs_update> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(graphics-notify-update <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|graphics_notify_update> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-string-number? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_double> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(string-occurs? <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|occurs> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(string-count-occurrences <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|count_occurrences> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(string-search-forwards <scm-arg|string> <scm-arg|int> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_forwards> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(string-search-backwards <scm-arg|string> <scm-arg|int> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_backwards> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(string-overlapping <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|overlapping> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(string-replace <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|replace> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-find-non-alpha <scm-arg|string> <scm-arg|int> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|find_non_alpha> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(string-alpha? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_alpha> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(string-locase-alpha? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_locase_alpha> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(upcase-first <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|upcase_first> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(locase-first <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|locase_first> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(upcase-all <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|upcase_all> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(locase-all <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|locase_all> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-union <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|string_union> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-minus <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|string_minus> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(escape-generic <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|escape_generic> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(escape-verbatim <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|escape_verbatim> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(escape-shell <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|escape_sh> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(escape-to-ascii <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cork_to_ascii> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(unescape-guile <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|unescape_guile> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-quote <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|scm_quote> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-unquote <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|scm_unquote> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-trim-spaces-left <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|trim_spaces_left> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-trim-spaces-right <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|trim_spaces_right> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-trim-spaces <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|trim_spaces> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(downgrade-math-letters <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|downgrade_math_letters> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-convert <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|convert> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(encode-base64 <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|encode_base64> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(decode-base64 <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|decode_base64> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(sourcecode-\<gtr\>cork <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|sourcecode_to_cork> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(cork-\<gtr\>sourcecode <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cork_to_sourcecode> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(utf8-\<gtr\>cork <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|utf8_to_cork> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(cork-\<gtr\>utf8 <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cork_to_utf8> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(utf8-\<gtr\>t2a <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|utf8_to_t2a> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(t2a-\<gtr\>utf8 <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|t2a_to_utf8> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(utf8-\<gtr\>html <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|utf8_to_html> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(guess-wencoding <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|guess_wencoding> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tm-\<gtr\>xml-name <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_to_xml_name> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(old-tm-\<gtr\>xml-cdata <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|old_tm_to_xml_cdata> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tm-\<gtr\>xml-cdata <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_to_xml_cdata> which returns <scm|object>.
  </explain>

  <\explain>
    <scm|(xml-name-\<gtr\>tm <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|xml_name_to_tm> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(old-xml-cdata-\<gtr\>tm <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|old_xml_cdata_to_tm> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(xml-unspace <scm-arg|string> <scm-arg|bool> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|xml_unspace> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(integer-\<gtr\>hexadecimal <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|as_hexadecimal> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(integer-\<gtr\>padded-hexadecimal <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|as_hexadecimal> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(hexadecimal-\<gtr\>integer <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|from_hexadecimal> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(cpp-string-tokenize <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tokenize> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(cpp-string-recompose <scm-arg|array_string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|recompose> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-differences <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|differences> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(string-distance <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|distance> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(find-left-bracket <scm-arg|path> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|find_left_bracket> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(find-right-bracket <scm-arg|path> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|find_right_bracket> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(string-\<gtr\>tmstring <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_encode> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-\<gtr\>string <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_decode> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-length <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_string_length> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tmstring-ref <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_forward_access> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-reverse-ref <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_backward_access> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-\<gtr\>list <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_tokenize> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(list-\<gtr\>tmstring <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_recompose> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-next <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_char_next> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(string-previous <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_char_previous> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(tmstring-split <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tm_string_split> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(tmstring-translit <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|uni_translit> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-locase-first <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|uni_locase_first> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-upcase-first <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|uni_upcase_first> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-locase-all <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|uni_locase_all> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-upcase-all <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|uni_upcase_all> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-unaccent-all <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|uni_unaccent_all> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tmstring-letter? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|uni_is_letter> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tmstring-before? <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|uni_before> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(multi-spell-start)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_start> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(multi-spell-done)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_done> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(single-spell-start <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_start> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(single-spell-done <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_done> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(spell-check <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_check> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(spell-check? <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|check_word> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(spell-accept <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_accept> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(spell-var-accept <scm-arg|string> <scm-arg|string> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_accept> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(spell-insert <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_insert> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(packrat-define <scm-arg|string> <scm-arg|string> <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|packrat_define> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(packrat-property <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|packrat_property> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(packrat-inherit <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|packrat_inherit> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(packrat-parse <scm-arg|string> <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|packrat_parse> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(packrat-correct? <scm-arg|string> <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|packrat_correct> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(packrat-context <scm-arg|string> <scm-arg|string> <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|packrat_context> which returns <scm|object>.
  </explain>

  <\explain>
    <scm|(syntax-read-preferences <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|initialize_color_decodings> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(parse-texmacs <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|texmacs_document_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(serialize-texmacs <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_to_texmacs> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(parse-texmacs-snippet <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|texmacs_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(serialize-texmacs-snippet <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_to_texmacs> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(texmacs-\<gtr\>stm <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_to_scheme> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(stm-\<gtr\>texmacs <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|scheme_document_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(stm-snippet-\<gtr\>texmacs <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|scheme_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(cpp-texmacs-\<gtr\>verbatim <scm-arg|tree> <scm-arg|bool> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_to_verbatim> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(cpp-verbatim-snippet-\<gtr\>texmacs <scm-arg|string> <scm-arg|bool> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|verbatim_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(cpp-verbatim-\<gtr\>texmacs <scm-arg|string> <scm-arg|bool> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|verbatim_document_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(parse-latex <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|parse_latex> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(parse-latex-document <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|parse_latex_document> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(latex-\<gtr\>texmacs <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|latex_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(cpp-latex-document-\<gtr\>texmacs <scm-arg|string> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|latex_document_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(latex-class-document-\<gtr\>texmacs <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|latex_class_document_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tracked-latex-\<gtr\>texmacs <scm-arg|string> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tracked_latex_to_texmacs> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(conservative-texmacs-\<gtr\>latex <scm-arg|content> <scm-arg|object>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|conservative_texmacs_to_latex> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(tracked-texmacs-\<gtr\>latex <scm-arg|content> <scm-arg|object>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tracked_texmacs_to_latex> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(conservative-latex-\<gtr\>texmacs <scm-arg|string> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|conservative_latex_to_texmacs> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(get-line-number <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_line_number> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-column-number <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_column_number> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(try-latex-export <scm-arg|content> <scm-arg|object> <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|try_latex_export> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(parse-xml <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|parse_xml> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(parse-html <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|parse_html> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(parse-bib <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|parse_bib> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(conservative-bib-import <scm-arg|string> <scm-arg|content> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|conservative_bib_import> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(conservative-bib-export <scm-arg|content> <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|conservative_bib_export> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(clean-html <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|clean_html> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(upgrade-tmml <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tmml_upgrade> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(upgrade-mathml <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|upgrade_mathml> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(retrieve-mathjax <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|retrieve_mathjax> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(vernac-\<gtr\>texmacs <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|vernac_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(vernac-document-\<gtr\>texmacs <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|vernac_document_to_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(compute-keys-string <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|compute_keys> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(compute-keys-tree <scm-arg|content> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|compute_keys> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(compute-keys-url <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|compute_keys> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(compute-index-string <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|compute_index> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(compute-index-tree <scm-arg|content> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|compute_index> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(compute-index-url <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|compute_index> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(url-\<gtr\>url <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(root-\<gtr\>url <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_root> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(string-\<gtr\>url <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-\<gtr\>string <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|as_string> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-\<gtr\>stree <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|as_tree> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(system-\<gtr\>url <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_system> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-\<gtr\>system <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|as_system_string> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(unix-\<gtr\>url <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_unix> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-\<gtr\>unix <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|as_unix_string> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-unix <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-none)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_none> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-any)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_wildcard> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-wildcard <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_wildcard> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-pwd)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_pwd> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-parent)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_parent> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-ancestor)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_ancestor> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-append <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_concat> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-or <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_or> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-none? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_none> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-rooted? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_rooted> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-rooted-protocol? <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_rooted> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-rooted-web? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_rooted_web> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-rooted-tmfs? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_rooted_tmfs> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-rooted-tmfs-protocol? <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_rooted_tmfs> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-root <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_root> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-unroot <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|unroot> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-atomic? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_atomic> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-concat? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_concat> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-or? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_or> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-ref <scm-arg|url> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_ref> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-head <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|head> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-tail <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tail> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-format <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|file_format> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-suffix <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|suffix> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-basename <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|basename> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-glue <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|glue> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-unglue <scm-arg|url> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|unglue> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-relative <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|relative> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-expand <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|expand> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-factor <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|factor> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-delta <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|delta> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-secure? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_secure> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-descends? <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|descends> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-complete <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|complete> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-resolve <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|resolve> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-resolve-in-path <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|resolve_in_path> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-resolve-pattern <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|resolve_pattern> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-exists? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|exists> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-exists-in-path? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|exists_in_path> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-exists-in-tex? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|exists_in_tex> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-concretize* <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|concretize_url> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-concretize <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|concretize> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-sys-concretize <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|sys_concretize> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-materialize <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|materialize> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-test? <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_of_type> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-regular? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_regular> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-directory? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_directory> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-link? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_symbolic_link> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-newer? <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_newer> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-size <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|file_size> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(url-last-modified <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|last_modified> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(url-temp)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_temp> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-scratch <scm-arg|string> <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|url_scratch> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-scratch? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_scratch> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(url-cache-invalidate <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|web_cache_invalidate> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(string-save <scm-arg|string> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|string_save> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(string-load <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|string_load> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(string-append-to-file <scm-arg|string> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|string_append_to_file> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-move <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|move> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-copy <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|copy> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-remove <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-mkdir <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mkdir> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-rmdir <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|rmdir> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-setenv <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_env> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-search-score <scm-arg|url> <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_score> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(system-1 <scm-arg|string> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|system> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-2 <scm-arg|string> <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|system> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(system-url-\<gtr\>string <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|sys_concretize> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(url-grep <scm-arg|string> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|grep> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(url-search-upwards <scm-arg|url> <scm-arg|string> <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_file_upwards> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(picture-cache-reset)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|picture_cache_reset> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-file-focus <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_file_focus> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-file-focus)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_file_focus> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(persistent-set <scm-arg|url> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|persistent_set> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(persistent-remove <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|persistent_reset> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(persistent-has? <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|persistent_contains> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(persistent-get <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|persistent_get> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(persistent-file-name <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|persistent_file_name> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(tmdb-keep-history <scm-arg|url> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|keep_history> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tmdb-set-field <scm-arg|url> <scm-arg|string> <scm-arg|string> <scm-arg|array_string> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_field> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tmdb-get-field <scm-arg|url> <scm-arg|string> <scm-arg|string> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_field> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(tmdb-remove-field <scm-arg|url> <scm-arg|string> <scm-arg|string> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_field> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tmdb-get-attributes <scm-arg|url> <scm-arg|string> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_attributes> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(tmdb-set-entry <scm-arg|url> <scm-arg|string> <scm-arg|scheme_tree> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_entry> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tmdb-get-entry <scm-arg|url> <scm-arg|string> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_entry> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(tmdb-remove-entry <scm-arg|url> <scm-arg|string> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_entry> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tmdb-query <scm-arg|url> <scm-arg|scheme_tree> <scm-arg|double> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|query> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(tmdb-inspect-history <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|inspect_history> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tmdb-get-completions <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_completions> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(tmdb-get-name-completions <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_name_completions> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(supports-sql?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|sqlite3_present> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(sql-exec <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|sql_exec> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(sql-quote <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|sql_quote> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(server-start)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|server_start> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(server-stop)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|server_stop> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(server-read <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|server_read> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(server-write <scm-arg|int> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|server_write> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(server-started?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|server_started> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(client-start <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|client_start> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(client-stop <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|client_stop> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(client-read <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|client_read> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(client-write <scm-arg|int> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|client_write> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(enter-secure-mode <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|enter_secure_mode> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(connection-start <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|connection_start> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(connection-status <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|connection_status> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(connection-write-string <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|connection_write> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(connection-write <scm-arg|string> <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|connection_write> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(connection-cmd <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|connection_cmd> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(connection-eval <scm-arg|string> <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|connection_eval> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(connection-interrupt <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|connection_interrupt> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(connection-stop <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|connection_stop> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(widget-printer <scm-arg|command> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|printer_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-color-picker <scm-arg|command> <scm-arg|bool> <scm-arg|array_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|color_picker_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-extend <scm-arg|widget> <scm-arg|array_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|extend_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-hmenu <scm-arg|array_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|horizontal_menu> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-vmenu <scm-arg|array_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|vertical_menu> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-tmenu <scm-arg|array_widget> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tile_menu> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-minibar-menu <scm-arg|array_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|minibar_menu> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-separator <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|menu_separator> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-menu-group <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|menu_group> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-pulldown-button <scm-arg|widget> <scm-arg|promise_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|pulldown_button> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-pullright-button <scm-arg|widget> <scm-arg|promise_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|pullright_button> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-menu-button <scm-arg|widget> <scm-arg|command> <scm-arg|string> <scm-arg|string> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|menu_button> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-toggle <scm-arg|command> <scm-arg|bool> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|toggle_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-balloon <scm-arg|widget> <scm-arg|widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|balloon_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-empty)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|empty_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-text <scm-arg|string> <scm-arg|int> <scm-arg|int> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|text_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-input <scm-arg|command> <scm-arg|string> <scm-arg|array_string> <scm-arg|int> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|input_text_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-enum <scm-arg|command> <scm-arg|array_string> <scm-arg|string> <scm-arg|int> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|enum_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-choice <scm-arg|command> <scm-arg|array_string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|choice_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-choices <scm-arg|command> <scm-arg|array_string> <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|choice_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-filtered-choice <scm-arg|command> <scm-arg|array_string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|choice_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-tree-view <scm-arg|command> <scm-arg|tree> <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tree_view_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-xpm <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|xpm_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-box <scm-arg|scheme_tree> <scm-arg|string> <scm-arg|int> <scm-arg|bool> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|box_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-glue <scm-arg|bool> <scm-arg|bool> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|glue_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-color <scm-arg|content> <scm-arg|bool> <scm-arg|bool> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|glue_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-hlist <scm-arg|array_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|horizontal_list> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-vlist <scm-arg|array_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|vertical_list> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-division <scm-arg|string> <scm-arg|widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|division_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-aligned <scm-arg|array_widget> <scm-arg|array_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|aligned_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-tabs <scm-arg|array_widget> <scm-arg|array_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tabs_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-icon-tabs <scm-arg|array_url> <scm-arg|array_widget> <scm-arg|array_widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|icon_tabs_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-scrollable <scm-arg|widget> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|user_canvas_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-resize <scm-arg|widget> <scm-arg|int> <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|resize_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-hsplit <scm-arg|widget> <scm-arg|widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|hsplit_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-vsplit <scm-arg|widget> <scm-arg|widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|vsplit_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-texmacs-output <scm-arg|content> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|texmacs_output_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-texmacs-input <scm-arg|content> <scm-arg|content> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|texmacs_input_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-ink <scm-arg|command>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|ink_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-refresh <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|refresh_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(widget-refreshable <scm-arg|object> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|refreshable_widget> which returns <scm|widget>.
  </explain>

  <\explain>
    <scm|(object-\<gtr\>promise-widget <scm-arg|object>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|as_promise_widget> which returns <scm|promise_widget>.
  </explain>

  <\explain>
    <scm|(tree-bounding-rectangle <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_bounding_rectangle> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(widget-size <scm-arg|widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_widget_size> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(texmacs-widget-size <scm-arg|widget>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_texmacs_widget_size> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(show-balloon <scm-arg|widget> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_help_balloon> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-style-menu)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_style_menu> which returns <scm|object>.
  </explain>

  <\explain>
    <scm|(hidden-package? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|hidden_package> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(get-add-package-menu)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_add_package_menu> which returns <scm|object>.
  </explain>

  <\explain>
    <scm|(get-remove-package-menu)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_remove_package_menu> which returns <scm|object>.
  </explain>

  <\explain>
    <scm|(get-toggle-package-menu)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_toggle_package_menu> which returns <scm|object>.
  </explain>

  <\explain>
    <scm|(refresh-now <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|windows_refresh> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-screen-size)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_screen_size> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(buffer-list)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_all_buffers> which returns <scm|array_url>.
  </explain>

  <\explain>
    <scm|(current-buffer-url)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_current_buffer_safe> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(path-to-buffer <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|path_to_buffer> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(buffer-new)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_new_buffer> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(buffer-rename <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|rename_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(buffer-set <scm-arg|url> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_buffer_tree> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(buffer-get <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_buffer_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(buffer-set-body <scm-arg|url> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_buffer_body> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(buffer-get-body <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_buffer_body> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(buffer-set-master <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_master_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(buffer-get-master <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_master_buffer> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(buffer-set-title <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_title_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(buffer-get-title <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_title_buffer> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(buffer-last-save <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_last_save_buffer> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(buffer-last-visited <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|last_visited> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(buffer-modified? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|buffer_modified> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(buffer-modified-since-autosave? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|buffer_modified_since_autosave> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(buffer-pretend-modified <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|pretend_buffer_modified> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(buffer-pretend-saved <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|pretend_buffer_saved> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(buffer-pretend-autosaved <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|pretend_buffer_autosaved> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(buffer-attach-notifier <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|attach_buffer_notifier> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(buffer-has-name? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|buffer_has_name> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(buffer-aux? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_aux_buffer> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(buffer-embedded? <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_embedded_buffer> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(buffer-import <scm-arg|url> <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|buffer_import> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(buffer-load <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|buffer_load> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(buffer-export <scm-arg|url> <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|buffer_export> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(buffer-save <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|buffer_save> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-import-loaded <scm-arg|string> <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|import_loaded_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-import <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|import_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-inclusion <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|load_inclusion> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(tree-export <scm-arg|tree> <scm-arg|url> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|export_tree> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(tree-load-style <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|load_style_tree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(buffer-focus <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|focus_on_buffer> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(buffer-focus* <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|var_focus_on_buffer> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(view-list)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_all_views> which returns <scm|array_url>.
  </explain>

  <\explain>
    <scm|(buffer-\<gtr\>views <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|buffer_to_views> which returns <scm|array_url>.
  </explain>

  <\explain>
    <scm|(current-view-url)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_current_view_safe> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(window-\<gtr\>view <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_to_view> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(view-\<gtr\>buffer <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|view_to_buffer> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(view-\<gtr\>window-url <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|view_to_window> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(view-new <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_new_view> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(view-passive <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_passive_view> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(view-recent <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_recent_view> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(view-delete <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|delete_view> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(window-set-view <scm-arg|url> <scm-arg|url> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_set_view> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(switch-to-buffer <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|switch_to_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-drd <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_current_drd> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(window-list)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|windows_list> which returns <scm|array_url>.
  </explain>

  <\explain>
    <scm|(windows-number)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_nr_windows> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(current-window)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_current_window> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(buffer-\<gtr\>windows <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|buffer_to_windows> which returns <scm|array_url>.
  </explain>

  <\explain>
    <scm|(window-to-buffer <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_to_buffer> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(window-set-buffer <scm-arg|url> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_set_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(window-focus <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_focus> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(switch-to-window <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|switch_to_window> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(new-buffer)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|create_buffer> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(open-buffer-in-window <scm-arg|url> <scm-arg|content> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|new_buffer_in_new_window> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(open-window)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|open_window> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(open-window-geometry <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|open_window> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(clone-window)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|clone_window> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-buffer-close <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|kill_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(kill-window <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|kill_window> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(kill-current-window-and-buffer)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|kill_current_window_and_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(project-attach <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|project_attach> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(project-detach)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|project_attach> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(project-attached?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|project_attached> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(project-get)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|project_get> which returns <scm|url>.
  </explain>

  <\explain>
    <scm|(alt-window-handle)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_handle> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(alt-window-create-quit <scm-arg|int> <scm-arg|widget> <scm-arg|string> <scm-arg|command>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_create> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(alt-window-create-plain <scm-arg|int> <scm-arg|widget> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_create_plain> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(alt-window-create-popup <scm-arg|int> <scm-arg|widget> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_create_popup> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(alt-window-create-tooltip <scm-arg|int> <scm-arg|widget> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_create_tooltip> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(alt-window-delete <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_delete> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(alt-window-show <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_show> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(alt-window-hide <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_hide> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(alt-window-get-size <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_get_size> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(alt-window-set-size <scm-arg|int> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_set_size> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(alt-window-get-position <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_get_position> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(alt-window-set-position <scm-arg|int> <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_set_position> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(alt-window-search <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|window_search> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(supports-bibtex?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bibtex_present> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(bibtex-run <scm-arg|string> <scm-arg|string> <scm-arg|url> <scm-arg|array_string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bibtex_run> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(bib-add-period <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_add_period> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(bib-locase-first <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_locase_first> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(bib-upcase-first <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_upcase_first> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(bib-locase <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_locase> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(bib-upcase <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_upcase> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(bib-default-preserve-case <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_default_preserve_case> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(bib-default-upcase-first <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_default_upcase_first> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(bib-purify <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_purify> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(bib-text-length <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_text_length> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(bib-prefix <scm-arg|scheme_tree> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_prefix> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(bib-empty? <scm-arg|scheme_tree> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_empty> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(bib-field <scm-arg|scheme_tree> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_field> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(bib-abbreviate <scm-arg|scheme_tree> <scm-arg|scheme_tree> <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|bib_abbreviate> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(insert-kbd-wildcard <scm-arg|string> <scm-arg|string> <scm-arg|bool> <scm-arg|bool> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|insert_kbd_wildcard> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-variant-keys <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_variant_keys> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(kbd-pre-rewrite <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|kbd_pre_rewrite> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(kbd-post-rewrite <scm-arg|string> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|kbd_post_rewrite> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(kbd-system-rewrite <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|kbd_system_rewrite> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(set-font-rules <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_font_rules> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(window-get-serial)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_window_serial> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(window-set-property <scm-arg|scheme_tree> <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_window_property> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(window-get-property <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_window_property> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(show-header <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_header> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-icon-bar <scm-arg|int> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_icon_bar> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-side-tools <scm-arg|int> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_side_tools> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-bottom-tools <scm-arg|int> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_bottom_tools> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-footer <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_footer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(visible-header?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|visible_header> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(visible-icon-bar? <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|visible_icon_bar> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(visible-side-tools? <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|visible_side_tools> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(visible-bottom-tools? <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|visible_bottom_tools> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(visible-footer?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|visible_footer> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(full-screen-mode <scm-arg|bool> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|full_screen_mode> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(full-screen?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|in_full_screen_mode> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(full-screen-edit?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|in_full_screen_edit_mode> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(set-window-zoom-factor <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_window_zoom_factor> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-window-zoom-factor)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_window_zoom_factor> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(shell <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|shell> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(dialogue-end)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|dialogue_end> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-choose-file <scm-arg|object> <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|choose_file> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tm-interactive <scm-arg|object> <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|interactive> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-style-clear-cache)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|style_clear_cache> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-script-status <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_script_status> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-printing-command <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_printing_command> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-printer-paper-type <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_printer_page_type> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-printer-paper-type)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_printer_page_type> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(set-printer-dpi <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_printer_dpi> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-default-zoom-factor <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_default_zoom_factor> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-default-zoom-factor)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_default_zoom_factor> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(inclusions-gc)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|inclusions_gc> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(update-all-path <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|typeset_update> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(update-all-buffers)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|typeset_update_all> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-message <scm-arg|content> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_message> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-message-temp <scm-arg|content> <scm-arg|content> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_message> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(recall-message)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|recall_message> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(yes? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_yes> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(quit-TeXmacs)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|quit> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(root-tree)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|the_root> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(buffer-path)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|the_buffer_path> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(buffer-tree)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|the_buffer> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(paragraph-tree)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|the_line> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(cursor-path)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|the_path> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(cursor-path*)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|the_shifted_path> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(selection-tree)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_get> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(path-exists? <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|test_subtree> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(cpp-path-\<gtr\>tree <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|the_subtree> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(path-correct-old <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|correct> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(path-insert-with <scm-arg|path> <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|insert_with> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(path-remove-with <scm-arg|path> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_with> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(position-new-path <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|position_new> which returns <scm|observer>.
  </explain>

  <\explain>
    <scm|(position-delete <scm-arg|observer>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|position_delete> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(position-set <scm-arg|observer> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|position_set> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(position-get <scm-arg|observer>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|position_get> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(inside? <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|inside> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(cpp-insert <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|insert_tree> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-insert-go-to <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|var_insert_tree> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(insert-raw-go-to <scm-arg|content> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|insert_tree> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(insert-raw-return)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|insert_return> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(remove-text <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_text> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(remove-structure <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_structure> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(remove-structure-upwards)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_structure_upwards> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_compound> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-arity <scm-arg|tree_label> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_compound> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(activate)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|activate> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(insert-argument <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|insert_argument> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(remove-argument <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_argument> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(insert-argument-at <scm-arg|path> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|insert_argument> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(remove-argument-at <scm-arg|path> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_argument> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-with <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_with> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-mod-active <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_mod_active> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-style-with <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_style_with> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-hybrid)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_hybrid> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(activate-latex)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|activate_latex> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(activate-hybrid <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|activate_hybrid> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(activate-symbol)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|activate_symbol> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-return-before)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_return_before> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-return-after)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_return_after> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(temp-proof-fix)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|temp_proof_fix> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-full-env)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_full_env> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(get-all-inits)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_init_all> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(init-default-one <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|init_default> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(init-env <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|init_env> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(init-env-tree <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|init_env> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(init-style <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|init_style> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-style-tree)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_style> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(set-style-tree <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|change_style> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-env <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_env_string> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(get-env-tree <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_env_value> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(get-env-tree-at <scm-arg|string> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_env_value> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(get-init <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_init_string> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(get-init-tree <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_init_value> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(context-has? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|defined_at_cursor> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(style-has? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|defined_at_init> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(init-has? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|defined_in_init> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(get-page-count)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_page_count> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-page-width <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_page_width> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-pages-width <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_pages_width> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-page-height <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_page_height> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-total-width <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_total_width> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-total-height <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_total_height> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-reference <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_ref> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(set-reference <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_ref> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(reset-reference <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|reset_ref> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(find-references <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|find_refs> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(list-references)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|list_refs> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(list-references* <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|list_refs> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(get-auxiliary <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_aux> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(set-auxiliary <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_aux> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(reset-auxiliary <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|reset_aux> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(list-auxiliaries)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|list_auxs> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(list-auxiliaries* <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|list_auxs> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(get-attachment <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_att> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(set-attachment <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_att> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(reset-attachment <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|reset_att> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(list-attachments)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|list_atts> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(list-attachments* <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|list_atts> which returns <scm|array_string>.
  </explain>

  <\explain>
    <scm|(make-htab <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_htab> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-space <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_space> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-var-space <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_space> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-hspace <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_hspace> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-var-hspace <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_hspace> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-vspace-before <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_vspace_before> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-var-vspace-before <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_vspace_before> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-vspace-after <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_vspace_after> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-var-vspace-after <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_vspace_after> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-image <scm-arg|string> <scm-arg|bool> <scm-arg|string> <scm-arg|string> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_image> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(length-decode <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|as_length> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(length-add <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|add_lengths> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(length-sub <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|sub_lengths> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(length-max <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|max_lengths> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(length-min <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|min_lengths> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(length-mult <scm-arg|double> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|multiply_length> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(length? <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|is_length> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(length-divide <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|divide_lengths> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(cpp-make-rigid)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_rigid> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-lprime <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_lprime> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-rprime <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_rprime> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-below)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_below> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-above)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_above> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-script <scm-arg|bool> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_script> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-fraction)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_fraction> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-sqrt)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_sqrt> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-wide <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_wide> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-wide-under <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_wide_under> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-var-sqrt)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_var_sqrt> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-neg)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_neg> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-make-tree)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_tree> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(make-subtable)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|make_subtable> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-deactivate)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_deactivate> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-extract-format)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_extract_format> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-insert-row <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_insert_row> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-insert-column <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_insert_column> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-remove-row <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_remove_row> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-remove-column <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_remove_column> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-nr-rows)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_nr_rows> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(table-nr-columns)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_nr_columns> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(table-get-extents)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_get_extents> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(table-set-extents <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_set_extents> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-which-row)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_which_row> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(table-which-column)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_which_column> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(table-which-cells)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_which_cells> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(table-cell-path <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_search_cell> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(table-go-to <scm-arg|int> <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_go_to> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-set-format <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_set_format> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-get-format-all)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_get_format> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(table-get-format <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_get_format> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(table-del-format <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_del_format> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-row-decoration <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_row_decoration> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-column-decoration <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_column_decoration> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-format-center)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_format_center> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-correct-block-content)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_correct_block_content> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-cell-mode <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_cell_mode> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-cell-mode)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_cell_mode> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(cell-set-format <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cell_set_format> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cell-get-format <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cell_get_format> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(cell-del-format <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cell_del_format> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(table-test)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|table_test> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(key-press <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|key_press> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(raw-emulate-keyboard <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|emulate_keyboard> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(complete-try?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|complete_try> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(get-input-mode)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_input_mode> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(key-press-search <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_keypress> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(key-press-replace <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|replace_keypress> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(key-press-spell <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_keypress> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(key-press-complete <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|complete_keypress> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(mouse-any <scm-arg|string> <scm-arg|int> <scm-arg|int> <scm-arg|int> <scm-arg|double> <scm-arg|array_double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mouse_any> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-mouse-position)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_mouse_position> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(set-mouse-pointer <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_pointer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(set-predef-mouse-pointer <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_pointer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-to-path <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_to> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-left)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_left> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-right)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_right> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-up)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_up> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-down)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_down> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-start)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_start> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-end)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_end> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-start-of <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_start_of> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-end-of <scm-arg|tree_label>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_end_of> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-start-with <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_start_with> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-end-with <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_end_with> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-start-line)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_start_line> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-end-line)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_end_line> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-page-up)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_page_up> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-page-down)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_page_down> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-start-paragraph)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_start_paragraph> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(go-end-paragraph)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_end_paragraph> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(label-\<gtr\>path <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_label> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(go-to-label <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|go_to_label> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cursor-accessible?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cursor_is_accessible> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(cursor-show-if-hidden)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_cursor_if_hidden> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(select-all)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|select_all> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(select-line)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|select_line> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(select-from-cursor)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|select_from_cursor> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(select-from-cursor-if-active)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|select_from_cursor_if_active> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(select-from-keyboard <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|select_from_keyboard> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(select-from-shift-keyboard)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|select_from_shift_keyboard> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(select-enlarge)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|select_enlarge> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(select-enlarge-environmental)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|select_enlarge_environmental> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(selection-active-any?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_active_any> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(selection-active-normal?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_active_normal> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(selection-active-table?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_active_table> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(selection-active-small?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_active_small> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(selection-active-enlarging?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_active_enlarging> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(selection-set-start)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_set_start> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(selection-set-end)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_set_end> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(selection-get-start)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_get_start> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(selection-get-end)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_get_end> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(selection-get-start*)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_var_get_start> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(selection-get-end*)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_var_get_end> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(selection-path)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_get_path> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(selection-set <scm-arg|path> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_set_paths> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(selection-set-range-set <scm-arg|array_path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_set_range_set> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clipboard-set <scm-arg|string> <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_set> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clipboard-get <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_get> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(cpp-clipboard-copy <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_copy> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-clipboard-cut <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_cut> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clipboard-cut-at <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cut> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clipboard-cut-between <scm-arg|path> <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cut> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cpp-clipboard-paste <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_paste> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(selection-move)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_move> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clipboard-clear <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_clear> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(selection-cancel)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_cancel> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clipboard-set-import <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_set_import> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clipboard-set-export <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_set_export> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clipboard-get-import)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_get_import> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(clipboard-get-export)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|selection_get_export> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(set-manual-focus-path <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|manual_focus_set> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-manual-focus-path)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|manual_focus_get> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(get-focus-path)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|focus_get> which returns <scm|path>.
  </explain>

  <\explain>
    <scm|(set-alt-selection <scm-arg|string> <scm-arg|array_path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_alt_selection> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(get-alt-selection <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_alt_selection> which returns <scm|array_path>.
  </explain>

  <\explain>
    <scm|(cancel-alt-selection <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cancel_alt_selection> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cancel-alt-selections)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cancel_alt_selections> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clear-undo-history)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|clear_undo_history> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(commit-changes)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|end_editing> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(start-slave <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|start_slave> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(mark-start <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mark_start> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(mark-end <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mark_end> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(mark-cancel <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|mark_cancel> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(remove-undo-mark)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|remove_undo_mark> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(add-undo-mark)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|add_undo_mark> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(unredoable-undo)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|unredoable_undo> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(undo-possibilities)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|undo_possibilities> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(undo <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|undo> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(redo-possibilities)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|redo_possibilities> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(redo <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|redo> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-history)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_history> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(archive-state)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|archive_state> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(start-editing)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|start_editing> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(end-editing)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|end_editing> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(cancel-editing)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|cancel_editing> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(in-graphics?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|inside_graphics> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(get-graphical-x)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_x> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(get-graphical-y)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_y> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(get-graphical-pixel)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_pixel> which returns <scm|double>.
  </explain>

  <\explain>
    <scm|(get-graphical-object)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_graphical_object> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(set-graphical-object <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_graphical_object> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(invalidate-graphical-object)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|invalidate_graphical_object> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(graphical-select <scm-arg|double> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|graphical_select> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(graphical-select-area <scm-arg|double> <scm-arg|double> <scm-arg|double> <scm-arg|double>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|graphical_select> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(in-normal-mode?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|in_normal_mode> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(in-search-mode?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|in_search_mode> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(in-replace-mode?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|in_replace_mode> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(in-spell-mode?)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|in_spell_mode> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(search-start <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_start> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(search-button-next)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|search_button_next> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(replace-start <scm-arg|string> <scm-arg|string> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|replace_start> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(spell-start)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_start> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(spell-replace <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|spell_replace> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(session-complete-command <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|session_complete_command> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(custom-complete <scm-arg|tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|custom_complete> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(keyboard-focus-on <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|keyboard_focus_on> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(view-set-property <scm-arg|scheme_tree> <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|set_property> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(view-get-property <scm-arg|scheme_tree>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_property> which returns <scm|scheme_tree>.
  </explain>

  <\explain>
    <scm|(get-window-width)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_window_width> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-window-height)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_window_height> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-window-x)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_window_x> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-window-y)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_window_y> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-canvas-x)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_canvas_x> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-canvas-y)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_canvas_y> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-scroll-x)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_scroll_x> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(get-scroll-y)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_scroll_y> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(clear-buffer)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|clear_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(tex-buffer)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|tex_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(clear-local-info)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|clear_local_info> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(refresh-window)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|invalidate_all> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(update-forced)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|typeset_forced> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(update-path <scm-arg|path>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|typeset_invalidate> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(update-current-buffer)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|typeset_invalidate_all> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(update-players <scm-arg|path> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|typeset_invalidate_players> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(generate-all-aux)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|generate_aux> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(generate-aux <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|generate_aux> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(notify-page-change)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|notify_page_change> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(notify-change <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|notify_change> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(notified-change? <scm-arg|int>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|has_changed> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(get-metadata <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|get_metadata> which returns <scm|string>.
  </explain>

  <\explain>
    <scm|(cpp-nr-pages)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|nr_pages> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(print-to-file <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|print_to_file> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(print-pages-to-file <scm-arg|url> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|print_to_file> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(print)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|print_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(print-pages <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|print_buffer> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(print-snippet <scm-arg|url> <scm-arg|content> <scm-arg|bool>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|print_snippet> which returns <scm|array_int>.
  </explain>

  <\explain>
    <scm|(graphics-file-to-clipboard <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|graphics_file_to_clipboard> which returns <scm|bool>.
  </explain>

  <\explain>
    <scm|(export-postscript <scm-arg|url>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|export_ps> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(export-pages-postscript <scm-arg|url> <scm-arg|string> <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|export_ps> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(footer-eval <scm-arg|string>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|footer_eval> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(texmacs-exec <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|texmacs_exec> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(texmacs-exec* <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|var_texmacs_exec> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(texmacs-expand <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|exec_texmacs> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(verbatim-expand <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|exec_verbatim> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(latex-expand <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|exec_latex> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(html-expand <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|exec_html> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(animate-checkout <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|checkout_animation> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(animate-commit <scm-arg|content>)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|commit_animation> which returns <scm|tree>.
  </explain>

  <\explain>
    <scm|(idle-time)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|idle_time> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(change-time)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|change_time> which returns <scm|int>.
  </explain>

  <\explain>
    <scm|(menu-before-action)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|before_menu_action> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(menu-after-action)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|after_menu_action> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(update-menus)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|update_menus> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-tree)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_tree> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-box)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_box> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-env)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_env> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-path)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_path> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-cursor)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_cursor> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-selection)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_selection> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(show-meminfo)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|show_meminfo> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(edit-special)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|edit_special> which returns <scm|void>.
  </explain>

  <\explain>
    <scm|(edit-test)> <explain-synopsis|no synopsis>
  <|explain>
    Calls the <c++> function <cpp|edit_test> which returns <scm|void>.
  </explain>

  <\the-index|idx>
    <index+1|<with|mode|src|color|blue|font-family|ss|action>|<pageref|auto-15>>

    <index+1|<with|font-family|tt|language|verbatim|color|brown|article>|<pageref|auto-8>>

    <index+1*|<with|font-family|ss|Edit>>

    <index+2*|<with|font-family|ss|Edit>|<with|font-family|ss|Preferences>>

    <index+3|<with|font-family|ss|Edit>|<with|font-family|ss|Preferences>|<with|font-family|ss|Security>|<pageref|auto-18>>

    <index+1|<with|mode|src|color|blue|font-family|ss|extern>|<pageref|auto-17>>

    <index+1|<with|font-family|ss|File>|<pageref|auto-4>, <pageref|auto-28>>

    <index+2|<with|font-family|ss|File>|<with|font-family|ss|Export>|<pageref|auto-39>>

    <index+2|<with|font-family|ss|File>|<with|font-family|ss|Import>|<pageref|auto-40>>

    <index+2|<with|font-family|ss|File>|<with|font-family|ss|Load>|<pageref|auto-27>>

    <index+1*|<with|font-family|ss|Help>>

    <index+2|<with|font-family|ss|Help>|<with|font-family|ss|Scheme extensions>|<pageref|auto-2>>

    <index+1|<with|font-family|ss|Insert>|<pageref|auto-7>>

    <index+2*|<with|font-family|ss|Insert>|<with|font-family|ss|Session>>

    <index+3|<with|font-family|ss|Insert>|<with|font-family|ss|Session>|<with|font-family|ss|Scheme>|<pageref|auto-11>>
  </the-index>
</body>

<\initial>
  <\collection>
    <associate|page-medium|paper>
  </collection>
</initial>

<\references>
  <\collection>
    <associate|auto-1|<tuple|1|9|MoganScheme.en.tm>>
    <associate|auto-10|<tuple|<with|font-family|<quote|tt>|language|<quote|verbatim>|color|<quote|brown>|article>|12|MoganScheme.en.tm>>
    <associate|auto-100|<tuple|6.4|54|MoganScheme.en.tm>>
    <associate|auto-101|<tuple|6.4.1|55|MoganScheme.en.tm>>
    <associate|auto-102|<tuple|6.5|56|MoganScheme.en.tm>>
    <associate|auto-103|<tuple|6.6|57|MoganScheme.en.tm>>
    <associate|auto-104|<tuple|6.6.1|57|MoganScheme.en.tm>>
    <associate|auto-105|<tuple|6.6.2|57|MoganScheme.en.tm>>
    <associate|auto-106|<tuple|6.6.3|58|MoganScheme.en.tm>>
    <associate|auto-107|<tuple|6.6.4|59|MoganScheme.en.tm>>
    <associate|auto-108|<tuple|6.7|59|MoganScheme.en.tm>>
    <associate|auto-109|<tuple|7|63|MoganScheme.en.tm>>
    <associate|auto-11|<tuple|<with|font-family|<quote|tt>|language|<quote|verbatim>|color|<quote|brown>|article>|12|MoganScheme.en.tm>>
    <associate|auto-110|<tuple|7.1|63|MoganScheme.en.tm>>
    <associate|auto-111|<tuple|7.2|63|MoganScheme.en.tm>>
    <associate|auto-112|<tuple|7.3|64|MoganScheme.en.tm>>
    <associate|auto-113|<tuple|7.3.1|64|MoganScheme.en.tm>>
    <associate|auto-114|<tuple|7.3.2|64|MoganScheme.en.tm>>
    <associate|auto-115|<tuple|7.3.3|65|MoganScheme.en.tm>>
    <associate|auto-116|<tuple|7.3.4|65|MoganScheme.en.tm>>
    <associate|auto-117|<tuple|7.3.5|66|MoganScheme.en.tm>>
    <associate|auto-118|<tuple|8|67|MoganScheme.en.tm>>
    <associate|auto-119|<tuple|8.1|67|MoganScheme.en.tm>>
    <associate|auto-12|<tuple|<with|font-family|<quote|tt>|language|<quote|verbatim>|color|<quote|brown>|article>|12|MoganScheme.en.tm>>
    <associate|auto-120|<tuple|8.1.1|67|MoganScheme.en.tm>>
    <associate|auto-121|<tuple|8.1.2|67|MoganScheme.en.tm>>
    <associate|auto-122|<tuple|8.1.3|67|MoganScheme.en.tm>>
    <associate|auto-123|<tuple|8.1.4|69|MoganScheme.en.tm>>
    <associate|auto-124|<tuple|8.2|69|MoganScheme.en.tm>>
    <associate|auto-125|<tuple|8.2.1|70|MoganScheme.en.tm>>
    <associate|auto-126|<tuple|8.2.2|70|MoganScheme.en.tm>>
    <associate|auto-127|<tuple|8.2.3|71|MoganScheme.en.tm>>
    <associate|auto-128|<tuple|8.2.4|73|MoganScheme.en.tm>>
    <associate|auto-129|<tuple|8.3|73|MoganScheme.en.tm>>
    <associate|auto-13|<tuple|<with|font-series|<quote|medium>|<with|language|<quote|verbatim>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|-c <with|font-shape|<quote|italic>|in> <with|font-shape|<quote|italic>|out>>>>|13|MoganScheme.en.tm>>
    <associate|auto-130|<tuple|8.3.1|73|MoganScheme.en.tm>>
    <associate|auto-131|<tuple|8.3.2|74|MoganScheme.en.tm>>
    <associate|auto-132|<tuple|8.4|75|MoganScheme.en.tm>>
    <associate|auto-133|<tuple|8.4|145|MoganScheme.en.tm>>
    <associate|auto-15|<tuple|<with|mode|<quote|src>|color|<quote|blue>|font-family|<quote|ss>|action>|13|MoganScheme.en.tm>>
    <associate|auto-17|<tuple|<with|mode|<quote|src>|color|<quote|blue>|font-family|<quote|ss>|extern>|13|MoganScheme.en.tm>>
    <associate|auto-18|<tuple|<with|font-series|<quote|medium>|<inline-tag|<with|mode|<quote|src>|color|<quote|blue>|font-family|<quote|ss>|extern><assign|the-label|<quote|<with|mode|<quote|src>|color|<quote|blue>|font-family|<quote|ss>|extern>>><flag|index|dark green|key>|<with|mode|<quote|src>|color|<quote|brown>|font-shape|<quote|italic>|fun>|<with|mode|<quote|src>|color|<quote|brown>|font-shape|<quote|italic>|arg-1>|<with|mode|<quote|src>|color|<quote|brown>|font-shape|<quote|italic>|...>|<with|mode|<quote|src>|color|<quote|brown>|font-shape|<quote|italic>|arg-n>>>|13|MoganScheme.en.tm>>
    <associate|auto-19|<tuple|1.3|13|MoganScheme.en.tm>>
    <associate|auto-2|<tuple|1.1|9|MoganScheme.en.tm>>
    <associate|auto-20|<tuple|1.1|14|MoganScheme.en.tm>>
    <associate|auto-21|<tuple|1.1|14|MoganScheme.en.tm>>
    <associate|auto-22|<tuple|1.1|14|MoganScheme.en.tm>>
    <associate|auto-23|<tuple|<with|mode|<quote|math>|\<bullet\>>|15|MoganScheme.en.tm>>
    <associate|auto-24|<tuple|1.4|15|MoganScheme.en.tm>>
    <associate|auto-25|<tuple|1.5|16|MoganScheme.en.tm>>
    <associate|auto-26|<tuple|1.6|18|MoganScheme.en.tm>>
    <associate|auto-27|<tuple|1.6|18|MoganScheme.en.tm>>
    <associate|auto-28|<tuple|1.6|18|MoganScheme.en.tm>>
    <associate|auto-29|<tuple|1.7|19|MoganScheme.en.tm>>
    <associate|auto-3|<tuple|1.1|9|MoganScheme.en.tm>>
    <associate|auto-30|<tuple|1.7|19|MoganScheme.en.tm>>
    <associate|auto-31|<tuple|1.7|19|MoganScheme.en.tm>>
    <associate|auto-32|<tuple|1.7|20|MoganScheme.en.tm>>
    <associate|auto-33|<tuple|1.7|20|MoganScheme.en.tm>>
    <associate|auto-34|<tuple|1.8|20|MoganScheme.en.tm>>
    <associate|auto-35|<tuple|1.8|21|MoganScheme.en.tm>>
    <associate|auto-36|<tuple|1.8|21|MoganScheme.en.tm>>
    <associate|auto-37|<tuple|1.8|21|MoganScheme.en.tm>>
    <associate|auto-38|<tuple|1.8|21|MoganScheme.en.tm>>
    <associate|auto-39|<tuple|1.8|21|MoganScheme.en.tm>>
    <associate|auto-4|<tuple|3|10|MoganScheme.en.tm>>
    <associate|auto-40|<tuple|1.8|21|MoganScheme.en.tm>>
    <associate|auto-41|<tuple|2|23|MoganScheme.en.tm>>
    <associate|auto-42|<tuple|2.1|23|MoganScheme.en.tm>>
    <associate|auto-43|<tuple|2.2|23|MoganScheme.en.tm>>
    <associate|auto-44|<tuple|2.3|25|MoganScheme.en.tm>>
    <associate|auto-45|<tuple|2.4|26|MoganScheme.en.tm>>
    <associate|auto-46|<tuple|2.5|26|MoganScheme.en.tm>>
    <associate|auto-47|<tuple|2.5|27|MoganScheme.en.tm>>
    <associate|auto-48|<tuple|2.5|28|MoganScheme.en.tm>>
    <associate|auto-49|<tuple|2.6|28|MoganScheme.en.tm>>
    <associate|auto-5|<tuple|1.2|10|MoganScheme.en.tm>>
    <associate|auto-50|<tuple|2.7|29|MoganScheme.en.tm>>
    <associate|auto-51|<tuple|2.8|30|MoganScheme.en.tm>>
    <associate|auto-52|<tuple|2.9|30|MoganScheme.en.tm>>
    <associate|auto-53|<tuple|2.10|30|MoganScheme.en.tm>>
    <associate|auto-54|<tuple|3|31|MoganScheme.en.tm>>
    <associate|auto-55|<tuple|3.1|31|MoganScheme.en.tm>>
    <associate|auto-56|<tuple|3|31|MoganScheme.en.tm>>
    <associate|auto-57|<tuple|3.2|32|MoganScheme.en.tm>>
    <associate|auto-58|<tuple|3.2|33|MoganScheme.en.tm>>
    <associate|auto-59|<tuple|3.2|33|MoganScheme.en.tm>>
    <associate|auto-6|<tuple|1.2|10|MoganScheme.en.tm>>
    <associate|auto-60|<tuple|3.2|35|MoganScheme.en.tm>>
    <associate|auto-61|<tuple|3.1|36|MoganScheme.en.tm>>
    <associate|auto-62|<tuple|3.2|36|MoganScheme.en.tm>>
    <associate|auto-63|<tuple|3.3|37|MoganScheme.en.tm>>
    <associate|auto-64|<tuple|3.3|37|MoganScheme.en.tm>>
    <associate|auto-65|<tuple|3.4|38|MoganScheme.en.tm>>
    <associate|auto-66|<tuple|4|39|MoganScheme.en.tm>>
    <associate|auto-67|<tuple|4.1|39|MoganScheme.en.tm>>
    <associate|auto-68|<tuple|4.2|39|MoganScheme.en.tm>>
    <associate|auto-69|<tuple|1|39|MoganScheme.en.tm>>
    <associate|auto-7|<tuple|1.2|10|MoganScheme.en.tm>>
    <associate|auto-70|<tuple|2|40|MoganScheme.en.tm>>
    <associate|auto-71|<tuple|3|41|MoganScheme.en.tm>>
    <associate|auto-72|<tuple|4.3|41|MoganScheme.en.tm>>
    <associate|auto-73|<tuple|4.4|42|MoganScheme.en.tm>>
    <associate|auto-74|<tuple|5|43|MoganScheme.en.tm>>
    <associate|auto-75|<tuple|5.1|43|MoganScheme.en.tm>>
    <associate|auto-76|<tuple|5.1|43|MoganScheme.en.tm>>
    <associate|auto-77|<tuple|5.1|43|MoganScheme.en.tm>>
    <associate|auto-78|<tuple|MODIFYING|44|MoganScheme.en.tm>>
    <associate|auto-79|<tuple|MODIFYING|44|MoganScheme.en.tm>>
    <associate|auto-8|<tuple|<with|font-family|<quote|tt>|language|<quote|verbatim>|color|<quote|brown>|article>|11|MoganScheme.en.tm>>
    <associate|auto-80|<tuple|MODIFYING|45|MoganScheme.en.tm>>
    <associate|auto-81|<tuple|5.2|45|MoganScheme.en.tm>>
    <associate|auto-82|<tuple|5.2|45|MoganScheme.en.tm>>
    <associate|auto-83|<tuple|5.2|46|MoganScheme.en.tm>>
    <associate|auto-84|<tuple|Grid point|46|MoganScheme.en.tm>>
    <associate|auto-85|<tuple|Grid point|46|MoganScheme.en.tm>>
    <associate|auto-86|<tuple|Grid point|46|MoganScheme.en.tm>>
    <associate|auto-87|<tuple|Grid point|47|MoganScheme.en.tm>>
    <associate|auto-88|<tuple|6|49|MoganScheme.en.tm>>
    <associate|auto-89|<tuple|6.1|49|MoganScheme.en.tm>>
    <associate|auto-9|<tuple|<with|font-family|<quote|tt>|language|<quote|verbatim>|color|<quote|brown>|article>|11|MoganScheme.en.tm>>
    <associate|auto-90|<tuple|6.2|50|MoganScheme.en.tm>>
    <associate|auto-91|<tuple|6.3|50|MoganScheme.en.tm>>
    <associate|auto-92|<tuple|1|50|MoganScheme.en.tm>>
    <associate|auto-93|<tuple|2|51|MoganScheme.en.tm>>
    <associate|auto-94|<tuple|3|52|MoganScheme.en.tm>>
    <associate|auto-95|<tuple|4|52|MoganScheme.en.tm>>
    <associate|auto-96|<tuple|5|53|MoganScheme.en.tm>>
    <associate|auto-97|<tuple|6|53|MoganScheme.en.tm>>
    <associate|auto-98|<tuple|6.1|53|MoganScheme.en.tm>>
    <associate|auto-99|<tuple|6.2|54|MoganScheme.en.tm>>
    <associate|example-edit-formula|<tuple|3.1|31|MoganScheme.en.tm>>
    <associate|example-edit-tree|<tuple|3.2|31|MoganScheme.en.tm>>
    <associate|footnote-1.1|<tuple|1.1|?|MoganScheme.en.tm>>
    <associate|footnote-6.1|<tuple|6.1|49|MoganScheme.en.tm>>
    <associate|footnr-1.1|<tuple|1.1|?|MoganScheme.en.tm>>
    <associate|footnr-6.1|<tuple|6.1|49|MoganScheme.en.tm>>
    <associate|insert-remove-fig|<tuple|3.1|36|MoganScheme.en.tm>>
    <associate|insert-remove-node-fig|<tuple|3.3|37|MoganScheme.en.tm>>
    <associate|markup-scripts|<tuple|<with|font-series|<quote|medium>|<with|language|<quote|verbatim>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|-c <with|font-shape|<quote|italic>|in> <with|font-shape|<quote|italic>|out>>>>|13|MoganScheme.en.tm>>
    <associate|redefinitions|<tuple|1.4|16|MoganScheme.en.tm>>
    <associate|scheme-api-fig|<tuple|1.1|14|MoganScheme.en.tm>>
    <associate|sec-api|<tuple|8|67|MoganScheme.en.tm>>
    <associate|sec-automatic-updates|<tuple|8.3|73|MoganScheme.en.tm>>
    <associate|sec-bibliography|<tuple|7|63|MoganScheme.en.tm>>
    <associate|sec-buffer-api|<tuple|4.2|39|MoganScheme.en.tm>>
    <associate|sec-buffer-intro|<tuple|4.1|39|MoganScheme.en.tm>>
    <associate|sec-edit-fundamental|<tuple|3.2|35|MoganScheme.en.tm>>
    <associate|sec-edit-model|<tuple|3.1|31|MoganScheme.en.tm>>
    <associate|sec-edit-modify|<tuple|3.3|37|MoganScheme.en.tm>>
    <associate|sec-edit-path-navigate|<tuple|3.4|38|MoganScheme.en.tm>>
    <associate|sec-glue-auto-doc|<tuple|8.4|75|MoganScheme.en.tm>>
    <associate|sec-graphics-api-1|<tuple|5.1|43|MoganScheme.en.tm>>
    <associate|sec-graphics-api-2|<tuple|5.2|45|MoganScheme.en.tm>>
    <associate|sec-overview-architecture|<tuple|1.3|13|MoganScheme.en.tm>>
    <associate|sec-overview-content|<tuple|1.7|19|MoganScheme.en.tm>>
    <associate|sec-overview-lazyness|<tuple|1.4|15|MoganScheme.en.tm>>
    <associate|sec-overview-meta|<tuple|1.6|18|MoganScheme.en.tm>>
    <associate|sec-overview-overloading|<tuple|1.5|16|MoganScheme.en.tm>>
    <associate|sec-overview-start|<tuple|1.2|10|MoganScheme.en.tm>>
    <associate|sec-overview-utilities|<tuple|1.8|20|MoganScheme.en.tm>>
    <associate|sec-overview-why|<tuple|1.1|9|MoganScheme.en.tm>>
    <associate|sec-scheme-buffer|<tuple|4|39|MoganScheme.en.tm>>
    <associate|sec-scheme-edit|<tuple|3|31|MoganScheme.en.tm>>
    <associate|sec-scheme-graphics|<tuple|5|43|MoganScheme.en.tm>>
    <associate|sec-scheme-gui|<tuple|6|49|MoganScheme.en.tm>>
    <associate|sec-scheme-gui-advanced|<tuple|6.6|57|MoganScheme.en.tm>>
    <associate|sec-scheme-gui-dialogs|<tuple|6.4|54|MoganScheme.en.tm>>
    <associate|sec-scheme-gui-forms|<tuple|6.5|56|MoganScheme.en.tm>>
    <associate|sec-scheme-gui-intro|<tuple|6.1|49|MoganScheme.en.tm>>
    <associate|sec-scheme-gui-lists-trees|<tuple|6.3|50|MoganScheme.en.tm>>
    <associate|sec-scheme-gui-menus|<tuple|6.2|50|MoganScheme.en.tm>>
    <associate|sec-scheme-gui-reference|<tuple|6.7|59|MoganScheme.en.tm>>
    <associate|sec-scheme-overview|<tuple|1|9|MoganScheme.en.tm>>
    <associate|sec-scheme-utils|<tuple|2|23|MoganScheme.en.tm>>
    <associate|sec-tmfs|<tuple|8.1|67|MoganScheme.en.tm>>
    <associate|sec-tmfs-basics|<tuple|8.1.1|67|MoganScheme.en.tm>>
    <associate|sec-url|<tuple|8.2|69|MoganScheme.en.tm>>
    <associate|sec-utils-abbrevs|<tuple|2.1|23|MoganScheme.en.tm>>
    <associate|sec-utils-convert|<tuple|2.8|30|MoganScheme.en.tm>>
    <associate|sec-utils-dialogue|<tuple|2.6|28|MoganScheme.en.tm>>
    <associate|sec-utils-keyboard|<tuple|2.9|30|MoganScheme.en.tm>>
    <associate|sec-utils-logic|<tuple|2.4|26|MoganScheme.en.tm>>
    <associate|sec-utils-match|<tuple|2.2|23|MoganScheme.en.tm>>
    <associate|sec-utils-menus|<tuple|2.10|30|MoganScheme.en.tm>>
    <associate|sec-utils-overload|<tuple|2.5|26|MoganScheme.en.tm>>
    <associate|sec-utils-preferences|<tuple|2.7|29|MoganScheme.en.tm>>
    <associate|sec-utils-select|<tuple|2.3|25|MoganScheme.en.tm>>
    <associate|sec-view-api|<tuple|4.3|41|MoganScheme.en.tm>>
    <associate|sec-window-api|<tuple|4.4|42|MoganScheme.en.tm>>
    <associate|split-join-fig|<tuple|3.2|36|MoganScheme.en.tm>>
    <associate|tree-active|<tuple|1.7|19|MoganScheme.en.tm>>
    <associate|tree-hybrid|<tuple|1.7|20|MoganScheme.en.tm>>
    <associate|tree-passive|<tuple|1.7|19|MoganScheme.en.tm>>
  </collection>
</references>

<\auxiliary>
  <\collection>
    <\associate|figure>
      <tuple|normal|<surround|<hidden-binding|<tuple>|1.1>||Schematic organization of the <with|font-shape|<quote|small-caps>|Scheme> API.>|<pageref|auto-20>>

      <tuple|normal|<\surround|<hidden-binding|<tuple>|3.1>|>
        Illustration of the operations <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-insert! t i u)>> and <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-remove! t i l)>>. If <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|u>> has length <no-break><specific|screen|<resize|<move|<with|color|<quote|#A0A0FF>|->|-0.3em|>|0em||0em|>><with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|l>>, then we notice that <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-remove! t i l)>> undos the insertion <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-insert! t i u)>>.
      </surround>|<pageref|auto-61>>

      <tuple|normal|<\surround|<hidden-binding|<tuple>|3.2>|>
        Illustration of the operations <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-split! t i j)>> and <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-join! t i)>>. Notice that <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-join! t i)>> undos <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-split! t i j)>>.
      </surround>|<pageref|auto-62>>

      <tuple|normal|<\surround|<hidden-binding|<tuple>|3.3>|>
        Illustration of the operations <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-insert-node! t i u)>> and <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|(tree-remove-node! t i)>>. Notice that the second operation undoes the first one.
      </surround>|<pageref|auto-63>>
    </associate>
    <\associate|idx>
      <tuple|<tuple|<with|font-family|<quote|ss>|Help>|<with|font-family|<quote|ss>|Scheme extensions>>|<pageref|auto-2>>

      <tuple|<tuple|<with|font-family|<quote|ss>|File>>|<pageref|auto-4>>

      <tuple|<tuple|<with|font-family|<quote|ss>|Insert>>|<pageref|auto-7>>

      <tuple|<tuple|<with|font-family|<quote|tt>|language|<quote|verbatim>|color|<quote|brown>|article>>|<pageref|auto-8>>

      <tuple|<tuple|<with|font-family|<quote|ss>|Insert>|<with|font-family|<quote|ss>|Session>|<with|font-family|<quote|ss>|Scheme>>|<pageref|auto-11>>

      <tuple|<tuple|<with|mode|<quote|src>|color|<quote|blue>|font-family|<quote|ss>|action>>|<pageref|auto-15>>

      <tuple|<tuple|<with|mode|<quote|src>|color|<quote|blue>|font-family|<quote|ss>|extern>>|<pageref|auto-17>>

      <tuple|<tuple|<with|font-family|<quote|ss>|Edit>|<with|font-family|<quote|ss>|Preferences>|<with|font-family|<quote|ss>|Security>>|<pageref|auto-18>>

      <tuple|<tuple|<with|font-family|<quote|ss>|File>|<with|font-family|<quote|ss>|Load>>|<pageref|auto-27>>

      <tuple|<tuple|<with|font-family|<quote|ss>|File>>|<pageref|auto-28>>

      <tuple|<tuple|<with|font-family|<quote|ss>|File>|<with|font-family|<quote|ss>|Export>>|<pageref|auto-39>>

      <tuple|<tuple|<with|font-family|<quote|ss>|File>|<with|font-family|<quote|ss>|Import>>|<pageref|auto-40>>
    </associate>
    <\associate|toc>
      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-shape|<quote|small-caps>|1.<space|2spc>Overview of the <with|font-shape|<quote|small-caps>|Scheme> extension language> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-1><vspace|0.5fn>

      1.1.<space|2spc>Why T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> uses <with|font-shape|<quote|small-caps>|Scheme> as its extension language <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-3>

      1.2.<space|2spc>When and how to use <with|font-shape|<quote|small-caps>|Scheme> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-5>

      <with|par-left|<quote|3tab>|User provided initialization files <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-6>>

      <with|par-left|<quote|3tab>|User provided plug-ins <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-9>>

      <with|par-left|<quote|3tab>|Interactive invocation of <with|font-shape|<quote|small-caps>|Scheme> commands <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-10>>

      <with|par-left|<quote|3tab>|Command-line options for executing <with|font-shape|<quote|small-caps>|Scheme> commands <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-12>>

      <with|par-left|<quote|3tab>|Invoking <with|font-shape|<quote|small-caps>|Scheme> scrips from T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> markup <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-13>>

      1.3.<space|2spc>General architecture of the <with|font-shape|<quote|small-caps>|Scheme> API <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-19>

      <with|par-left|<quote|3tab>|Built-in <with|font-shape|<quote|small-caps>|Scheme> commands <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-21>>

      <with|par-left|<quote|3tab>|Extensions to <with|font-shape|<quote|small-caps>|Scheme> and further utilities <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-22>>

      <with|par-left|<quote|3tab>|Internal modules and plug-ins <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-23>>

      1.4.<space|2spc>The module system and lazy definitions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-24>

      1.5.<space|2spc>Contextual overloading <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-25>

      1.6.<space|2spc>Meta information and logical programming <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-26>

      1.7.<space|2spc>The T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> content model <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-29>

      <with|par-left|<quote|3tab>|Passive documents and <with|font-shape|<quote|small-caps>|Scheme> trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-30>>

      <with|par-left|<quote|3tab>|Active documents and C++ trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-31>>

      <with|par-left|<quote|3tab>|A common framework <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-32>>

      <with|par-left|<quote|3tab>|Persistent positions inside trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-33>>

      1.8.<space|2spc>Standard utilities <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-34>

      <with|par-left|<quote|3tab>|Regular expressions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-35>>

      <with|par-left|<quote|3tab>|Dialogues <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-36>>

      <with|par-left|<quote|3tab>|User preferences <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-37>>

      <with|par-left|<quote|3tab>|New data formats and converters <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-38>>

      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-shape|<quote|small-caps>|2.<space|2spc>T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> extensions to <with|font-shape|<quote|small-caps>|Scheme> and utilities> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-41><vspace|0.5fn>

      2.1.<space|2spc>T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> abbreviations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-42>

      2.2.<space|2spc>Matching regular expressions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-43>

      2.3.<space|2spc>Selection of subexpressions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-44>

      2.4.<space|2spc>Logical programming extensions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-45>

      2.5.<space|2spc>Function definition and contextual overloading <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-46>

      <with|par-left|<quote|3tab>|Contextual overloading <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-47>>

      <with|par-left|<quote|3tab>|Other options for function and macro declarations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-48>>

      2.6.<space|2spc>Interactive dialogues <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-49>

      2.7.<space|2spc>User preferences <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-50>

      2.8.<space|2spc>Adding converters <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-51>

      2.9.<space|2spc>Keyboard bindings <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-52>

      2.10.<space|2spc>Defining menus <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-53>

      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-shape|<quote|small-caps>|3.<space|2spc>Programming routines for editing documents> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-54><vspace|0.5fn>

      3.1.<space|2spc>The T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> editing model <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-55>

      <with|par-left|<quote|3tab>|Document fragments <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-56>>

      <with|par-left|<quote|3tab>|Positions inside document fragments <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-57>>

      <with|par-left|<quote|3tab>|Semantic navigation and further utilities <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-58>>

      <with|par-left|<quote|3tab>|A worked example <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-59>>

      3.2.<space|2spc>Fundamental tree modification routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-60>

      3.3.<space|2spc>High level modification routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-64>

      3.4.<space|2spc>Path-based navigation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-65>

      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-shape|<quote|small-caps>|4.<space|2spc>T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> buffer management> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-66><vspace|0.5fn>

      4.1.<space|2spc>Introduction <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-67>

      4.2.<space|2spc>Manipulating T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> buffers <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-68>

      <with|par-left|<quote|3tab>|Basic buffer management <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-69>>

      <with|par-left|<quote|3tab>|Information associated to buffers <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-70>>

      <with|par-left|<quote|3tab>|Synchronizing with the external world <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-71>>

      4.3.<space|2spc>Manipulating T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> views <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-72>

      4.4.<space|2spc>Manipulating T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> windows <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-73>

      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-shape|<quote|small-caps>|5.<space|2spc>Scheme interface for the graphical mode> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-74><vspace|0.5fn>

      5.1.<space|2spc>Low level graphics manipulation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-75>

      <with|par-left|<quote|3tab>|Rationale <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-76>>

      <with|par-left|<quote|3tab>|Definitions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-77>>

      <with|par-left|<quote|3tab>|Manipulation of enhanced trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-78>>

      <with|par-left|<quote|3tab>|Sketch manipulation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-79>>

      <with|par-left|<quote|3tab>|Miscellaneous <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-80>>

      5.2.<space|2spc>Graphics interface between C++ and <with|font-shape|<quote|small-caps>|Scheme> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-81>

      <with|par-left|<quote|3tab>|Rationale <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-82>>

      <with|par-left|<quote|3tab>|Definitions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-83>>

      <with|par-left|<quote|3tab>|Coordinate transformations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-84>>

      <with|par-left|<quote|3tab>|Grid routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-85>>

      <with|par-left|<quote|3tab>|Selection of shapes <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-86>>

      <with|par-left|<quote|3tab>|Computations with shapes <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-87>>

      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-shape|<quote|small-caps>|6.<space|2spc>Extending the graphical user interface> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-88><vspace|0.5fn>

      6.1.<space|2spc>An introduction to widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-89>

      6.2.<space|2spc>Menus and toolbars <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-90>

      6.3.<space|2spc>Displaying lists and trees <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-91>

      <with|par-left|<quote|3tab>|Displaying lists with <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|enum>>, <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|choice>> and <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|choices>> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-92>>

      <with|par-left|<quote|3tab>|Displaying trees with <with|mode|<quote|prog>|prog-language|<quote|scheme>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|tree-widget>> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-93>>

      <with|par-left|<quote|3tab>|Default data roles <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-94>>

      <with|par-left|<quote|3tab>|Using commands <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-95>>

      <with|par-left|<quote|3tab>|Examples <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-96>>

      <with|par-left|<quote|3tab>|An example using data roles <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-97>>

      <with|par-left|<quote|4tab>|An example using the buffer tree <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-98>>

      <with|par-left|<quote|4tab>|An example with the side tools <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-99>>

      6.4.<space|2spc>Dialogs and composite widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-100>

      <with|par-left|<quote|1tab>|6.4.1.<space|2spc>Composite widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-101>>

      6.5.<space|2spc>Forms <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-102>

      6.6.<space|2spc>Containers, glue, refresh and co. <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-103>

      <with|par-left|<quote|1tab>|6.6.1.<space|2spc>Attribute widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-104>>

      <with|par-left|<quote|1tab>|6.6.2.<space|2spc>Container or layout widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-105>>

      <with|par-left|<quote|1tab>|6.6.3.<space|2spc>Glue widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-106>>

      <with|par-left|<quote|1tab>|6.6.4.<space|2spc>Refresh widgets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-107>>

      6.7.<space|2spc>Widgets reference guide <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-108>

      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-shape|<quote|small-caps>|7.<space|2spc>Writing T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> bibliography styles> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-109><vspace|0.5fn>

      7.1.<space|2spc>Introduction <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-110>

      7.2.<space|2spc>Example of a simple bibliography style <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-111>

      7.3.<space|2spc><with|font-shape|<quote|small-caps>|Scheme> functions for writing bibliography styles <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-112>

      <with|par-left|<quote|1tab>|7.3.1.<space|2spc>Style management <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-113>>

      <with|par-left|<quote|1tab>|7.3.2.<space|2spc>Field related routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-114>>

      <with|par-left|<quote|1tab>|7.3.3.<space|2spc>Routines for structuring the output <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-115>>

      <with|par-left|<quote|1tab>|7.3.4.<space|2spc>Routines for textual manipulations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-116>>

      <with|par-left|<quote|1tab>|7.3.5.<space|2spc>Miscellaneous routines <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-117>>

      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-shape|<quote|small-caps>|8.<space|2spc>About the API documentation> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-118><vspace|0.5fn>

      8.1.<space|2spc>The T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> file system <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-119>

      <with|par-left|<quote|1tab>|8.1.1.<space|2spc>A <with|language|<quote|verbatim>|<with|font|<quote|roman>|font-family|<quote|tt>|magnification|<quote|1.06>|tmfs>> primer <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-120>>

      <with|par-left|<quote|1tab>|8.1.2.<space|2spc>The T<rsub|<space|-0.4spc><move|<resize|<with|math-level|<quote|0>|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>> filesystem <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-121>>

      <with|par-left|<quote|1tab>|8.1.3.<space|2spc>Implementing a handler <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-122>>

      <with|par-left|<quote|1tab>|8.1.4.<space|2spc>Installing the handler <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-123>>

      8.2.<space|2spc>The URL system <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-124>

      <with|par-left|<quote|1tab>|8.2.1.<space|2spc>Navigation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-125>>

      <with|par-left|<quote|1tab>|8.2.2.<space|2spc>Predicates <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-126>>

      <with|par-left|<quote|1tab>|8.2.3.<space|2spc>Operations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-127>>

      <with|par-left|<quote|1tab>|8.2.4.<space|2spc>Resolution <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-128>>

      8.3.<space|2spc>Notification and download of updates <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-129>

      <with|par-left|<quote|1tab>|8.3.1.<space|2spc>Operating system specifics <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-130>>

      <with|par-left|<quote|1tab>|8.3.2.<space|2spc>Client side interface <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-131>>

      8.4.<space|2spc>All glue functions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-132>

      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-shape|<quote|small-caps>|Index> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <pageref|auto-133><vspace|0.5fn>
    </associate>
  </collection>
</auxiliary>
