<TMU|<tuple|1.0.4|1.2.9.3-rc2>>

<style|<tuple|book|british|doc|preview-ref|smart-ref|python>>

<\body>
  <\hide-preamble>
    <assign|paragraph-toc|<macro|name|>>
  </hide-preamble>

  <\table-of-contents|toc>
    <vspace*|1fn><with|font-series|bold|math-font-series|bold|1<space|2spc>Getting started> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-1><vspace|0.5fn>

    1.1<space|2spc>Conventions for this manual <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-2>

    1.2<space|2spc>Configuring TeXmacs <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-8>

    1.3<space|2spc>Creating, loading and saving documents <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-10>

    1.4<space|2spc>Printing documents <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-20>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|2<space|2spc>Configuration of T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X<rsub|<space|-0.4spc><move|<resize|M<space|-0.2spc>A<space|-0.4spc>CS||||0.5fn>|0fn|-0.1fn>>> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-26><vspace|0.5fn>

    2.1<space|2spc>User Preferences <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-27>

    2.2<space|2spc>Keyboard configuration <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-69>

    2.3<space|2spc>Notes for users of Cyrillic languages <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-75>

    2.4<space|2spc>Notes for users of oriental languages <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-81>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|3<space|2spc>Writing simple documents> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-85><vspace|0.5fn>

    3.1<space|2spc>Generalities for typing text <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-86>

    3.2<space|2spc>Typing structured text <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-91>

    3.3<space|2spc>Content-based tags <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-112>

    3.4<space|2spc>Lists <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-115>

    3.5<space|2spc>Environments <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-120>

    3.6<space|2spc>Layout issues <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-125>

    3.7<space|2spc>The font selection system <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-131>

    3.8<space|2spc>Mastering the keyboard <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-137>

    <with|par-left|1tab|3.8.1<space|2spc>General prefix rules <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-138>>

    <with|par-left|1tab|3.8.2<space|2spc>Keyboard shortcuts for text mode <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-140>>

    <with|par-left|1tab|3.8.3<space|2spc>Hybrid commands and L<rsup|<space|-0.8spc><move|A|0fn|-0.1fn>><space|-0.2spc>T<rsub|<space|-0.4spc><move|<resize|<with|math-level|0|E>||||0.5fn>|0fn|-0.1fn>><space|-0.4spc>X simulation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-148>>

    <with|par-left|1tab|3.8.4<space|2spc>Dynamic objects <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-149>>

    <with|par-left|1tab|3.8.5<space|2spc>Various useful keyboard shortcuts <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-151>>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|4<space|2spc>Mathematical formulas> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-154><vspace|0.5fn>

    4.1<space|2spc>Incorporating mathematical formulas into documents <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-155>

    4.2<space|2spc>Mathematical symbols <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-163>

    4.3<space|2spc>Main mathematical constructs <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-164>

    4.4<space|2spc>Large delimiters <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-167>

    4.5<space|2spc>Big operators <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-170>

    4.6<space|2spc>Wide accents <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-172>

    4.7<space|2spc>Semantic editing facilities <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-174>

    4.8<space|2spc>Common errors and syntax correction <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-176>

    4.9<space|2spc>Semantics of mathematical symbols <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-188>

    4.10<space|2spc>Customized mathematical semantics <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-190>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|5<space|2spc>Tabular material> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-193><vspace|0.5fn>

    5.1<space|2spc>Creating a table <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-194>

    5.2<space|2spc>Table editing mode <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-203>

    5.3<space|2spc>Alignment <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-205>

    5.4<space|2spc>Size <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-210>

    5.5<space|2spc>Border and background color <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-215>

    5.6<space|2spc>Advanced features <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-219>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|6<space|2spc>Links and automatically generated content> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-221><vspace|0.5fn>

    6.1<space|2spc>Creating labels, links and references <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-222>

    6.2<space|2spc>Inserting images <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-231>

    6.3<space|2spc>Generating a table of contents <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-233>

    6.4<space|2spc>Compiling a bibliography <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-238>

    <with|par-left|2tab|Editing files with bibliographic entries <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-239>>

    <with|par-left|2tab|Inserting citations and compiling bibliographies <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-246>>

    6.5<space|2spc>Generating an index <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-251>

    6.6<space|2spc>Compiling a glossary <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-256>

    6.7<space|2spc>Multiple extractions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-257>

    6.8<space|2spc>Books and multifile documents \ <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-264>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|7<space|2spc>Creating technical pictures> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-268><vspace|0.5fn>

    7.1<space|2spc>Starting a new picture <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-269>

    7.2<space|2spc>Inserting new objects <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-278>

    7.3<space|2spc>Editing objects <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-297>

    7.4<space|2spc>Specification of style properties <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-299>

    7.5<space|2spc>Editing groups of objects <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-309>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|8<space|2spc>Advanced layout features> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-315><vspace|0.5fn>

    8.1<space|2spc>Flows <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-316>

    8.2<space|2spc>Floating objects <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-319>

    8.3<space|2spc>Page breaking <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-326>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|9<space|2spc>Editing tools> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-331><vspace|0.5fn>

    9.1<space|2spc>Cut and paste <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-332>

    9.2<space|2spc>Search and replace <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-344>

    9.3<space|2spc>Spell checking <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-347>

    9.4<space|2spc>Undoing and redoing changes <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-349>

    9.5<space|2spc>Structured editing <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-353>

    9.6<space|2spc>Structured cursor movement <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-357>

    9.7<space|2spc>Structured variants <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-358>

    9.8<space|2spc>Positioning and resizing objects <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-360>

    9.9<space|2spc>Versioning tools <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-364>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|10<space|2spc>Laptop presentations> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-386><vspace|0.5fn>

    10.1<space|2spc>Beamer styles <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-392>

    10.2<space|2spc>Traversal of a presentation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-403>

    10.3<space|2spc>Overlays <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-420>

    10.4<space|2spc>Decorations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-442>

    10.5<space|2spc>Animations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-444>

    10.6<space|2spc>Exporting presentations <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-468>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|11<space|2spc>Using TeXmacs as an interface> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-471><vspace|0.5fn>

    11.1<space|2spc>Creating sessions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-473>

    11.2<space|2spc>Editing sessions <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-484>

    11.3<space|2spc>Selecting the input method <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-493>

    11.4<space|2spc>Scripting languages <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-497>

    11.5<space|2spc>Spreadsheets <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-507>

    11.6<space|2spc>Remote plug-ins <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-514>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|12<space|2spc>Writing your own style files and packages> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-519><vspace|0.5fn>

    12.1<space|2spc>Writing a simple style package <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-524>

    12.2<space|2spc>Rendering of style files and packages <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-533>

    <with|par-left|1tab|12.2.1<space|2spc>ASCII-based or tree-based editing: an intricate choice <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-534>>

    <with|par-left|1tab|12.2.2<space|2spc>Global presentation <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-536>>

    <with|par-left|1tab|12.2.3<space|2spc>Local customization <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-546>>

    12.3<space|2spc>The style-sheet language <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-555>

    <with|par-left|1tab|12.3.1<space|2spc>Assignments <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-560>>

    <with|par-left|1tab|12.3.2<space|2spc>Macro expansion <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-562>>

    <with|par-left|1tab|12.3.3<space|2spc>Formatting primitives <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-564>>

    <with|par-left|1tab|12.3.4<space|2spc>Evaluation control <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-565>>

    <with|par-left|1tab|12.3.5<space|2spc>Control flow <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-567>>

    <with|par-left|1tab|12.3.6<space|2spc>Computational markup <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-569>>

    12.4<space|2spc>Customizing the standard TeXmacs styles <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-574>

    <with|par-left|1tab|12.4.1<space|2spc>Organization of the style files and packages <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-575>>

    <with|par-left|1tab|12.4.2<space|2spc>General principles for customization <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-614>>

    <with|par-left|1tab|12.4.3<space|2spc>Customizing the general layout <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-615>>

    <with|par-left|1tab|12.4.4<space|2spc>Customizing list environments <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-617>>

    <with|par-left|1tab|12.4.5<space|2spc>Customizing numbered textual environments <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-620>>

    <with|par-left|1tab|12.4.6<space|2spc>Customizing sectional tags <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-621>>

    <with|par-left|1tab|12.4.7<space|2spc>Customizing the treatment of title information <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-624>>

    12.5<space|2spc>Further notes and tips <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-625>

    <with|par-left|1tab|12.5.1<space|2spc>Customizing arbitrary tags <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-626>>

    <with|par-left|1tab|12.5.2<space|2spc>Standard utilities <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-627>>

    <vspace*|1fn><with|font-series|bold|math-font-series|bold|13<space|2spc>Customizing TeXmacs> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-630><vspace|0.5fn>

    13.1<space|2spc>Introduction to the Guile extension language <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-632>

    13.2<space|2spc>Writing your own initialization files <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-633>

    13.3<space|2spc>Creating your own dynamic menus <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-634>

    13.4<space|2spc>Creating your own keyboard shortcuts <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-635>

    13.5<space|2spc>Other interesting files <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>> <no-break><pageref|auto-636>
  </table-of-contents>

  <chapter|Getting started>

  <section|Conventions for this manual>

  <paragraph*|Menu entries>

  Throughout the <TeXmacs> manual, menu entries will be typeset using a <em|sans serif> font, like in <menu|Document>, <menu|File|Load> or <menu|Format|Font shape|Italic>.

  <paragraph*|Keyboard modifiers>

  <TeXmacs> makes use of the following keyboard modifiers:

  <\description>
    <item*|<prefix|S->>For shift key combinations.

    <item*|<prefix|C->>For control key combinations.

    <item*|<prefix|A->>For alternate key combinations.

    <item*|<prefix|M->>For meta key combinations.
  </description>

  For instance, <key*|M-S-x> stands for the action which consists of simultaneously pressing the three keys <prefix|M->, <prefix|S-> and <key|x>.

  The actual keyboard modifier keys depend on your system as indicated in the following table

  <\big-table>
    \;

    <descriptive-table|<tformat|<cwith|1|-1|3|3|cell-lborder|1ln>|<cwith|1|-1|1|-1|cell-row-span|1>|<cwith|1|-1|1|-1|cell-col-span|1>|<cwith|1|-1|1|-1|cell-bsep|3spc>|<cwith|1|-1|1|-1|cell-tsep|3sep>|<cwith|1|1|1|-1|cell-bsep|1spc>|<cwith|2|-1|1|-1|cell-bsep|2sep>|<cwith|1|-1|1|-1|cell-halign|c>|<cwith|1|-1|1|-1|cell-valign|c>|<cwith|1|-1|1|-1|cell-hyphen|n>|<table|<row|<cell|>|<cell|<key*|C->>|<cell|<key*|A->>|<cell|<key*|M->>>|<row|<cell|<name|Windows> keyboard>|<cell|<render-key|Ctrl>>|<cell|left <render-key|Alt> >|<cell|<render-key|<math|<shift|<draw-over|<phantom|ihj>|<with|gr-frame|<tuple|scale|0.707111cm|<tuple|0.5gw|0.415159gh>>|gr-mode|<tuple|group-edit|move>|gr-fill-color|black|gr-color|white|gr-snap|<tuple|control point|grid point|grid curve point|curve-grid intersection|curve-curve intersection|text border point|text border>|magnify|0.707106780759852|<graphics|<with|fill-color|black|<cline|<point|-0.190551|-0.0360167>|<point|0.149110332054505|-0.126306389734092>|<point|0.151690038364863|0.212495039026326>|<point|-0.190550998809366|0.148862283370816>>>|<with|color|white|fill-color|black|<with|color|white|fill-color|black|<line|<point|-0.193989980156105|0.049973520664109>|<point|0.145671135070777|0.0525532105172642>>>>|<with|color|white|fill-color|black|<line|<point|-0.0529667|0.176379>|<point|-0.0521067601534595|-0.072132557216563>>>>>|0cm>||2ln>>><math|><math|>>>|<row|<cell|<name|Apple> keyboard>|<cell|<render-key|<with|font-family|ss|^<small|<with|font-family|ss| Control>>>>>|<cell|<render-key|<with|font-family|ss|\<option key\><small|<with|font-family|ss| Option>>>>>|<cell|<render-key|<with|font-family|ss|<small|\<place of interest sign\> Command>>>>>>>>
  <|big-table>
    Actual modifier keys on common platforms.
  </big-table>

  <paragraph*|Keyboard shortcuts>

  Some common keyboard prefixes are detailed in the <smart-ref|section:general_prefix_rules>.

  Keyboard shortcuts are obtained by pressing several keys or “modified keys” in succession. For instance, the shortcut <key|- \<gtr\>> corresponds on first pressing the <key|-> key and then the key <key|\<gtr\>>. Inside mathematical formulas, this shortcut inserts the arrow <math|<op|\<rightarrow\>>>. Similarly, the shortcut <key*|C-x C-f> consists of first pressing the keys <prefix|C-> and <key|x> together, and next pressing the keys <prefix|C-> and <key|f> again together. In the <name|Emacs> “look and feel”, this shortcut enables you to open a new file.

  Notice that the <TeXmacs> menus and keyboard behavior are <em|contextual>, <abbr|i.e.> they depend on the current mode (i.e. text mode or “math mode”), the current language and the position of the cursor inside your document. For instance, inside math mode, you have special keyboard shortcuts which are handy for typing mathematical formulas, but which are useless in text mode.

  <paragraph*|Special keys>

  On some platforms, some special keys such as the Return key are depicted by short glyphs. Below follows the table with all such special keys and there meaning.

  <\big-table|<descriptive-table|<tformat|<cwith|1|-1|3|3|cell-lborder|1ln>|<cwith|1|-1|1|-1|cell-halign|l>|<cwith|1|-1|1|-1|cell-row-span|1>|<cwith|1|-1|1|-1|cell-col-span|1>|<cwith|7|11|1|1|cell-lborder|1ln>|<cwith|7|11|1|2|cell-halign|l>|<cwith|7|11|1|2|cell-row-span|1>|<cwith|7|11|1|2|cell-col-span|1>|<table|<row|<cell|Key>|<cell|Meaning>|<cell|Key>|<cell|Meaning>>|<row|<cell|<key*|S->>|<cell|Shift modifier>|<cell|<key*|left>>|<cell|Cursor left>>|<row|<cell|<key*|capslock>>|<cell|Caps lock>|<cell|<key*|right>>|<cell|Cursor right>>|<row|<cell|<key*|C->>|<cell|Control modifier>|<cell|<key*|up>>|<cell|Cursor up>>|<row|<cell|<key*|A->>|<cell|Alternate modifier>|<cell|<key*|down>>|<cell|Cursor down>>|<row|<cell|<key*|M->>|<cell|Meta modifier>|<cell|<key*|home>>|<cell|Home>>|<row|<cell|<key*|return>>|<cell|Return>|<cell|<key*|end>>|<cell|End>>|<row|<cell|<key*|delete>>|<cell|Forward delete>|<cell|<key*|pageup>>|<cell|Page up>>|<row|<cell|<key*|backspace>>|<cell|Backspace>|<cell|<key*|pagedown>>|<cell|Page down>>|<row|<cell|<key*|escape>>|<cell|Escape>|<cell|<key*|space>>|<cell|Space>>|<row|<cell|<key*|tab>>|<cell|Tab>|<cell|>|<cell|>>>>>>
    Special keys.
  </big-table>

  <section|Configuring TeXmacs>

  When starting <TeXmacs> for the first time, the program automatically configures itself in a way which it thinks to be most suitable for you. For instance, <TeXmacs> will attempt to determine your systems settings for the language and the paper type of your printer. However, the automatic configuration may sometimes fail or you may want to use an alternative configuration. In that case, you should go to the <menu|Edit|Preferences> menu and specify your preferences.

  In particular, we recommend you to configure the desired “look and feel” of <TeXmacs>. By default, we use a native look and feel, which will ensure that keyboard shortcuts and menu layout are similar to other applications on your system. But we also provide an <name|Emacs> look and feel, which ensures a limited compatibility of the <TeXmacs> keyboard shortcuts with those of <name|Emacs>.

  <section|Creating, loading and saving documents>

  When launching <TeXmacs> without any command line options, the editor automatically creates a new document for you. You may also create a new document yourself using <menu|File|New>. Newly created documents do not yet carry a name. In order to give them a name, you should click on <menu|File|Save as>. We recommend you to give documents a name immediately after their creation; this will avoid you to loose documents.

  It is also recommended to specify the global settings for your document when necessary. First of all, you may specify a document style like article, book or seminar using <menu|Document|Style>. If you write documents in several languages, then you may want to specify the language of your document using <menu|Document|Language>. Similarly, you may specify a paper type using <menu|Document|Page|Format|Page type>.

  For newly started documents, the style and page size can also be specified in the <menu|Focus> menu or buttons on the <em|focus toolbar>. In general, the focus menu and toolbar are useful for <strong|typing structured text> (<smart-ref|section:typing_structured_text>) , and their contents will be highly dependent on the current context.

  After modifying your document, you may save it using <menu|File|Save>. Old documents can be retrieved using <menu|File|Load>. \ Notice that you can edit several documents in the same window using <TeXmacs>; you can switch between different <em|buffers> using <menu|Go>.

  <section|Printing documents>

  You can also print to a postscript file using <menu|File|Print|Print buffer to file> (in which case the default printer settings are used for creating the output) or <menu|File|Export> (in which case the printer settings are ignored). The recommended format for printing to a file is <name|Pdf>. <TeXmacs> also supports the older <name|Postscript> format.

  When adequately configuring <TeXmacs>, the editor is guaranteed to be <em|wysiwyg>: the result after printing out is exactly what you see on your screen. In order to obtain full wysiwygness, you should in particular select <verbatim|paper> for <menu|Document|Page|Format|Page rendering> and <menu|Document|Page|Margins|Same screen margins as on paper>. You should also make sure that the characters on your screen use the same number of dots per inch as your printer. This rendering precision of the characters may be changed using <menu|File|Page setup|Printer dpi>. Currently, minor typesetting changes may occur when changing the dpi, which may globally affect the document through line and page breaking.

  <chapter|Configuration of <TeXmacs>>

  <section|User Preferences>

  For an optimal typing experience, you may wish to configure <TeXmacs> in a way which suits your needs best. This can be done from within the <menu|Edit|Preferences> menu. Most importantly, you should choose a “look and feel” in <menu|Edit|Preferences|Look and feel>. This will enable you for instance to let the keyboard shortcuts used by <TeXmacs> be similar to what you are used to in other applications.

  The following user preferences are available:

  <\description>
    <item*|<menu|Look and feel>><label|preferences:look-and-feel>This preference controls the general “look and feel” of <TeXmacs>, and mainly affects the behaviour of the keyboard. The <menu|default> look and feel depends on your system (<menu|Gnome>, <menu|KDE> or <menu|Emacs> under <name|Linux>, <menu|Mac OS> under <name|Mac OS>, and <menu|Windows> under <name|Windows>). The <menu|Emacs> look and feel can be used as an alternative on all systems; it has been the default for all <TeXmacs> versions prior to<nbsp>1.0.7.6.

    More details on the <hlink|keyboard configuration on different systems|man-config-keyboard.en.tm> can be found below.

    <item*|<menu|Interactive questions>>This preference specifies how the user will be prompted for input when required. Questions may either be displayed in separate windows or on the status bar of <TeXmacs>.

    <item*|<menu|Details in menus>>This preference specify the level of detail in the menus. The less frequently used features will be left out when selecting <menu|Simplified menus>.

    <item*|<menu|View>>The preference corresponds to the same viewing options as in the top-level <menu|View><nbsp>menu.

    <item*|<menu|Language>>Your preferred language for the <TeXmacs> interface.

    <item*|<menu|Keyboard>><label|preferences:keyboard>In addition to the general look and feel, a few additional settings determine the behaviour of the keyboard:

    <\itemize>
      <item>The <menu|Cyrillic input method> specifies <hlink|how to type text in Cyrillic languages|man-russian.en.tm>.

      <item>Quotes can be automatically closed according to the <menu|Automatic quotes> style.

      <item>Brackets can be automatically closed by enabling <menu|Automatically close brackets>.
    </itemize>

    <item*|<menu|Printer>>The printer setup can be configured from this submenu.

    <item*|<menu|Security>>In theory, <TeXmacs> documents may embed macros or hyperlinks which give rise to the execution of arbitrary commands (as specified by the author). In practice, this feature may involve a security risk,. Therefore, the <menu|Security> preference allows the user to specify what should be done with untrusted executable code.

    <item*|<menu|Converters>>The behaviour of converters between <TeXmacs> various other data formats may be configured from this menu. For more details, we refer to the <hlink|chapter on compatibility with other formats|../convert/man-convert.en.tm>.

    <item*|<menu|Scripts>>Specify a default scripting language for all external scripts.

    <item*|<menu|Tools>><TeXmacs> features a few additional tools which the user may wish to work under certain circumstances:

    <\itemize>
      <item>A debugging tool for <TeXmacs> developers.

      <item>A linking tool for entering typed hyperlinks and complex annotations.

      <item>A versioning tool for comparing two versions of a <TeXmacs> document.

      <item>A remote connection tool (which currently does not work anymore).
    </itemize>

    <item*|<menu|Autosave>>This preference specifies how often documents will be “autosaved”. Any edits to a file which was not autosaved will be lost on undesired termination of <TeXmacs>. This typically occurs after an erroneous manipulations by the user, certain bugs in <TeXmacs>, or a power problem.

    <item*|<menu|Bibtex command>>The user may specify an alternative to <verbatim|bibtex> for the compilation of bibliographies using <BibTeX>. Notice that recent versions of <TeXmacs> integrate a<nbsp>native alternative tool for the compilation of bibliographies.
  </description>

  <section|Keyboard configuration>

  The behaviour of keyboard inside <TeXmacs> depends on a few user preferences, as specified in the menu <menu|Edit|Preferences>:

  <\itemize>
    <item>The <hlink|<menu|Look and feel>|man-preferences.en.tm#preferences:look-and-feel> determines the main rules for keyboard shortcuts and attempts to make the behaviour as close as possible to the standards for the selected look and feel.

    <item>Some minor customizations are possible via <hlink|<menu|Edit|Preferences|Keyboard>|man-preferences.en.tm#preferences:keyboard>.
  </itemize>

  We will now detail specific issues related to the keyboard configuration on various systems.

  Please refer to the section on <hlink|general conventions|../start/man-conventions.en.tm> for explanations on the way keyboard shortcuts are printed in this manual. For more information on keyboard shortcuts, we refer to the general section on how the <hlink|master the keyboard|../text/keyboard/man-keyboard.en.tm>.

  <paragraph*|Standard conformance>

  <TeXmacs> attempts to be as standard-conformant regarding the various look and feels. However, there are a few general situations in which <TeXmacs> reserves some keyboard shortcuts for the sake of user-friendliness:

  <\itemize>
    <item>The function keys <key|F5>–<key|F12> are reserved for special actions.

    <item>Most standards admit a “principal modifier key” for forming keyboard shortcuts (<prefix|std><nbsp>for your look and feel) and sometimes another modifier key for other shortcuts (<abbr|e.g.> the <key|windows> key under <name|Windows> and <prefix|A-> under <name|Mac OS>). The remaining free modifier (<prefix|cmd> for your look and feel) is reserved for <TeXmacs>.

    <item><TeXmacs> contains many keyboard macros involving one or more modifier keys and the special keys <key|left>, <key|right>, <key|up>, <key|down>, <key|home>, <key|end>, <key|pageup>, <key|pagedown>, <key|backspace>, <key|delete>, <key|space>, <key|tab> and <key|return>. The behaviour of shortcuts of this kind is occasionally non standard.
  </itemize>

  <paragraph*|Potential conflicts>

  The <TeXmacs>-specific shortcuts are rarely in conflict with standard conventions. <space|0.2spc>Nevertheless, in table<nbsp><reference|kbd-conflict-table>, we have displayed some more or less standard shortcuts, which might work in other applications, but which will usually not work inside <TeXmacs>.

  <\big-table|<descriptive-table|<tformat|<cwith|1|-1|1|-1|cell-halign|l>|<cwith|24|24|1|4|cell-halign|l>|<cwith|27|27|1|4|cell-halign|l>|<cwith|6|6|1|4|cell-halign|l>|<cwith|8|8|1|4|cell-halign|l>|<cwith|7|7|3|4|cell-halign|l>|<cwith|7|7|3|4|cell-halign|l>|<cwith|8|8|3|4|cell-halign|l>|<cwith|8|8|3|4|cell-halign|l>|<cwith|11|11|1|4|cell-halign|l>|<table|<row|<cell|Look and feel>|<cell|Shortcut>|<cell|Alternative>|<cell|Meaning>>|<row|<cell|Emacs>|<cell|<key|F10>>|<cell|>|<cell|Show menu bar in window>>|<row|<cell|Emacs>|<cell|<key|M-!>>|<cell|>|<cell|Shell command>>|<row|<cell|Emacs>|<cell|<key|M-'>/<key|M-‘>/<key|M-^>>|<cell|>|<cell|Needed for <TeXmacs> accents>>|<row|<cell|Emacs>|<cell|<key|M-/>/<key|M-\\>/<key|M-:>/<key|M-;>>|<cell|>|<cell|>>|<row|<cell|Emacs>|<cell|<key|M-left>/<key|M-right>>|<cell|<key|C-left>/<key|C-right>>|<cell|Move word back/forward>>|<row|<cell|Emacs>|<cell|<key|M-a>/<key|M-e>>|<cell|<key|C-up>/<key|C-down>>|<cell|Move paragraph back/forward>>|<row|<cell|Emacs>|<cell|<key|M-b>/<key|M-f>>|<cell|<key|C-left>/<key|C-right>>|<cell|Move word back/forward>>|<row|<cell|Emacs>|<cell|<key|M-l>/<key|M-t>>|<cell|>|<cell|Locase/transpose words (not impl.)>>|<row|<cell|Windows>|<cell|<key|F5>>|<cell|>|<cell|Refresh/Switch to next pane>>|<row|<cell|Windows>|<cell|<key|F6>/<key|C-F6>/<key|C-S-F6>>|<cell|>|<cell|Switch to next/previous pane/tab>>|<row|<cell|Windows>|<cell|<key|C-space>>|<cell|>|<cell|Remove formatting>>|<row|<cell|Windows>|<cell|<key|C-tab>>|<cell|>|<cell|Switch to next child window>>|<row|<cell|Windows>|<cell|<key|C-backspace>/<key|C-delete>>|<cell|>|<cell|Delete word>>|<row|<cell|Mac OS>|<cell|<key|C-F5>/<key|C-F6>/<key|C-S-F6>>|<cell|>|<cell|Move focus to toolbar/panels>>|<row|<cell|Mac OS>|<cell|<key|C-F7>>|<cell|>|<cell|Override keyboard access mode>>|<row|<cell|Mac OS>|<cell|<key|F9>/<key|F10>>|<cell|>|<cell|Tile or untile windows>>|<row|<cell|Mac OS>|<cell|<key|F11>/<key|F12>>|<cell|>|<cell|Hide or show windows/dashboard>>|<row|<cell|Mac OS>|<cell|<key|tab>/<key|S-tab>>|<cell|>|<cell|Navigate through controls>>|<row|<cell|Mac OS>|<cell|<key|C-tab>, <key|C-S-tab>>|<cell|>|<cell|Move focus within control groups>>|<row|<cell|Mac OS>|<cell|<key|C-space>/<key|M-C-space>>|<cell|>|<cell|Toggle between input sources>>|<row|<cell|Mac OS>|<cell|<key|C-left>/<key|C-right>>|<cell|<key|structured:move left>/<key|structured:move right>>|<cell|Move one cell left/right in table>>|<row|<cell|Mac OS>|<cell|<key|C-up>/<key|C-down>>|<cell|<key|structured:move up>/<key|structured:move down>>|<cell|Move one cell up/down in table>>|<row|<cell|Mac OS>|<cell|<key|home>/<key|end>>|<cell|<key|M-up>/<key|M-down>>|<cell|Move to start/end of document>>|<row|<cell|Mac OS>|<cell|<key|A-pageup>, <key|C-up>, <key|C-pageup>>|<cell|<key|pageup>>|<cell|Page up>>|<row|<cell|Mac OS>|<cell|<key|A-pagedown>, <key|C-down>, <key|C-pagedown>>|<cell|<key|pagedown>>|<cell|Page down>>|<row|<cell|Mac OS>|<cell|<key|C-a>/<key|C-e>>|<cell|<key|A-up>/<key|A-down>>|<cell|Move to start/end of block>>>>>>
    <label|kbd-conflict-table>Some shortcuts that might work in other applications, but usually not in <TeXmacs>.
  </big-table>

  <paragraph*|System-wide shortcuts which may take precedence>

  In addition to the above standard shortcuts, some system-wide applications may define additional global shortcuts, which take precedence over the <TeXmacs> shortcuts. For instance, under <name|Mac OS X>, the application <name|Spaces> uses the shortcuts <key|C-left>, <key|C-right>, <key|C-up>, <key|C-down>, <key|C-1>, <key|C-2>, <key|C-3> and <key|C-4> to switch between multiple screens.

  One solution to the above problems is to change the problematic global shortcuts in the responsible applications. For instance, <name|Spaces> can be configured to use <prefix|M-A-C-> as a prefix instead of <prefix|C-> (click on the popup menu behind “To switch between spaces” and simultaneously press <prefix|M->, <prefix|A-> and <prefix|C->). Notice that <prefix|fn> is another key which is not used by <TeXmacs>.

  If you cannot or do not want to change the system-wide shortcuts, then you may use the <rigid|<key*|escape>-key> in order to produce equivalents for the modifier keys <prefix|M->, <prefix|A-> and <prefix|C->. For instance, under <name|Mac OS>, <prefix|C-> is equivalent to <key*|escape escape>. Hence, the <TeXmacs> shortcut <key|C-right> can also be obtained by typing <key*|escape escape right>, which may coexist with the <name|Spaces> shortcut <key|C-right>. Table<nbsp><reference|kbd-escape-table> shows the modifier key combinations which can be obtained using <key*|escape>.

  <\big-table|<descriptive-table|<tformat|<table|<row|<cell|Shortcut>|<cell|Modifier keys>>|<row|<cell|<key*|escape>>|<cell|<key|escape>>>|<row|<cell|<key*|escape escape>>|<cell|<key|escape escape>>>|<row|<cell|<key*|escape escape escape>>|<cell|<key|escape escape escape>>>|<row|<cell|<key*|S-escape>>|<cell|<key|S-escape>>>|<row|<cell|<key*|S-escape S-escape><space|1em>>|<cell|<key|S-escape S-escape>>>|<row|<cell|<key*|S-escape S-escape S-escape>>|<cell|<key|S-escape S-escape S-escape>>>>>>>
    <label|kbd-escape-table>Keyboard shortcuts for modifier keys or modifier key combinations.
  </big-table>

  <paragraph*|User-defined shortcuts>

  If, for some reason, the standard <TeXmacs> shortcuts are not sufficient or suitable for you, then you may <hlink|define your own shortcuts|../scheme/man-custom-keyboard.en.tm>.

  <section|Notes for users of Cyrillic languages>

  In order to type Russian (and similarly for other Cyrillic languages) text, you have several options:

  <\itemize>
    <item>Select Russian as your default language in <menu|Edit|Preferences|Language|Russian>. If \ <TeXmacs> starts with Russian menus, then this is done automatically if the Russian locale is set.

    <item>Select Russian for an entire document using <menu|Document|Language|Russian>.

    <item>Select Russian for a portion of text in another document using <menu|Format|Language|Russian>.
  </itemize>

  If your X server uses the <name|Xkb> extension, and is instructed to switch between the Latin and Russian keyboard modes, you need not do anything special. Just switch your keyboard to the Russian mode, and go ahead. All the software needed for this is included in modern Linux distributions, and the <name|Xkb> extension is enabled by default in <verbatim|XF86Config>. With the <name|Xkb> extension, keysyms are 2-byte, and Russian letters are at 0x6??. The keyboard is configured by <verbatim|setxkbmap>. When X starts, it issues this command with the system-wide <verbatim|Xkbmap> file (usually living in <verbatim|/etc/X11/xinit>), if it exists; and then with the user's <verbatim|~/.Xkbmap>, if it exists. A typical <verbatim|~/.Xkbmap> may look like

  <verbatim| \ \ \ ru basic grp:shift_toggle>

  This means that the keyboard mode is toggled by <render-key|l-shift r-shift>. Other popular choices are <prefix|C-S-> or <prefix|A-C->, see <verbatim|/usr/X11R6/lib/X11/xkb/> for more details. This is the preferred keyboard setup for modern Linux systems, if you plan to use Russian often.

  In older Linux systems, the <name|Xkb> extension is often disabled. Keysyms are 1-byte, and are configured by <verbatim|xmodmap>. When X starts, it issues this command with the system-wide <verbatim|Xmodmap> (usually living in <verbatim|/etc/X11/xinit>), if it exists; and then with the user's <verbatim|~/.Xmodmap>, if it exists. You can configure the mode toggling key combination, and use a 1-byte Russian encoding (such as koi8-r) in the Russian mode. It is easier to download the package <verbatim|xruskb>, and just run

  <verbatim| \ \ \ xrus jcuken-koi8>

  at the beginning of your X session. This sets the layout <verbatim|jcuken> (see below) and the encoding koi8-r for your keyboard in the Russian mode. If you use such keyboard setup, you should select Options <math|\<rightarrow\>> international keyboard <math|\<rightarrow\>> russian <math|\<rightarrow\>> koi8-r.

  It is also possible to use the Windows <verbatim|cp1251> encoding instead of <verbatim|koi8-r>, though this is rarely done in UNIX. If you do use <verbatim|xrus jcuken-cp1251>, select <verbatim|cp1251> instead of <verbatim|koi8-r>.

  All the methods described above require some special actions to “russify” the keyboard. This is not difficult, see the Cyrillic-HOWTO or, better, its updated version

  <verbatim|http://www.inp.nsk.su/~baldin/Cyrillic-HOWTO-russian/Cyrillic-HOWTO-russian.html>

  Also, all of the above methods globally affect all X applications: text editors (<name|Emacs>, <name|Nedit>, <name|Kedit>...), xterms, <TeXmacs> etc.

  If you need to type Russian only once, or very rarely, a proper keyboard setup may be more trouble than it's worth. For the benefit of such occasional users, <TeXmacs> has methods of Russian input which require no preliminary work. Naturally, such methods affect only <TeXmacs>, and no other application.

  The simplest way to type some Russian on the standard US-style keyboard with no software setup is to select <menu|Edit|Preferences|Keyboard|Cyrillic input method|translit>. Then, typing a Latin letter will produce “the most similar” Russian one. In order to get some Russian letters, you have to type 2- or 3-letter combinations:<vspace|0.5fn>

  <big-table|<descriptive-table|<tformat|<cwith|2|11|1|1|cell-halign|l>|<cwith|2|11|2|2|cell-halign|l>|<cwith|2|11|2|2|cell-halign|c>|<cwith|2|11|4|4|cell-halign|l>|<cwith|2|11|4|4|cell-halign|c>|<table|<row|<cell|Shorthand>|<cell|for>|<cell|Shorthand(s)>|<cell|for>>|<row|<cell|<key|text " e>>|<cell|<with|language|russian|font|cyrillic|ё>>|<cell|<key|accent:umlaut E>>|<cell|<with|language|russian|font|cyrillic|Ё>>>|<row|<cell|<key|y o>>|<cell|<with|language|russian|font|cyrillic|ё>>|<cell|<key|Y o> <key|Y O>>|<cell|<with|language|russian|font|cyrillic|Ё>>>|<row|<cell|<key|z h>>|<cell|<with|language|russian|font|cyrillic|ж>>|<cell|<key|Z h> <key|Z H>>|<cell|<with|language|russian|font|cyrillic|Ж>>>|<row|<cell|<key|j var>>|<cell|<with|language|russian|font|cyrillic|ж>>|<cell|<key|J var>>|<cell|<with|language|russian|font|cyrillic|Ж>>>|<row|<cell|<key|c h>>|<cell|<with|language|russian|font|cyrillic|ч>>|<cell|<key|C h> <key|C H>>|<cell|<with|language|russian|font|cyrillic|Ч>>>|<row|<cell|<key|s h>>|<cell|<with|language|russian|font|cyrillic|ш>>|<cell|<key|S h> <key|S H>>|<cell|<with|language|russian|font|cyrillic|Ш>>>|<row|<cell|<key|s c h>>|<cell|<with|language|russian|font|cyrillic|щ>>|<cell|<key|S c h> <key|S C H>>|<cell|<with|language|russian|font|cyrillic|Щ>>>|<row|<cell|<key|e var>>|<cell|<with|language|russian|font|cyrillic|э>>|<cell|<key|E var>>|<cell|<with|language|russian|font|cyrillic|Э>>>|<row|<cell|<key|y u>>|<cell|<with|language|russian|font|cyrillic|ю>>|<cell|<key|Y u> <key|Y U>>|<cell|<with|language|russian|font|cyrillic|Ю>>>|<row|<cell|<key|y a>>|<cell|<with|language|russian|font|cyrillic|я>>|<cell|<key|Y a> <key|Y A>>|<cell|<with|language|russian|font|cyrillic|Я>>>>>>|Typing Cyrillic text on a Roman keyboard.>

  If you want to get, e.g., “<with|language|russian|font|cyrillic|сх>”, and not “<with|language|russian|font|cyrillic|ш>”, you have to type <key|s / h>. Of course, the choice of “optimal” mapping of Latin letters to Russian ones in not unique. You can investigate the mapping supplied with <TeXmacs> and, if you don't like something, override it in your <verbatim|~/.TeXmacs/progs/my-init-texmacs.scm>.

  If you select <verbatim|jcuken> instead of <verbatim|translit>, you get the “official” Russian typewriter layout. It is so called because the keys “qwerty” produce “<with|language|russian|<with|font|cyrillic|йцукен>”>. This input method is most useful when you have a Russian-made keyboard, which has additional Russian letters written on the key caps in red, in the <verbatim|jcuken> layout (a similar effect can be achieved by attaching transparent stickers with red Russian letters to caps of a US-style keyboard). It is also useful if you are an experienced Russian typist, and your fingers remember this layout.

  Those who have no Russian letters indicated at the key caps often prefer the yawerty layout, where the keys “qwerty” produce “<with|language|russian|font|cyrillic|яверты”>. Each Latin letter is mapped into a “similar” Russian one; some additional Russian letters are produced by <prefix|S->-digits. <TeXmacs> comes with a slightly modified yawerty layout, because it does not redefine the keys <key|$>, <render-key|£>, <key|\\>, which are important for <TeXmacs>, are not redefined. The corresponding Russian letters are produced by some <prefix|S->-digit combinations instead.

  <section|Notes for users of oriental languages>

  In order to type oriental languages, you first have to start a conversion server which can be used in combination with the X input method and set the environment variables accordingly. For instance, in the case of Japanese, one typically has to execute the following shell commands:

  <\shell-code>
    kinput2 &

    export LANG="ja_JP.eucJP"

    export LC_ALL="ja_JP.eucJP"

    export XMODIFIERS="@im=kinput2"
  </shell-code>

  You also have to install Japanese fonts. For instance, you may download the <name|Ipag> fonts <verbatim|ipam.ttf>, <verbatim|ipag.ttf>, <verbatim|ipamp.ttf>, <verbatim|ipagm.ttf> and <verbatim|ipagui.ttf> and copy them to

  <verbatim| \ \ \ ~/.TeXmacs/fonts/truetype>

  After doing this, you may launch <TeXmacs> using

  <\shell-code>
    texmacs --delete-font-cache
  </shell-code>

  and select <menu|Japanese> from the <icon|tm_language.xpm> icon on the first icon bar. If everything went allright, the menus should now show up in Japanese and the current document is also in Japanese. Notice that you may also select Japanese as your default language in <menu|Edit|Preferences|Language|Japanese>. It is also possible to select Japanese for a portion of text in a document using <menu|Format|Language|Japanese>.

  Inside a Japanese portion of text, and depending on your input method, you usually have to type<nbsp><key|S-space> in order to start Kana to Kanji conversion. A small window shows up where you can type phonetic characters and use <key|space> in order to start conversion to Kanji characters. When pressing <shortcut|(kbd-return)>, the text is inserted into the main <TeXmacs> window. Pressing <key|S-space> once again returns to the classical <TeXmacs> input method.<chapter|Writing simple documents>

  <section|Generalities for typing text>

  The usual English characters and punctuation symbols can easily be obtained on most keyboards. Most modern system also implement standard shortcuts in order to obtain accented characters and other special symbols. If necessary, accented characters can also be obtained using the <prefix|accent> prefix. For instance, “é” is obtained by typing <key|accent:acute e>. Similarly, we obtain “à” via <key|accent:grave a> and so on.<\footnote>
    The key combo <key|Meta ‘> does not work for Mogan <math|\<leqslant\>> v1.2.9, it works fine for Mogan <math|\<geqslant\>> v1.2.9.2.
  </footnote>

  Long words at borders of successive lines are automatically hyphenated. In order to hyphenate foreign languages correctly, you should specify the language of the document in the menu <menu|Document|Language>.

  At the left hand side of the footer, you see the document style, the text properties at the current cursor position. Initially, it displays “generic text roman 10”, which means that you type in text mode using a 10 point roman font and the generic document style. You can change the text properties (font, font size, color) in the <menu|Format> menu. You can also change the text properties of the text you have already typed by selecting a region and then using the <menu|Format> menu. Some text properties can also be changed for all the document with the <menu|Document> menu.

  At the right hand side of the footer, the character or object (like a change in the text properties) just before the cursor is displayed. We also display all environments which are active at the cursor position. This information should help you to orient yourself in the document.

  <section|Typing structured text><label|section:typing_structured_text>

  Usually, long documents have a structure: they are organized in chapters, sections and subsections, they contain different types of text, such as regular text, citations, footnotes, theorems, etc. After selecting a <def-index|document style> in <menu|Document|Style>, <TeXmacs> takes care of specific layout issues, such as numbering of sections, pages, theorems, typesetting citations and footnotes in a nice way and so on.

  Currently, several standard document styles have been implemented: <tmstyle|generic>, <tmstyle|article>, <tmstyle|book>, <tmstyle|letter>, <tmstyle|exam>, <tmstyle|beamer>, <tmstyle|seminar>, <tmstyle|source>. For instance, the article style can be used for writing articles. Besides, there are styles for common journals and special purposes, such as the <TeXmacs> documentation.

  As soon as you have selected a document style, you can organize your text into sections (see <menu|Insert|Section>) and use specific <def-index|environments> (also called <em|tags>). Examples of environments are theorem, proposition, remark and so on (see <menu|Insert|Enunciation>). Other examples are lists of items (see <menu|Insert|Itemize>) or numbered lists (see <menu|Insert|Enumerate>). Further examples of frequently used tags are <markup|strong> (for writing “important” text), <markup|name> (for writing names of persons), etc.

  When you get more acquainted with <TeXmacs>, it is possible to add your own new environments in your own style file. Assume for instance that you often make citations and that you want those to appear in italic, with left and right margins of 1cm. Instead of manually changing the text and paragraph properties each time you make a citation, it is better to create a citation environment. Not only it will be faster to create a new citation when doing so, but it is also possible to systematically change the layout of your citations throughout the document just by changing the definition of the citation environment. The latter situation occurs for instance if you discover <with|font-shape|italic|a posteriori> that you prefer the citations to appear in a smaller font.

  There are a few general editing principles which make it easy to manipulate structured documents using <TeXmacs>. One major concept is the <em|current focus>, which is best illustrated on an example. Assume that we are in the process of entering a classical theorem:

  <\quote-env>
    The following theorem is due to <name|Euler>:

    <\big-envbox>
      <\theorem>
        <small-focus|<math|\<mathe\><rsup|\<mathpi\>*\<mathi\>>=\<um\>1<math-cursor>>>.
      </theorem>
    </big-envbox>
  </quote-env>

  At the position of the cursor, the grey and cyan boxes indicate the active tags: in this case, the cursor is both inside a theorem and a formula. The innermost active tag (the formula <math|\<mathe\><rsup|\<mathpi\>*\<mathi\>>=\<um\>1> in our example) is surrounded by a cyan box and called the <em|current focus>.

  The contents of the <menu|Focus> menu and <em|focus toolbar> (the lowest toolbar) are highly context dependent and determined as a function of the current focus. In our example, the focus toolbar contains a<nbsp>popup menu button <menu|Formula>; when selecting <menu|Equation> in this menu, the text will change into

  <\quote-env>
    The following theorem is due to <name|Euler>:

    <\big-envbox>
      <\theorem>
        \;

        <\big-focus>
          <\equation*>
            \<mathe\><rsup|\<mathpi\>*\<mathi\>>=\<um\>1<math-cursor>.
          </equation*>
        </big-focus>
      </theorem>
    </big-envbox>
  </quote-env>

  Similarly, the arrow buttons on the left hand side of the focus toolbar allow you to jump to similar tags. In this case, they will allow you to quickly traverse all formulas and equations in your document. For more information on <strong|structured editing> (<smart-ref|section:structured_editing>)we refer to the chapter on <strong|editing tools> (<smart-ref|chapter:editing_tools>).

  A second important concept is the <em|current editing mode>. Currently, there are five major modes: text mode, mathematics mode, program mode, graphics mode and source mode. In principle, the current mode can be determined from the current focus, but the mode is likely to change less often than the focus. The <em|mode dependent toolbar> above the focus toolbar contains several buttons which are useful in the current mode. The contents of the <menu|Insert> and <menu|Format> menus are also mode dependent.

  <section|Content-based tags><label|section:content-tags>

  The simplest examples of structure in a text are content-based tags. In <menu|Insert|Content tags> you see a list of them. Content based tags indicate that a given portion of text is of a particular kind or that it serves a specific purpose. For instance, important text should be marked using the <markup|strong> tag. Its default rendering uses a bold type face, like in this <strong|strong text>. However, strong text might be rendered in a different way according to the document style. For instance, strong text may be rendered in a different color on transparencies for presentations. Here follows a short list of the most common content-based tags and their purpose:

  <big-table|<descriptive-table|<tformat|<table|<row|<cell|Tag>|<cell|Example>|<cell|Purpose>>|<row|<cell|<markup|strong>>|<cell|this is <strong|important>>|<cell|Indicate an important region of text>>|<row|<cell|<markup|em>>|<cell|the <em|real> thing>|<cell|Emphasize a region of text>>|<row|<cell|<markup|dfn>>|<cell|A <dfn|gnu> is a horny beast>|<cell|Definition of some concept>>|<row|<cell|<markup|samp>>|<cell|the <samp|ae> ligature æ>|<cell|A sequence of literal characters>>|<row|<cell|<markup|name>>|<cell|the <name|Linux> system>|<cell|The name of a particular thing>>|<row|<cell|<markup|person>>|<cell|I am <name|Joris>>|<cell|The name of a person>>|<row|<cell|<markup|cite*>>|<cell|Melville's <cite*|Moby Dick>>|<cell|A bibliographic citation>>|<row|<cell|<markup|abbr>>|<cell|I work at the <abbr|C.N.R.S.>>|<cell|An abbreviation>>|<row|<cell|<markup|acronym>>|<cell|the <acronym|HTML> format>|<cell|An acronym>>|<row|<cell|<markup|verbatim>>|<cell|the program said <verbatim|hello>>|<cell|Verbatim text like computer program output>>|<row|<cell|<markup|kbd>>|<cell|Please type <kbd|return>>|<cell|Text which should be entered on a keyboard>>|<row|<cell|<markup|code*>>|<cell|<code*|cout \<less\>\<less\> 1+1;> yields <verbatim|2>>|<cell|Code of a computer program>>|<row|<cell|<markup|var>>|<cell|<verbatim|cp <var|src-file> <var|dest-file>>>|<cell|Variables in a computer program>>>>>|Some of the most common content-based tags.>

  <section|Lists>

  Using <menu|Insert|Itemize> you may start an unnumbered list. You may either select a particular tag like <math|\<bullet\>> (bullets), <math|<op|->> (dashes) or <math|<op|\<rightarrow\>>> (arrows) to indicate entries in the list or the default tag. Lists may be <em|nested> inside other tags, like in the following list:

  <\itemize>
    <item>First item.

    <item>Now comes the sublist:

    <\itemize>
      <item>A subitem.

      <item>Another one.
    </itemize>

    <item>A final item.
  </itemize>

  The default tag is rendered in a different way depending on the level of nesting. At the outermost level, we used the <math|\<bullet\>> tag, at the second level <math|<op|\<circ\>>>, and so on. When you are inside a list, notice that pressing <shortcut|(kbd-return)> automatically starts a new item. If you need items which are several paragraphs long, then you may always use <shortcut|(kbd-shift-return)> in order to start a new paragraph.

  Enumerate environments, which are started using <menu|Insert|Enumerate>, behave in a similar way as itemize, except that the items are numbered. Here follows an example of an enumeration which was started using <menu|Insert|Enumerate|Roman>:

  <\enumerate-Roman>
    <item>A first item.

    <item>A second one.

    <item>And a last one.
  </enumerate-Roman>

  The last type of lists are descriptive lists. They are started using <menu|Insert|Description> and allow you to describe a list of concepts:

  <\description>
    <item*|Gnu>A hairy but gentle beast.

    <item*|Gnat>Only lives in a zoo.
  </description>

  <section|Environments>

  In a similar way as content-based tags, environments are used to mark portions of text with a special meaning. However, while <hlink|content-based tags|#section:content-tags> usually enclose small portions of text, environments often enclose portions that are several paragraphs long. Frequently used environments in mathematics are <markup|theorem> and <markup|proof>, like in the example below:

  <\theorem>
    There exist no positive integers <math|a>, <math|b>, <math|c> and <math|n> with <math|n\<geqslant\>3>, such that <math|a<rsup|n>+b<rsup|n>=c<rsup|n>>.
  </theorem>

  <\proof>
    I do not have room here to write the proof down.
  </proof>

  You may enter environments using <menu|Enunciation>, <menu|Prominent> and <menu|Program> under the <menu|Insert> menu. Other environments with a similar rendering as theorems are <markup|proposition>, <markup|lemma>, <markup|corollary>, <markup|axiom>, <markup|definition>. You may use the <markup|dueto> macro (entered using <key|\\ d u e t o return>) in order to specify the person(s) to which the theorem is due, like in

  <\theorem>
    <dueto|Pythagoras>Under nice circumstances, we have <math|a<rsup|2>+b<rsup|2>=c<rsup|2>>.
  </theorem>

  Other frequently used environments with a similar rendering as theorems, but which do not emphasize the enclosed text, are <markup|remark>, <markup|note>, <markup|example>, <markup|warning>, <markup|exercise> and <markup|problem>. The remaining environments <markup|verbatim>, <markup|code>, <markup|quote>, <markup|quotation> and <markup|verse> can be used in order to enter multiparagraph text or code, quotations or poetry.

  <section|Layout issues>

  As a general rule, <TeXmacs> takes care of the layout of your text. Therefore, although we did not want to forbid this possibility, we do not encourage you to typeset your document visually. For instance, you should not insert spaces or blank lines as substitutes for horizontal and vertical spaces between words and lines; instead, additional space should be inserted explicitly using <menu|Insert|Space>. This will make your text more robust in the sense that you will not have to reconsider the layout when performing some minor changes, which affect line or page breaking, or major changes, such as changing the document style.

  Several types of explicit spacing commands have been implemented. First of all, you can insert rigid spaces of given widths and heights. Horizontal spaces do not have a height and are either stretchable or not. The length of a stretchable spaces depends on the way a paragraph is hyphenated. Furthermore, it is possible to insert tabular spaces. Vertical spaces may be inserted either at the start or the end of a paragraph: the additional vertical space between two paragraphs is the maximum of the vertical space after the first one and the vertical space before the second one (contrary to <TeX>, this prevents from superfluous space between two consecutive theorems).

  As to the paragraph layout, the user may specify the paragraph style (justified, left ragged, centered or right ragged), the paragraph margins and the left (resp. right) indentation of the first (resp. last) line of a paragraph. The user also controls the spaces between paragraphs and successive lines in paragraphs.

  You can specify the page layout in the <menu|Document|Page> menu. First of all, you can specify the way pages are displayed on the screen: when selecting “paper” as page type in <menu|Document|Page|Type>, you explicitly see the page breaks. By default, the page type is “papyrus”, which avoids page breaking during the preparation of your document. The “automatic” page type assumes that your paper size is exactly the size of your window. The page margins and text width are specified in <menu|Document|Page|Layout>. Often, it is convenient to reduce the page margins for usage on the screen; this can be done in <menu|Document|Page|Screen layout>.

  <section|The font selection system>

  In <TeXmacs>, the global document font can be specified using <menu|Document|Font>. It is also possible to locally use another font using <menu|Format|Font>. Both <menu|Document|Font> and <menu|Format|Font> open the <TeXmacs> font browser. Fonts have three main characteristics:

  <\description>
    <item*|Family>Fonts are grouped together into <em|families> with a similar design.

    <item*|Shape>Inside the same font family, individual fonts have different <em|shapes>, such as bold, italic, small capitals, etc.

    <item*|Size>The font <em|size> in points.
  </description>

  The user may directly specify these three characteristics in the font browser, which also displays some sample text for the selected font.

  The font browser also provides a way to quickly select fonts based on desirable font properties. For instance, by filtering on a “bold weight” and “sans serif”, one may find a bold sans serif font which mixes as well as possible with the main font. <TeXmacs> allows you to filter on the following criteria:

  <\description>
    <item*|Weight>The font <em|weight> corresponds to the “thickness” of the font:

    <center|<block|<tformat|<table|<row|<cell|<with|font-series|thin|Thin>>|<cell|<with|font-series|light|Light>>|<cell|Medium>|<cell|<with|font-series|bold|Bold>>|<cell|<with|font-series|black|Black>>>>>>>

    <item*|Slant>The font <em|slant> determines the angle of the font:

    <center|<block|<tformat|<table|<row|<cell|<with|font-family|normal|Normal>>|<cell|<with|font-shape|italic|Italic>>|<cell|<with|font-shape|slanted|Oblique>>>>>>>

    <item*|Stretch>This property determines the horizontal width for a fixed vertical height:

    <center|<block|<tformat|<table|<row|<cell|<with|font-shape|condensed|Condensed>>|<cell|<with|font-shape|unextended|Unextended>>|<cell|<with|font-shape|wide|Wide>>>>>>>

    <item*|Case>This property determines how lowercase letters are capitalized:

    <center|<block|<tformat|<table|<row|<cell|<with|font-shape|mixed|Mixed>>|<cell|<with|font-shape|small-caps|Small capitals>>>>>>>

    <item*|Serif>This feature corresponds to the projecting features called “serifs” at the end of strokes:

    <center|<block|<tformat|<table|<row|<cell|<with|font-family|rm|Serif>>|<cell|<with|font-family|ss|Sans Serif>>>>>>>

    <item*|Spacing>This feature corresponds to the horizontal spacing between characters:

    <center|<block|<tformat|<table|<row|<cell|<with|font-family|rm|Proportional>>|<cell|<with|font-family|tt|Monospaced>>>>>>>

    <item*|Device>This property can be used to imitate specific “writing devices”:

    <center|<block|<tformat|<table|<row|<cell|<with|font-family|rm|Print>>|<cell|<with|font-family|tt|Typewriter>>|<cell|<with|font-family|digital|Digital>>|<cell|<with|font-family|pen|Pen>>|<cell|<with|font-family|artpen|Art pen>>|<cell|<with|font-family|chalk|Chalk>>|<cell|<with|font-family|marker|Marker>>>>>>>

    <item*|Category>Various other font features:

    <htab|5mm><block|<tformat|<table|<row|<cell|<with|font-family|ancient|Ancient>>|<cell|<with|font-family|attached|Attached>>|<cell|<with|font-family|calligraphic|Calligraphic>>|<cell|<with|font-family|comic|Comic>>|<cell|<with|font-family|decorative|Decorative>>>|<row|<cell|<with|font-family|distorted|Distorted>>|<cell|<with|font-family|gothic|Gothic>>|<cell|<with|font-family|handwritten|Handwritten>>|<cell|<with|font-family|initials|Initials>>|<cell|<with|font-family|medieval|Medieval>>>|<row|<cell|<with|font-family|miscellaneous|Miscellaneous>>|<cell|<with|font-family|outline|Outline>>|<cell|<with|font-family|retro|Retro>>|<cell|<with|font-family|scifi|Scifi>>|<cell|<with|font-family|title|Title>>>>>><htab|5mm>
  </description>

  Each of the above properties really constitutes a <em|hint> on how the kind of font which <em|should> be used. If no suitable font can be found on your particular system, then setting these properties may have no effect. Whenever you apply one or more filters, the font browser indicates which fonts match the selected properties. It also indicates the closest match for the current font in use. When pressing the <menu|Ok> button without selecting any particular matching font, then the selected font properties will be inserted as <TeXmacs> markup and used as rendering hints. In that case, the rendering may change when selecting another global document font (for instance).

  It should be noticed that <TeXmacs> comes with a limited number of preinstalled fonts, such as the <with|font|Stix|Stix> fonts and several fonts prefixed by “TeXmacs”. Documents which only use these fonts will be rendered the same on different systems (assuming the same version of <TeXmacs>). When your documents contain other fonts as well, then these fonts may be replaced by closest matches when opening your document under a different operating system.

  <section|Mastering the keyboard>

  We recall that the section on <hlink|general conventions|../../start/man-conventions.en.tm> contains explanations on the way keyboard shortcuts are printed in this manual. It may also be useful to take a look at the section on <hlink|keyboard configuration|../../config/man-config-keyboard.en.tm>.

  <subsection|General prefix rules><label|section:general_prefix_rules>

  Since there are many keyboard shortcuts, it is important to have some ways of classifying them in several categories, in order to make it easier to memorize them. As a general rule, keyboard shortcuts which fall in the same category are identified by a common prefix. The active prefixes heavily depend on the selected “look and feel” in <menu|Edit|Preferences>. In the current look and feel of your <TeXmacs> system,<space|0.4spc>the main common prefixes are as follows:

  <\description>
    <item*|<prefix|std>>Standard shortcuts, which are similar to shortcuts used by other applications (for the selected look and feel). For instance, <shortcut|(kbd-paste)> can be used for pasting text on your system.

    <item*|<prefix|cmd>><TeXmacs> shortcuts, which often rely on the current editing mode. For instance, <key|text s> produces <strong|strong> text in text mode and a square root <math|<sqrt|>> in math mode.

    <item*|<prefix|altcmd>>Compound <TeXmacs> shortcuts. Usually, these shortcuts first indicate the kind of markup to which the command will apply and then specify the specific command.

    <item*|<prefix|structured:geometry>>This prefix is used in combination with arrow keys and certain other special keys for positioning and resizing objects (<smart-ref|section:positioning_and_resizing_objects>).

    <item*|<prefix|structured:move>>This prefix is used in combination with arrow keys and some other special keys for structured cursor movements (<smart-ref|section:structured_cursor_movement>).

    <item*|<prefix|special>>This prefix is occasionally used in combination with letters and punctuation symbols for creating some additional easy to remind shortcuts.

    <item*|<prefix|symbol>>This prefix can be used in combination with normal letters for the insertion of special symbols. For instance, <key|text:symbol s> yields ß and <key|math:symbol a> yields <math|<op|\<amalg\>>>. The <prefix|symbol> prefix is also used for the insertion of “literal characters”. For instance, <key|symbol \\> will always produce the \\ character, whereas the <key|\\> key is used for entering hybrid commands (<smart-ref|hybrid_commands_and_latex_simulation>).
  </description>

  <subsection|Keyboard shortcuts for text mode>

  To write a text in an european language with a keyboard which does have the appropriate special keys, you can use the following shortcuts to create accented characters. Note that they are active regardless of the current language setting.

  <big-table|<descriptive-table|<tformat|<cwith|2|2|2|2|cell-valign|b>|<cwith|1|-1|4|4|cell-rborder|1ln>|<cwith|1|1|3|3|cell-row-span|1>|<cwith|1|1|3|3|cell-col-span|2>|<cwith|1|1|3|3|cell-rborder|1ln>|<cwith|1|1|1|1|cell-row-span|1>|<cwith|1|1|1|1|cell-col-span|2>|<cwith|1|-1|1|-1|cell-halign|c>|<cwith|2|2|6|6|cell-valign|b>|<cwith|1|1|7|7|cell-row-span|1>|<cwith|1|1|7|7|cell-col-span|2>|<cwith|1|1|7|7|cell-rborder|1ln>|<cwith|1|1|5|5|cell-row-span|1>|<cwith|1|1|5|5|cell-col-span|2>|<cwith|1|5|5|7|cell-halign|c>|<cwith|4|4|4|4|cell-rborder|1ln>|<cwith|4|4|3|4|cell-halign|c>|<cwith|1|-1|2|2|cell-halign|l>|<cwith|1|-1|6|6|cell-halign|l>|<cwith|4|4|6|8|cell-halign|c>|<cwith|4|4|6|7|cell-halign|c>|<cwith|4|4|6|6|cell-halign|l>|<cwith|5|5|4|4|cell-rborder|1ln>|<cwith|5|5|1|4|cell-halign|c>|<cwith|5|5|4|4|cell-rborder|1ln>|<cwith|5|5|3|4|cell-halign|c>|<cwith|5|5|2|2|cell-halign|l>|<cwith|5|5|7|8|cell-halign|c>|<cwith|5|5|7|7|cell-halign|c>|<cwith|5|5|7|8|cell-halign|c>|<cwith|5|5|7|7|cell-halign|c>|<cwith|6|6|1|8|cell-halign|c>|<cwith|7|7|4|4|cell-rborder|1ln>|<cwith|7|7|1|4|cell-halign|c>|<cwith|7|7|2|2|cell-halign|l>|<cwith|7|7|4|4|cell-rborder|1ln>|<cwith|7|7|1|4|cell-halign|c>|<cwith|7|7|2|2|cell-halign|l>|<cwith|7|7|4|4|cell-rborder|1ln>|<cwith|7|7|1|4|cell-halign|c>|<cwith|7|7|4|4|cell-rborder|1ln>|<cwith|7|7|3|4|cell-halign|c>|<cwith|7|7|2|2|cell-halign|l>|<cwith|6|6|1|4|cell-halign|c>|<cwith|6|6|2|2|cell-halign|l>|<cwith|6|6|1|4|cell-halign|c>|<cwith|6|6|1|3|cell-halign|c>|<cwith|6|6|2|2|cell-halign|l>|<cwith|6|6|3|4|cell-halign|c>|<cwith|6|6|3|3|cell-halign|c>|<cwith|6|6|3|4|cell-halign|c>|<cwith|6|6|3|3|cell-halign|c>|<cwith|6|6|8|8|cell-rborder|1ln>|<cwith|6|6|5|8|cell-halign|c>|<cwith|6|6|6|6|cell-halign|l>|<cwith|6|6|5|8|cell-halign|c>|<cwith|6|6|5|8|cell-halign|c>|<cwith|6|6|6|6|cell-halign|l>|<cwith|6|6|5|8|cell-halign|c>|<cwith|6|6|5|7|cell-halign|c>|<cwith|6|6|6|6|cell-halign|l>|<cwith|6|6|7|8|cell-halign|c>|<cwith|6|6|7|7|cell-halign|c>|<cwith|6|6|7|8|cell-halign|c>|<cwith|6|6|7|7|cell-halign|c>|<table|<row|<cell|Shortcut>|<cell|>|<cell|Example>|<cell|>|<cell|Shortcut>|<cell|>|<cell|Example>|<cell|>>|<row|<cell|<key|accent:acute>>|<cell|Acute ´>|<cell|<key|accent:acute e>>|<cell|é>|<cell|<key|accent:grave>>|<cell|Grave ‘>|<cell|<key|accent:grave e>>|<cell|è>>|<row|<cell|<key|accent:hat>>|<cell|Hat ˆ>|<cell|<key|accent:hat e>>|<cell|ê>|<cell|<key|accent:umlaut>>|<cell|Umlaut ¨>|<cell|<key|accent:umlaut e>>|<cell|ë>>|<row|<cell|<key|accent:tilde>>|<cell|Tilde ˜>|<cell|<key|accent:tilde a>>|<cell|ã>|<cell|<key|accent:cedilla>>|<cell|Cedilla ¸>|<cell|<key|accent:cedilla c>>|<cell|ç>>|<row|<cell|<key|accent:breve>>|<cell|Breve ˘>|<cell|<key|accent:breve g>>|<cell|ğ>|<cell|<key|accent:check>>|<cell|Check ˇ>|<cell|<key|accent:check s>>|<cell|š>>|<row|<cell|<key|accent:abovering>>|<cell|Above ring ˚>|<cell|<key|accent:abovering a>>|<cell|å>|<cell|<key|accent:abovedot>>|<cell|Above dot ˙>|<cell|<key|accent:abovedot z>>|<cell|ż>>|<row|<cell|<key|accent:doubleacute>>|<cell|Hungarian ˝>|<cell|<key|accent:doubleacute o>>|<cell|ő>|<cell|>|<cell|>|<cell|>|<cell|>>>>>|Typing accented characters.>

  Special characters can also be created in any language context:

  <\big-table>
    <descriptive-table|<tformat|<cwith|1|1|1|-1|cell-row-span|1>|<cwith|1|1|1|-1|cell-col-span|2>|<cwith|1|1|1|-1|cell-halign|c>|<cwith|1|-1|3|3|cell-lborder|1ln>|<cwith|1|-1|5|5|cell-lborder|1ln>|<cwith|1|-1|7|7|cell-lborder|1ln>|<cwith|1|1|1|1|cell-row-span|1>|<cwith|1|1|1|1|cell-col-span|8>|<cwith|1|-1|2|2|cell-halign|c>|<cwith|1|-1|4|4|cell-halign|c>|<cwith|1|-1|6|6|cell-halign|c>|<cwith|1|-1|8|8|cell-halign|c>|<table|<row|<cell|Shortcuts>|<cell|>|<cell|>|<cell|>|<cell|>|<cell|>|<cell|>|<cell|>>|<row|<cell|<key|symbol a>>|<cell|æ>|<cell|<key|symbol A>>|<cell|Æ>|<cell|<key|symbol a e>>|<cell|æ>|<cell|<key|symbol A E>>|<cell|Æ>>|<row|<cell|<key|symbol o>>|<cell|ø>|<cell|<key|symbol O>>|<cell|Ø>|<cell|<key|symbol o e>>|<cell|œ>|<cell|<key|symbol O E>>|<cell|Œ>>|<row|<cell|<key|symbol s>>|<cell|ß>|<cell|<key|symbol S>>|<cell|>|<cell|>|<cell|>|<cell|>|<cell|>>|<row|<cell|<key|symbol !>>|<cell|¡>|<cell|<key|symbol ?>>|<cell|¿>|<cell|<key|symbol p>>|<cell|§>|<cell|<key|symbol P>>|<cell|£>>>>>
  </big-table|Typing special characters.>

  When you press the <key|"> key, an appropriate quote will be inserted. The quote character is chosen according to the current language and the surrounding text. If the chosen quoting style is not appropriate, you can change it in <menu|Edit|Preferences|Keyboard|Automatic quotes>. You can also insert raw quotes:

  <big-table|<descriptive-table|<tformat|<cwith|1|-1|3|3|cell-lborder|1ln>|<cwith|1|1|1|-1|cell-row-span|1>|<cwith|1|1|1|-1|cell-col-span|2>|<cwith|1|1|1|-1|cell-halign|c>|<cwith|1|1|1|1|cell-row-span|1>|<cwith|1|1|1|1|cell-col-span|4>|<cwith|1|-1|2|2|cell-halign|c>|<cwith|1|-1|4|4|cell-halign|c>|<table|<row|<cell|Shortcuts>|<cell|>|<cell|>|<cell|>>|<row|<cell|<key|symbol ">>|<cell|">|<cell|<key|, ,>>|<cell|„>>|<row|<cell|<key|\<less\> var>>|<cell|‹>|<cell|<key|\<gtr\> var>>|<cell|›>>|<row|<cell|<key|\<less\> \<less\>>>|<cell|«>|<cell|<key|\<gtr\> \<gtr\>>>|<cell|»>>>>>|Typing raw quotes.>

  “English” quotes are considered ligatures of two successive backticks or apostrophes. They can be created with <key|‘ ‘> and <key|' '> but these are not actual keyboard commands: the result is two characters displayed specially, not a special single character.

  Some shortcuts are available in specific language contexts. You can set the text language for the whole document with <menu|Document|Language> or only locally with <menu|Format|Language> (see <hlink|generalities for typing text|../man-generalities.en.tm>).

  <big-table|<descriptive-table|<tformat|<cwith|1|1|1|-1|cell-row-span|1>|<cwith|1|1|1|-1|cell-col-span|2>|<cwith|1|1|1|-1|cell-halign|c>|<cwith|1|-1|3|3|cell-lborder|1ln>|<cwith|1|-1|5|5|cell-lborder|1ln>|<cwith|1|-1|7|7|cell-lborder|1ln>|<cwith|6|11|1|4|cell-bborder|0>|<cwith|6|11|1|4|cell-rborder|0>|<cwith|6|11|3|3|cell-lborder|0>|<cwith|1|1|5|5|cell-row-span|1>|<cwith|1|1|5|5|cell-col-span|4>|<twith|table-lborder|0>|<cwith|1|-1|1|1|cell-lborder|0>|<twith|table-bborder|0>|<cwith|1|1|1|1|cell-lborder|1ln>|<cwith|2|5|1|1|cell-lborder|1ln>|<cwith|5|5|1|4|cell-bborder|1ln>|<cwith|11|11|5|8|cell-bborder|1ln>|<cwith|1|-1|2|2|cell-halign|c>|<cwith|1|-1|4|4|cell-halign|c>|<cwith|1|-1|6|6|cell-halign|c>|<cwith|1|-1|8|8|cell-halign|c>|<table|<row|<cell|Hungarian>|<cell|>|<cell|Spanish>|<cell|>|<cell|Polish>|<cell|>|<cell|>|<cell|>>|<row|<cell|<key|symbol o>>|<cell|<with|language|hungarian|ő>>|<cell|<key|! var>>|<cell|<with|language|spanish|¡>>|<cell|<key|symbol a>>|<cell|<with|language|polish|ą>>|<cell|<key|symbol o>>|<cell|<with|language|polish|ó>>>|<row|<cell|<key|symbol O>>|<cell|<with|language|hungarian|Ő>>|<cell|<key|? var>>|<cell|<with|language|spanish|¿>>|<cell|<key|symbol A>>|<cell|<with|language|polish|Ą>>|<cell|<key|symbol O>>|<cell|<with|language|polish|Ó>>>|<row|<cell|<key|symbol u>>|<cell|<with|language|hungarian|ű>>|<cell|<key|! ‘>>|<cell|<with|language|spanish|¡>>|<cell|<key|symbol c>>|<cell|<with|language|polish|ć>>|<cell|<key|symbol s>>|<cell|<with|language|polish|ś>>>|<row|<cell|<key|symbol U>>|<cell|<with|language|hungarian|Ű>>|<cell|<key|? ‘>>|<cell|<with|language|spanish|¿>>|<cell|<key|symbol C>>|<cell|<with|language|polish|Ć>>|<cell|<key|symbol S>>|<cell|<with|language|polish|Ś>>>|<row|<cell|>|<cell|>|<cell|>|<cell|>|<cell|<key|symbol e>>|<cell|<with|language|polish|ę>>|<cell|<key|symbol x>>|<cell|<with|language|polish|ź>>>|<row|<cell|>|<cell|>|<cell|>|<cell|>|<cell|<key|symbol E>>|<cell|<with|language|polish|Ę>>|<cell|<key|symbol X>>|<cell|<with|language|polish|Ź>>>|<row|<cell|>|<cell|>|<cell|>|<cell|>|<cell|<key|symbol l>>|<cell|<with|language|polish|ł>>|<cell|<key|symbol z>>|<cell|<with|language|polish|ż>>>|<row|<cell|>|<cell|>|<cell|>|<cell|>|<cell|<key|symbol L>>|<cell|<with|language|polish|Ł>>|<cell|<key|symbol Z>>|<cell|<with|language|polish|Ż>>>|<row|<cell|>|<cell|>|<cell|>|<cell|>|<cell|<key|symbol n>>|<cell|<with|language|polish|ń>>|<cell|<key|symbol z var>>|<cell|<with|language|polish|ź>>>|<row|<cell|>|<cell|>|<cell|>|<cell|>|<cell|<key|symbol N>>|<cell|<with|language|polish|Ń>>|<cell|<key|symbol Z var>>|<cell|<with|language|polish|Ź>>>>>>|Language-specific text shorthands.>

  Language-specific shortcuts override generic shortcuts; for example, you cannot easily type “ø” in hungarian context.

  <subsection|Hybrid commands and <LaTeX> simulation><label|hybrid_commands_and_latex_simulation>

  <TeXmacs> allows you to enter <LaTeX> commands directly from the keyboard as follows. You first hit the <key|\\>-key in order to enter the hybrid <LaTeX>/<TeXmacs> command mode. Next you type the command you wish to execute. As soon as you finished typing your command, the left footer displays something like

  <\verbatim>
    \ \ \ \ \<less\>return\<gtr\>: action to be undertaken
  </verbatim>

  When you hit the <shortcut|(kbd-return)>-key at this stage, your command will be executed. For instance, in math-mode, you may create a fraction by typing <key|\\ f r a c return>.

  If the command you have typed is not a (recognized) <LaTeX> command, then we first look whether the command is an existing <TeXmacs> macro, function or environment (provided by the style file). If so, the corresponding macro expansion, function application or environment application is created (with the right number of arguments). Otherwise, it is assumed that your command corresponds to an environment variable and we ask for its value. The <key|\\>-key is always equivalent to one of the commands <key|inactive l>, <key|inactive e>, <key|inactive a>, <key|inactive #> or <key|inactive v>.

  To insert a literal <kbd|\\> (backslash) character, you can use the <key|symbol \\> sequence.

  <subsection|Dynamic objects>

  Certain more complex objects can have several <em|states> during the editing process. Examples of such <em|dynamic objects> are labels and references, because the appearance of the reference depends on a dynamically determined number. Many other examples of dynamic markup can be found in the documentation about <hlink|writing style files|../../../devel/style/keyboard/style-kbd.en.tm>.

  When entering a dynamic object like a label using <shortcut|(make-label)>, the default state is <em|inactive>. This inactive state enables you to type the information which is relevant to the dynamic object, such as the name of the label in our case. Certain dynamic objects take an arbitrary number of parameters, and new ones can be inserted using <key|var>.

  <\big-figure>
    <with|color|blue|<math|\<langle\>>label<math|\|>>pythagoras<with|color|blue|<math|\<rangle\>>>
  </big-figure|Inactive label>

  When you finished typing the relevant information for your dynamic object, you may type <shortcut|(kbd-return)> in order to <em|activate> the object. An active dynamic object may be deactivated by placing your cursor just behind the object and hitting <key|backspace>.

  <subsection|Various useful keyboard shortcuts>

  Some assorted shortcuts which are often useful are displayed in table<nbsp><reference|various-useful-shortcuts>. Notice that spaces inserted using <shortcut|(make-space "1em")>, <shortcut|(make-space "0.2spc")> and <shortcut|(make-space "-0.2spc")> can be <strong|resized a posteriori> <todo|posteriori这词要加glossary>(<smart-ref|section:positioning_and_resizing_objects>) using the shortcuts <shortcut|(geometry-left)> and<nbsp><shortcut|(geometry-right)>. This kind of resizing actually works for more general horizontal and vertical spaces inserted from the menu <menu|Format|Space>, as well as several other objects, such as images.

  <\big-table|<descriptive-table|<tformat|<table|<row|<cell|Shortcut>|<cell|Action>>|<row|<cell|<shortcut|(remove-structure-upwards)>>|<cell|Remove the containing object or environment.>>|<row|<cell|<shortcut|(make 'nbsp)>>|<cell|Insert a non breaking space.>>|<row|<cell|<shortcut|(make-space "1em")>>|<cell|Insert a quad space.>>|<row|<cell|<shortcut|(make-space "0.2spc")>>|<cell|Insert a small space.>>|<row|<cell|<shortcut|(make-space "-0.2spc")>>|<cell|Insert a small negative space.>>|<row|<cell|<shortcut|(kbd-alternate-tab)>>|<cell|Insert a “tab”>>|<row|<cell|<shortcut|(go-start)>>|<cell|Go to the start of the document.>>|<row|<cell|<shortcut|(go-end)>>|<cell|Go to the end of the document.>>|<row|<cell|<shortcut|(make 'line-break)>>|<cell|Insert a line break.>>|<row|<cell|<shortcut|(make-rigid)>>|<cell|Insert a “rigid” piece of text, which cannot be line-broken.>>>>>>
    <label|various-useful-shortcuts>Various useful keyboard shortcuts
  </big-table>

  <chapter|Mathematical formulas>

  One of the main purposes of <TeXmacs> is to edit mathematical formulas. If the cursor is inside a<nbsp>formula (<abbr|i.e.> inside “math mode”), then the mode sensitive menus and toolbars provide buttons for entering common mathematical constructs. Similarly, as will be detailed in this section, the bahaviour of the keyboard changes so as to allow for the rapid typing of mathematical symbols. For instance, typing <key|- \<gtr\>> inserts the arrow <math|\<rightarrow\>>.

  Starting with version 1.0.7.10, <TeXmacs> also incorporates several features for the “semantic” editing of mathematical formulas, which will be described at the end of this section. When used appropriately, this allows you to write documents in which all formulas are at least correct from a syntactical point of view. A “syntax corrector” is included to assist you with this task. Documents with more semantics are for instance useful when using formulas as inputs for a computer algebra system. Such documents are also less likely to contain “typos”. Other interesting features, such as semantic search and replace, should be developed in the future.

  <section|Incorporating mathematical formulas into documents>

  <TeXmacs> provides three main ways in order to enter a mathematical formulas into the main text:

  <\description>
    <item*|<menu|Insert|Mathematics|Inline formula> or <key|$>>

    This entry corresponds to small <em|inline formulas> like <math|a<rsup|2>+b<rsup|2>=c<rsup|2>> inside a textual paragraph. Note that formulas are typeset specially so they do not take too much vertical space. For example, limits are always displayed on the right. Limits can be displayed below in formulas with <menu|Format|Display style|on>. In formulas, display style is off by default.

    <item*|<menu|Insert|Mathematics|Displayed formula> or <shortcut|(make-equation*)>>

    This entry is used for entering bigger <em|displayed equations>, like

    <\equation*>
      x<rsup|n>+y<rsup|n>=z<rsup|n>,
    </equation*>

    which are typeset in a paragraph of their own. You may use the shortcut <shortcut|(numbered-toggle (focus-tree))> in order to give the equation a number (or to remove the number of an equation). Also, <shortcut|(variant-circulate (focus-tree) #t)> allows you to switch between inline formulas and displayed equations.

    <item*|<menu|Insert|Mathematics|Several equations> or <shortcut|(make-eqnarray*)>>

    This entry allows you to create an <markup|eqnarray*>, a three columns wide table-like environment (see <smart-ref|section:creating_tables>). This environment is typically used for lists of multiple relations like

    <\eqnarray*>
      <tformat|<table|<row|<cell|x+0>|<cell|=>|<cell|x>>|<row|<cell|x+<around|(|\<um\>x|)>>|<cell|=>|<cell|0>>|<row|<cell|x+y>|<cell|=>|<cell|y+x>>|<row|<cell|<around|(|x+y|)>+z>|<cell|=>|<cell|x+<around|(|y+z|)>>>>>
    </eqnarray*>

    The first column is centered to the right, the second one at the middle and the last one at the left. Another typical use of the <markup|eqnarray*> environment is a step by step computation

    <\eqnarray*>
      <tformat|<table|<row|<cell|<around*|(|\<mathe\><rsup|sin x>+sin \<mathe\><rsup|x>|)><rprime|'>>|<cell|=>|<cell|<around*|(|\<mathe\><rsup|sin x>|)><rprime|'>+<around*|(|sin \<mathe\><rsup|x>|)><rprime|'>>>|<row|<cell|>|<cell|=>|<cell|<around|(|sin x|)><rprime|'>*\<mathe\><rsup|sin x>+<around*|(|\<mathe\><rsup|x>|)><rprime|'>*cos \<mathe\><rsup|x>>>|<row|<cell|>|<cell|=>|<cell|\<mathe\><rsup|sin x>*cos x+\<mathe\><rsup|x>*cos \<mathe\><rsup|x>,>>>>
    </eqnarray*>

    in which many entries of the left column are left open.
  </description>

  <section|Mathematical symbols>

  The Greek characters are obtained in <TeXmacs> using the <prefix|math:greek>-key. For instance, <key|math:greek a> yields<nbsp><math|\<alpha\>> and <key|math:greek G> yields <math|\<Gamma\>>. Similarly, <prefix|math:bold>, <prefix|math:cal>, <prefix|math:frak> and <prefix|math:bbb> can be used in order to type bold, calligraphic, fraktur and blackboard bold characters. For instance, <shortcut|\<frak-m\>> yields<nbsp><math|\<frak-m\>>, <key|S-F6 R> yields<nbsp><math|\<bbb-R\>> and <shortcut|\<b-cal-Z\>> yields <math|\<b-cal-Z\>>.

  Greek characters can also be obtained as “variants” of Latin characters using the <key|var>-key. For instance, <key|p var> yields <math|\<pi\>>. The <key|var>-key is also used for obtaining variants of the Greek letters themselves. For instance, both <key|math:greek p var> and <key|p var var> yield <math|\<varpi\>>. An alternative way to enter blackboard bold characters is to type the same capital twice. For instance, <key|Z Z> yields<nbsp><math|\<bbb-Z\>>.

  Some symbols admit many variants. For instance, <key|\<less\>> yields <math|\<less\>>, <key|\<less\> var> yields <math|\<in\>>, <key|\<less\> var var> yields <math|\<subset\>>, <key|\<less\> var var var> yields <math|\<prec\>>, and so on. You may “cycle back” among the variants using<nbsp><key|S-var>. For instance, <key|\<less\> var var S-var> is equivalent to <key|\<less\> var>.

  Many other mathematical symbols are obtained by “natural” key-combinations. For instance, <key|- \<gtr\>> yields <math|<op|\<rightarrow\>>>, <key|- - \<gtr\>> yields <math|<op|\<longrightarrow\>>> and <key|\<gtr\> => yields <math|<op|\<geqslant\>>>. Similarly, <key|\| var -> yields <math|<op|\<vdash\>>>, <key|\| - \<gtr\>> yields <math|<op|\<mapsto\>>> and <key|- \<gtr\> \<less\> -> yields <math|<op|\<rightleftarrows\>>>. The following general rules hold in order to enter mathematical symbols:

  <\description>
    <item*|<key|tab>>is the main key for obtaining variants. For instance, <key|\<gtr\> => yields <math|<op|\<geqslant\>>>, but <key|\<gtr\> = var> yields<nbsp><math|<op|\<geq\>>>. Similarly, <key|\<less\> var var> yields <math|<op|\<subset\>>>, <key|\<less\> var var => yields <math|<op|\<subseteq\>>> and <key|\<less\> var var = var> yields <math|<op|\<subseteqq\>>>. Also, <key|P var> yields<nbsp><math|\<wp\>> and <key|e var> yields the constant <math|\<mathe\>=exp<around|(|1|)>>.

    <item*|<key|@>>is used for putting symbols into circles or boxes. For instance, <key|@ +> yields <math|<op|\<oplus\>>> and <key|@ x> yields <math|<op|\<otimes\>>>. Similarly, <key|@ var +> yields <math|<op|\<boxplus\>>>.

    <item*|<key|/>>is used for negations. For instance, <key|= /> yields <math|<op|\<neq\>>> and <key|\<less\> = /> yields <math|<neg|\<leqslant\>>>. Notice that <key|\<less\> = var var /> yields <math|<op|\<nleqq\>>>, while <key|\<less\> = var var / var> yields <math|<op|\<lneqq\>>>.

    <item*|<key|!>>is used after arrows in order to force scripts to be placed above or below the arrow. For instance, <key|- - \<gtr\> ^ x> yields <math|<op|\<longrightarrow\><rsup|x> >>, but <key|- - \<gtr\> ! ^ x> yields <math|\<longrightarrowlim\><rsup|x>>.
  </description>

  The logical relations <math|\<wedge\>> and <math|\<vee\>> are obtained using <key|&> and <key|%>. The operators <math|\<cap\>> and <math|\<cup\>> are natural variants <key|& var> and <key|% var>. Various miscellaneous symbols can be obtained using the <prefix|math:symbol> prefix.

  Notice that certain symbols with a different mathematical meaning are sometimes denoted in a<nbsp>similar way; such symbols are called <em|homoglyphs>. For instance, the vertical bar <math|\|> can be used as a<nbsp>separator for defining sets <math|R<rsup|\<gtr\>>=<around*|{|x\<in\>R\|x\<gtr\>0|}>>, but also as the binary relation “divides”<nbsp><rigid|<math|11\<divides\>1001>>. Often, but not always, homoglyphs admit a different spacing. The most annoying ambiguity is between invisible multiplication <math|x*y> and function application <math|sin x>, which are entered using the shortcuts <key|*> <abbr|resp.> <key|space>.

  In order to facilitate certain automated treatments of your documents, such as mathematical syntax checking, we incite authors to pay attention to the homoglyph problem when entering formulas. For more information on this issue and how <TeXmacs> can assist you to use the appropriate notations, we refer to our section on the <strong|semantics of mathematical symbols> (<smart-ref|section:semantics_of_mathematical_symbols>).

  <section|Main mathematical constructs>

  The main mathematical objects are created using the <key|math> prefix as follows:

  <big-table|<descriptive-table|<tformat|<table|<row|<cell|Shortcut>|<cell|Purpose>|<cell|Example>>|<row|<cell|<key|math $>>|<cell|Text>|<cell|<math|L=<around|{|x\|x<text| is sufficiently large>|}>>>>|<row|<cell|<key|math f>>|<cell|Fractions>|<cell|<math|<frac|a|b+c>>>>|<row|<cell|<key|math s>>|<cell|Square roots>|<cell|<math|<sqrt|x+y>>>>|<row|<cell|<key|math S>>|<cell|<math|n>-th Roots>|<cell|<math|<sqrt|x<rsup|3>+y<rsup|3>|3>>>>|<row|<cell|<key|math n>>|<cell|Negations>|<cell|<math|<neg|<frac|a|b+c>>>>>>>>|Creation of major mathematical markup.>

  Primes, subscripts and superscripts are created as follows:

  <big-table|<descriptive-table|<tformat|<table|<row|<cell|Shortcut>|<cell|Purpose>|<cell|Example>>|<row|<cell|<key|'>>|<cell|Primes>|<cell|<math|f<rprime|'>> or <math|<around|(|g+h|)><rprime|'''>>>>|<row|<cell|<key|‘>>|<cell|Back-primes>|<cell|<math|<lprime|‘>f>>>|<row|<cell|<key|_>>|<cell|Subscripts>|<cell|<math|x<rsub|n>> or <math|x<rsub|i<rsub|3>>>>>|<row|<cell|<key|^>>|<cell|Superscripts>|<cell|<math|x<rsup|2>>, <math|x<rsub|n><rsup|2>> or <math|\<mathe\><rsup|\<mathe\><rsup|x>>>>>|<row|<cell|<key|math l _>>|<cell|Left subscripts>|<cell|<math|<lsub|2>x>>>|<row|<cell|<key|math l ^>>|<cell|Left superscripts>|<cell|<math|<lsup|\<pi\>>x> or <math|<lsub|\<ast\>><lsup|\<ast\>>He<rsub|\<ast\>><rsup|\<ast\>>>>>>>>|Creation of primes, subscripts and superscripts>

  Some important mathematical constructs are actually <strong|tabular constructs> (see <smart-ref|section:creating_tables>) and are documented separately.

  <section|Large delimiters>

  Brackets inside mathematical formulas should always match: as soon as you enter an opening bracket “(<math|>”, <TeXmacs> will automatically insert the matching closing bracket “<math|>)”. You may disable this feature using <menu|Edit|Preferences|Keyboard|Automatic brackets|Disable>. Attention (see also below): brackets in old documents will be automatically upgraded to matching brackets.

  Sometimes, you do not want the closing bracket, or you may want to replace it by another closing bracket. No problem: if your cursor is just before the closing bracket inside <math|<around|(|a,b<cursor>|)>>, then pressing<nbsp><key|]> will turn the expression into <math|<around|(|a,b|]><cursor>>. Alternatively, deletion of a bracket will actually turn it into an <strong|invisible bracket> (see <smart-ref|section:semantics_of_mathematical_symbols>), after which you can replace it by an arbitrary opening or closing bracket.

  By default, the sizes of the brackets are adjusted to the expression between the brackets. Small delimiters, which are created using the <prefix|math:small>-prefix, keep their sizes independently of the enclosed expression. Alternatively, you may use <shortcut|(alternate-toggle (focus-tree))> in order to toggle between large and small delimiters.

  For some delimiters, such as <math|\|>, the opening and closing delimiters coincide. For instance, entering a vertical bar <key|\|> will produce an absolute value. The (small) bar-separator <math|\|> is obtained using <shortcut|\|>, or as a variant using <key|\| var>. The big bar-separator is entered using <shortcut|(math-separator "\|" #t)>. In <TeX> and <LaTeX>, such large separators do not exist; they are used for producing the vertical bars in formulas like

  <\equation*>
    <around*|\<langle\>|<frac|a|b+c><mid|\|><frac|p|q+r><mid|\|><frac|a|b+c>|\<rangle\>>.
  </equation*>

  There may be as many middle delimiters between a left and a right delimiter as one wishes. Notice that there are still another number of variants of vertical bars. For instance, the binary relation “divides” is entered using <shortcut|\<divides\>> or <key|\| var var var var>.

  In <TeXmacs>, large delimiters may either be “left delimiters”, “right delimiters” or “middle delimiters”. By default, <math|(,[,{> and <math|\<langle\>> are left delimiters, <math|),],}> and <math|\<rangle\>> are right delimiters. But there status can be changed using the <prefix|math:left>, <prefix|math:right> and <prefix|math:middle> key combinations. For instance, <key|math:left )> produces <math|)>, considered as a large left delimiter.

  Sometimes you may want large delimiters of a particular size, instead of self-adjusting ones. This can be achieved by resizing the expression in between the brackets using the items in <menu|Format|Adjust>.

  Notice that it is possible to insert a pair of invisible brackets using <key|\\ l e f t . return>. This is for instance useful in computational contexts, in which formulas should admit a precise, not merely visual semantics. Alternatively, one may put the formula inside a “rigid box” using<nbsp><shortcut|(make-rigid)>, which additionally prevents the formula from being hyphenated.

  \;

  <section|Big operators>

  The following key-combinations are used in order to create big symbols:

  <\big-table>
    <descriptive-table|<tformat|<cwith|3|7|2|2|cell-halign|c>|<cwith|3|7|4|4|cell-halign|c>|<cwith|4|7|1|1|cell-rborder|0.5ln>|<cwith|4|7|1|1|cell-bborder|0.5ln>|<cwith|4|7|1|1|cell-lborder|0.5ln>|<cwith|3|7|1|1|cell-lsep|1spc>|<cwith|3|7|1|1|cell-rsep|1spc>|<cwith|3|7|1|1|cell-bsep|1spc>|<cwith|3|7|1|1|cell-tsep|1spc>|<cwith|5|5|1|1|cell-rborder|0.5ln>|<cwith|5|5|1|1|cell-bborder|0.5ln>|<cwith|5|5|1|1|cell-lborder|0.5ln>|<cwith|5|5|1|1|cell-lsep|1spc>|<cwith|5|5|1|1|cell-rsep|1spc>|<cwith|5|5|1|1|cell-bsep|1spc>|<cwith|5|5|1|1|cell-tsep|1spc>|<cwith|3|3|1|1|cell-rborder|0.5ln>|<cwith|3|3|1|1|cell-bborder|0.5ln>|<cwith|3|3|1|1|cell-lborder|0.5ln>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|3|3|1|1|cell-rborder|0.5ln>|<cwith|3|3|1|1|cell-bborder|0.5ln>|<cwith|3|3|1|1|cell-lborder|0.5ln>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|4|7|3|3|cell-rborder|0.5ln>|<cwith|4|7|3|3|cell-bborder|0.5ln>|<cwith|3|7|3|3|cell-lsep|1spc>|<cwith|3|7|3|3|cell-rsep|1spc>|<cwith|3|7|3|3|cell-bsep|1spc>|<cwith|3|7|3|3|cell-tsep|1spc>|<cwith|5|5|3|3|cell-rborder|0.5ln>|<cwith|5|5|3|3|cell-bborder|0.5ln>|<cwith|5|5|3|3|cell-lsep|1spc>|<cwith|5|5|3|3|cell-rsep|1spc>|<cwith|5|5|3|3|cell-bsep|1spc>|<cwith|5|5|3|3|cell-tsep|1spc>|<cwith|3|3|3|3|cell-rborder|0.5ln>|<cwith|3|3|3|3|cell-bborder|0.5ln>|<cwith|3|3|3|3|cell-lsep|1spc>|<cwith|3|3|3|3|cell-rsep|1spc>|<cwith|3|3|3|3|cell-bsep|1spc>|<cwith|3|3|3|3|cell-tsep|1spc>|<cwith|3|3|3|3|cell-rborder|0.5ln>|<cwith|3|3|3|3|cell-bborder|0.5ln>|<cwith|3|3|3|3|cell-lsep|1spc>|<cwith|3|3|3|3|cell-rsep|1spc>|<cwith|3|3|3|3|cell-bsep|1spc>|<cwith|3|3|3|3|cell-tsep|1spc>|<cwith|2|2|2|2|cell-halign|c>|<cwith|2|2|4|4|cell-halign|c>|<cwith|2|2|1|1|cell-lsep|1spc>|<cwith|2|2|1|1|cell-rsep|1spc>|<cwith|2|2|1|1|cell-bsep|1spc>|<cwith|2|2|1|1|cell-tsep|1spc>|<cwith|2|2|1|1|cell-rborder|0.5ln>|<cwith|2|2|1|1|cell-bborder|0.5ln>|<cwith|2|2|1|1|cell-lborder|0.5ln>|<cwith|2|2|1|1|cell-lsep|1spc>|<cwith|2|2|1|1|cell-rsep|1spc>|<cwith|2|2|1|1|cell-bsep|1spc>|<cwith|2|2|1|1|cell-tsep|1spc>|<cwith|2|2|1|1|cell-rborder|0.5ln>|<cwith|2|2|1|1|cell-bborder|0.5ln>|<cwith|2|2|1|1|cell-lborder|0.5ln>|<cwith|2|2|1|1|cell-lsep|1spc>|<cwith|2|2|1|1|cell-rsep|1spc>|<cwith|2|2|1|1|cell-bsep|1spc>|<cwith|2|2|1|1|cell-tsep|1spc>|<cwith|2|2|3|3|cell-lsep|1spc>|<cwith|2|2|3|3|cell-rsep|1spc>|<cwith|2|2|3|3|cell-bsep|1spc>|<cwith|2|2|3|3|cell-tsep|1spc>|<cwith|2|2|3|3|cell-rborder|0.5ln>|<cwith|2|2|3|3|cell-bborder|0.5ln>|<cwith|2|2|3|3|cell-lsep|1spc>|<cwith|2|2|3|3|cell-rsep|1spc>|<cwith|2|2|3|3|cell-bsep|1spc>|<cwith|2|2|3|3|cell-tsep|1spc>|<cwith|2|2|3|3|cell-rborder|0.5ln>|<cwith|2|2|3|3|cell-bborder|0.5ln>|<cwith|2|2|3|3|cell-lsep|1spc>|<cwith|2|2|3|3|cell-rsep|1spc>|<cwith|2|2|3|3|cell-bsep|1spc>|<cwith|2|2|3|3|cell-tsep|1spc>|<cwith|1|1|2|2|cell-halign|c>|<cwith|1|1|4|4|cell-halign|c>|<cwith|1|-1|2|2|cell-rborder|1ln>|<table|<row|<cell|Shortcut>|<cell|Result>|<cell|Shortcut>|<cell|Result>>|<row|<cell|<key|symbol I>>|<cell|<math|<with|math-display|true|<big|int>>>>|<cell|<key|symbol O>>|<cell|<math|<with|math-display|true|<big|oint>>>>>|<row|<cell|<key|symbol P>>|<cell|<math|<with|math-display|true|<big|prod>>>>|<cell|<key|symbol A>>|<cell|<math|<with|math-display|true|<big|amalg>>>>>|<row|<cell|<key|symbol S>>|<cell|<math|<with|math-display|true|<big|sum>>>>|<cell|<key|symbol @ +>>|<cell|<math|<with|math-display|true|<big|oplus>>>>>|<row|<cell|<key|symbol @ x>>|<cell|<math|<with|math-display|true|<big|otimes>>>>|<cell|<key|symbol @ .>>|<cell|<math|<with|math-display|true|<big|odot>>>>>|<row|<cell|<key|symbol U>>|<cell|<math|<with|math-display|true|<big|cup>>>>|<cell|<key|symbol N>>|<cell|<math|<with|math-display|true|<big|cap>>>>>|<row|<cell|<key|symbol V>>|<cell|<math|<with|math-display|true|<big|vee>>>>|<cell|<key|symbol W>>|<cell|<math|<with|math-display|true|<big|wedge>>>>>>>>
  </big-table|Big mathematical operators.>

  The scopes of big operators are indicated visually, through the light cyan boxes around the tags which contain the cursor.

  The big integral signs admit two variants, depending on where you want to place subscripts and superscripts. By default, the scripts are placed as follows:

  <\equation*>
    <big|int><rsub|0><rsup|\<infty\>><frac|\<mathd\> x|1+x<rsup|2>>.
  </equation*>

  The alternative rendering “with limits”

  <\equation*>
    <big|intlim><rsub|0><rsup|\<infty\>><frac|\<mathd\> x|1+x<rsup|2>>.
  </equation*>

  is obtained using <key|symbol L I>. Similarly, you may type <key|symbol L O> in order to obtain <math|<big|oint>> with limits.

  <section|Wide accents>

  The table below shows how to type mathematical accents above symbols or entire formulas. Indeed, some of these accents automatically become as wide as the formulas below them.

  <\big-table>
    <descriptive-table|<tformat|<cwith|3|8|3|3|cell-halign|c>|<cwith|3|8|5|5|cell-halign|c>|<cwith|4|8|1|1|cell-rborder|0.5ln>|<cwith|4|8|1|1|cell-bborder|0.5ln>|<cwith|4|8|1|1|cell-lborder|0.5ln>|<cwith|3|8|1|1|cell-lsep|1spc>|<cwith|3|8|1|1|cell-rsep|1spc>|<cwith|3|8|1|1|cell-bsep|1spc>|<cwith|3|8|1|1|cell-tsep|1spc>|<cwith|3|3|1|1|cell-rborder|0.5ln>|<cwith|3|3|1|1|cell-bborder|0.5ln>|<cwith|3|3|1|1|cell-lborder|0.5ln>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|3|3|1|1|cell-rborder|0.5ln>|<cwith|3|3|1|1|cell-bborder|0.5ln>|<cwith|3|3|1|1|cell-lborder|0.5ln>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|4|8|4|4|cell-rborder|0.5ln>|<cwith|4|8|4|4|cell-bborder|0.5ln>|<cwith|3|8|4|4|cell-lsep|1spc>|<cwith|3|8|4|4|cell-rsep|1spc>|<cwith|3|8|4|4|cell-bsep|1spc>|<cwith|3|8|4|4|cell-tsep|1spc>|<cwith|5|5|4|4|cell-rborder|0.5ln>|<cwith|5|5|4|4|cell-bborder|0.5ln>|<cwith|5|5|4|4|cell-lsep|1spc>|<cwith|5|5|4|4|cell-rsep|1spc>|<cwith|5|5|4|4|cell-bsep|1spc>|<cwith|5|5|4|4|cell-tsep|1spc>|<cwith|3|3|4|4|cell-rborder|0.5ln>|<cwith|3|3|4|4|cell-bborder|0.5ln>|<cwith|3|3|4|4|cell-lsep|1spc>|<cwith|3|3|4|4|cell-rsep|1spc>|<cwith|3|3|4|4|cell-bsep|1spc>|<cwith|3|3|4|4|cell-tsep|1spc>|<cwith|3|3|4|4|cell-rborder|0.5ln>|<cwith|3|3|4|4|cell-bborder|0.5ln>|<cwith|3|3|4|4|cell-lsep|1spc>|<cwith|3|3|4|4|cell-rsep|1spc>|<cwith|3|3|4|4|cell-bsep|1spc>|<cwith|3|3|4|4|cell-tsep|1spc>|<cwith|2|2|3|3|cell-halign|c>|<cwith|2|2|5|5|cell-halign|c>|<cwith|2|2|1|1|cell-lsep|1spc>|<cwith|2|2|1|1|cell-rsep|1spc>|<cwith|2|2|1|1|cell-bsep|1spc>|<cwith|2|2|1|1|cell-tsep|1spc>|<cwith|2|2|1|1|cell-rborder|0.5ln>|<cwith|2|2|1|1|cell-bborder|0.5ln>|<cwith|2|2|1|1|cell-lborder|0.5ln>|<cwith|2|2|1|1|cell-lsep|1spc>|<cwith|2|2|1|1|cell-rsep|1spc>|<cwith|2|2|1|1|cell-bsep|1spc>|<cwith|2|2|1|1|cell-tsep|1spc>|<cwith|2|2|1|1|cell-rborder|0.5ln>|<cwith|2|2|1|1|cell-bborder|0.5ln>|<cwith|2|2|1|1|cell-lborder|0.5ln>|<cwith|2|2|1|1|cell-lsep|1spc>|<cwith|2|2|1|1|cell-rsep|1spc>|<cwith|2|2|1|1|cell-bsep|1spc>|<cwith|2|2|1|1|cell-tsep|1spc>|<cwith|2|2|4|4|cell-lsep|1spc>|<cwith|2|2|4|4|cell-rsep|1spc>|<cwith|2|2|4|4|cell-bsep|1spc>|<cwith|2|2|4|4|cell-tsep|1spc>|<cwith|2|2|4|4|cell-rborder|0.5ln>|<cwith|2|2|4|4|cell-bborder|0.5ln>|<cwith|2|2|4|4|cell-lsep|1spc>|<cwith|2|2|4|4|cell-rsep|1spc>|<cwith|2|2|4|4|cell-bsep|1spc>|<cwith|2|2|4|4|cell-tsep|1spc>|<cwith|2|2|4|4|cell-rborder|0.5ln>|<cwith|2|2|4|4|cell-bborder|0.5ln>|<cwith|2|2|4|4|cell-lsep|1spc>|<cwith|2|2|4|4|cell-rsep|1spc>|<cwith|2|2|4|4|cell-bsep|1spc>|<cwith|2|2|4|4|cell-tsep|1spc>|<cwith|1|1|3|3|cell-halign|c>|<cwith|1|1|5|5|cell-halign|c>|<cwith|1|-1|3|3|cell-rborder|1ln>|<cwith|3|3|3|3|cell-halign|c>|<cwith|3|3|5|5|cell-halign|c>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|3|3|1|1|cell-rborder|0.5ln>|<cwith|3|3|1|1|cell-bborder|0.5ln>|<cwith|3|3|1|1|cell-lborder|0.5ln>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|3|3|1|1|cell-rborder|0.5ln>|<cwith|3|3|1|1|cell-bborder|0.5ln>|<cwith|3|3|1|1|cell-lborder|0.5ln>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|3|3|4|4|cell-lsep|1spc>|<cwith|3|3|4|4|cell-rsep|1spc>|<cwith|3|3|4|4|cell-bsep|1spc>|<cwith|3|3|4|4|cell-tsep|1spc>|<cwith|3|3|4|4|cell-rborder|0.5ln>|<cwith|3|3|4|4|cell-bborder|0.5ln>|<cwith|3|3|4|4|cell-lsep|1spc>|<cwith|3|3|4|4|cell-rsep|1spc>|<cwith|3|3|4|4|cell-bsep|1spc>|<cwith|3|3|4|4|cell-tsep|1spc>|<cwith|3|3|4|4|cell-rborder|0.5ln>|<cwith|3|3|4|4|cell-bborder|0.5ln>|<cwith|3|3|4|4|cell-lsep|1spc>|<cwith|3|3|4|4|cell-rsep|1spc>|<cwith|3|3|4|4|cell-bsep|1spc>|<cwith|3|3|4|4|cell-tsep|1spc>|<cwith|3|3|3|3|cell-rborder|1ln>|<cwith|4|4|5|5|cell-halign|c>|<cwith|4|4|4|4|cell-lsep|1spc>|<cwith|4|4|4|4|cell-rsep|1spc>|<cwith|4|4|4|4|cell-bsep|1spc>|<cwith|4|4|4|4|cell-tsep|1spc>|<cwith|4|4|4|4|cell-rborder|0.5ln>|<cwith|4|4|4|4|cell-bborder|0.5ln>|<cwith|4|4|4|4|cell-lsep|1spc>|<cwith|4|4|4|4|cell-rsep|1spc>|<cwith|4|4|4|4|cell-bsep|1spc>|<cwith|4|4|4|4|cell-tsep|1spc>|<cwith|4|4|4|4|cell-rborder|0.5ln>|<cwith|4|4|4|4|cell-bborder|0.5ln>|<cwith|4|4|4|4|cell-lsep|1spc>|<cwith|4|4|4|4|cell-rsep|1spc>|<cwith|4|4|4|4|cell-bsep|1spc>|<cwith|4|4|4|4|cell-tsep|1spc>|<cwith|5|5|5|5|cell-halign|c>|<cwith|5|5|4|4|cell-lsep|1spc>|<cwith|5|5|4|4|cell-rsep|1spc>|<cwith|5|5|4|4|cell-bsep|1spc>|<cwith|5|5|4|4|cell-tsep|1spc>|<cwith|5|5|4|4|cell-rborder|0.5ln>|<cwith|5|5|4|4|cell-bborder|0.5ln>|<cwith|5|5|4|4|cell-lsep|1spc>|<cwith|5|5|4|4|cell-rsep|1spc>|<cwith|5|5|4|4|cell-bsep|1spc>|<cwith|5|5|4|4|cell-tsep|1spc>|<cwith|5|5|4|4|cell-rborder|0.5ln>|<cwith|5|5|4|4|cell-bborder|0.5ln>|<cwith|5|5|4|4|cell-lsep|1spc>|<cwith|5|5|4|4|cell-rsep|1spc>|<cwith|5|5|4|4|cell-bsep|1spc>|<cwith|5|5|4|4|cell-tsep|1spc>|<cwith|1|-1|1|1|cell-halign|c>|<cwith|1|-1|4|4|cell-halign|c>|<cwith|1|-1|2|2|cell-halign|c>|<cwith|3|3|3|3|cell-halign|c>|<cwith|3|3|5|5|cell-halign|c>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|3|3|1|1|cell-rborder|0.5ln>|<cwith|3|3|1|1|cell-bborder|0.5ln>|<cwith|3|3|1|1|cell-lborder|0.5ln>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|3|3|1|1|cell-rborder|0.5ln>|<cwith|3|3|1|1|cell-bborder|0.5ln>|<cwith|3|3|1|1|cell-lborder|0.5ln>|<cwith|3|3|1|1|cell-lsep|1spc>|<cwith|3|3|1|1|cell-rsep|1spc>|<cwith|3|3|1|1|cell-bsep|1spc>|<cwith|3|3|1|1|cell-tsep|1spc>|<cwith|3|3|4|4|cell-lsep|1spc>|<cwith|3|3|4|4|cell-rsep|1spc>|<cwith|3|3|4|4|cell-bsep|1spc>|<cwith|3|3|4|4|cell-tsep|1spc>|<cwith|3|3|4|4|cell-rborder|0.5ln>|<cwith|3|3|4|4|cell-bborder|0.5ln>|<cwith|3|3|4|4|cell-lsep|1spc>|<cwith|3|3|4|4|cell-rsep|1spc>|<cwith|3|3|4|4|cell-bsep|1spc>|<cwith|3|3|4|4|cell-tsep|1spc>|<cwith|3|3|4|4|cell-rborder|0.5ln>|<cwith|3|3|4|4|cell-bborder|0.5ln>|<cwith|3|3|4|4|cell-lsep|1spc>|<cwith|3|3|4|4|cell-rsep|1spc>|<cwith|3|3|4|4|cell-bsep|1spc>|<cwith|3|3|4|4|cell-tsep|1spc>|<cwith|3|3|3|3|cell-rborder|1ln>|<cwith|3|3|1|1|cell-halign|c>|<cwith|3|3|4|4|cell-halign|c>|<cwith|3|3|2|2|cell-halign|c>|<cwith|4|4|5|5|cell-halign|c>|<cwith|4|4|4|4|cell-lsep|1spc>|<cwith|4|4|4|4|cell-rsep|1spc>|<cwith|4|4|4|4|cell-bsep|1spc>|<cwith|4|4|4|4|cell-tsep|1spc>|<cwith|4|4|4|4|cell-rborder|0.5ln>|<cwith|4|4|4|4|cell-bborder|0.5ln>|<cwith|4|4|4|4|cell-lsep|1spc>|<cwith|4|4|4|4|cell-rsep|1spc>|<cwith|4|4|4|4|cell-bsep|1spc>|<cwith|4|4|4|4|cell-tsep|1spc>|<cwith|4|4|4|4|cell-rborder|0.5ln>|<cwith|4|4|4|4|cell-bborder|0.5ln>|<cwith|4|4|4|4|cell-lsep|1spc>|<cwith|4|4|4|4|cell-rsep|1spc>|<cwith|4|4|4|4|cell-bsep|1spc>|<cwith|4|4|4|4|cell-tsep|1spc>|<cwith|4|4|4|4|cell-halign|c>|<cwith|5|5|5|5|cell-halign|c>|<cwith|5|5|4|4|cell-lsep|1spc>|<cwith|5|5|4|4|cell-rsep|1spc>|<cwith|5|5|4|4|cell-bsep|1spc>|<cwith|5|5|4|4|cell-tsep|1spc>|<cwith|5|5|4|4|cell-rborder|0.5ln>|<cwith|5|5|4|4|cell-bborder|0.5ln>|<cwith|5|5|4|4|cell-lsep|1spc>|<cwith|5|5|4|4|cell-rsep|1spc>|<cwith|5|5|4|4|cell-bsep|1spc>|<cwith|5|5|4|4|cell-tsep|1spc>|<cwith|5|5|4|4|cell-rborder|0.5ln>|<cwith|5|5|4|4|cell-bborder|0.5ln>|<cwith|5|5|4|4|cell-lsep|1spc>|<cwith|5|5|4|4|cell-rsep|1spc>|<cwith|5|5|4|4|cell-bsep|1spc>|<cwith|5|5|4|4|cell-tsep|1spc>|<cwith|5|5|4|4|cell-halign|c>|<cwith|4|5|3|3|cell-halign|c>|<cwith|4|5|1|1|cell-rborder|0.5ln>|<cwith|4|5|1|1|cell-bborder|0.5ln>|<cwith|4|5|1|1|cell-lborder|0.5ln>|<cwith|4|5|1|1|cell-lsep|1spc>|<cwith|4|5|1|1|cell-rsep|1spc>|<cwith|4|5|1|1|cell-bsep|1spc>|<cwith|4|5|1|1|cell-tsep|1spc>|<cwith|4|4|1|1|cell-rborder|0.5ln>|<cwith|4|4|1|1|cell-bborder|0.5ln>|<cwith|4|4|1|1|cell-lborder|0.5ln>|<cwith|4|4|1|1|cell-lsep|1spc>|<cwith|4|4|1|1|cell-rsep|1spc>|<cwith|4|4|1|1|cell-bsep|1spc>|<cwith|4|4|1|1|cell-tsep|1spc>|<cwith|4|5|3|3|cell-rborder|1ln>|<cwith|4|4|3|3|cell-halign|c>|<cwith|4|4|1|1|cell-lsep|1spc>|<cwith|4|4|1|1|cell-rsep|1spc>|<cwith|4|4|1|1|cell-bsep|1spc>|<cwith|4|4|1|1|cell-tsep|1spc>|<cwith|4|4|1|1|cell-rborder|0.5ln>|<cwith|4|4|1|1|cell-bborder|0.5ln>|<cwith|4|4|1|1|cell-lborder|0.5ln>|<cwith|4|4|1|1|cell-lsep|1spc>|<cwith|4|4|1|1|cell-rsep|1spc>|<cwith|4|4|1|1|cell-bsep|1spc>|<cwith|4|4|1|1|cell-tsep|1spc>|<cwith|4|4|1|1|cell-rborder|0.5ln>|<cwith|4|4|1|1|cell-bborder|0.5ln>|<cwith|4|4|1|1|cell-lborder|0.5ln>|<cwith|4|4|1|1|cell-lsep|1spc>|<cwith|4|4|1|1|cell-rsep|1spc>|<cwith|4|4|1|1|cell-bsep|1spc>|<cwith|4|4|1|1|cell-tsep|1spc>|<cwith|4|4|3|3|cell-rborder|1ln>|<cwith|5|5|3|3|cell-halign|c>|<cwith|5|5|1|1|cell-lsep|1spc>|<cwith|5|5|1|1|cell-rsep|1spc>|<cwith|5|5|1|1|cell-bsep|1spc>|<cwith|5|5|1|1|cell-tsep|1spc>|<cwith|5|5|1|1|cell-rborder|0.5ln>|<cwith|5|5|1|1|cell-bborder|0.5ln>|<cwith|5|5|1|1|cell-lborder|0.5ln>|<cwith|5|5|1|1|cell-lsep|1spc>|<cwith|5|5|1|1|cell-rsep|1spc>|<cwith|5|5|1|1|cell-bsep|1spc>|<cwith|5|5|1|1|cell-tsep|1spc>|<cwith|5|5|1|1|cell-rborder|0.5ln>|<cwith|5|5|1|1|cell-bborder|0.5ln>|<cwith|5|5|1|1|cell-lborder|0.5ln>|<cwith|5|5|1|1|cell-lsep|1spc>|<cwith|5|5|1|1|cell-rsep|1spc>|<cwith|5|5|1|1|cell-bsep|1spc>|<cwith|5|5|1|1|cell-tsep|1spc>|<cwith|5|5|3|3|cell-rborder|1ln>|<cwith|4|5|1|1|cell-halign|c>|<cwith|4|5|2|2|cell-halign|c>|<cwith|4|4|3|3|cell-halign|c>|<cwith|4|4|1|1|cell-lsep|1spc>|<cwith|4|4|1|1|cell-rsep|1spc>|<cwith|4|4|1|1|cell-bsep|1spc>|<cwith|4|4|1|1|cell-tsep|1spc>|<cwith|4|4|1|1|cell-rborder|0.5ln>|<cwith|4|4|1|1|cell-bborder|0.5ln>|<cwith|4|4|1|1|cell-lborder|0.5ln>|<cwith|4|4|1|1|cell-lsep|1spc>|<cwith|4|4|1|1|cell-rsep|1spc>|<cwith|4|4|1|1|cell-bsep|1spc>|<cwith|4|4|1|1|cell-tsep|1spc>|<cwith|4|4|1|1|cell-rborder|0.5ln>|<cwith|4|4|1|1|cell-bborder|0.5ln>|<cwith|4|4|1|1|cell-lborder|0.5ln>|<cwith|4|4|1|1|cell-lsep|1spc>|<cwith|4|4|1|1|cell-rsep|1spc>|<cwith|4|4|1|1|cell-bsep|1spc>|<cwith|4|4|1|1|cell-tsep|1spc>|<cwith|4|4|3|3|cell-rborder|1ln>|<cwith|4|4|1|1|cell-halign|c>|<cwith|4|4|2|2|cell-halign|c>|<cwith|5|5|3|3|cell-halign|c>|<cwith|5|5|1|1|cell-lsep|1spc>|<cwith|5|5|1|1|cell-rsep|1spc>|<cwith|5|5|1|1|cell-bsep|1spc>|<cwith|5|5|1|1|cell-tsep|1spc>|<cwith|5|5|1|1|cell-rborder|0.5ln>|<cwith|5|5|1|1|cell-bborder|0.5ln>|<cwith|5|5|1|1|cell-lborder|0.5ln>|<cwith|5|5|1|1|cell-lsep|1spc>|<cwith|5|5|1|1|cell-rsep|1spc>|<cwith|5|5|1|1|cell-bsep|1spc>|<cwith|5|5|1|1|cell-tsep|1spc>|<cwith|5|5|1|1|cell-rborder|0.5ln>|<cwith|5|5|1|1|cell-bborder|0.5ln>|<cwith|5|5|1|1|cell-lborder|0.5ln>|<cwith|5|5|1|1|cell-lsep|1spc>|<cwith|5|5|1|1|cell-rsep|1spc>|<cwith|5|5|1|1|cell-bsep|1spc>|<cwith|5|5|1|1|cell-tsep|1spc>|<cwith|5|5|3|3|cell-rborder|1ln>|<cwith|5|5|1|1|cell-halign|c>|<cwith|5|5|2|2|cell-halign|c>|<cwith|6|6|3|3|cell-halign|c>|<cwith|6|6|1|1|cell-rborder|0.5ln>|<cwith|6|6|1|1|cell-bborder|0.5ln>|<cwith|6|6|1|1|cell-lborder|0.5ln>|<cwith|6|6|1|1|cell-lsep|1spc>|<cwith|6|6|1|1|cell-rsep|1spc>|<cwith|6|6|1|1|cell-bsep|1spc>|<cwith|6|6|1|1|cell-tsep|1spc>|<cwith|6|6|3|3|cell-rborder|1ln>|<cwith|6|6|1|1|cell-halign|c>|<cwith|6|6|2|2|cell-halign|c>|<cwith|6|6|3|3|cell-halign|c>|<cwith|6|6|1|1|cell-rborder|0.5ln>|<cwith|6|6|1|1|cell-bborder|0.5ln>|<cwith|6|6|1|1|cell-lborder|0.5ln>|<cwith|6|6|1|1|cell-lsep|1spc>|<cwith|6|6|1|1|cell-rsep|1spc>|<cwith|6|6|1|1|cell-bsep|1spc>|<cwith|6|6|1|1|cell-tsep|1spc>|<cwith|6|6|3|3|cell-rborder|1ln>|<cwith|6|6|3|3|cell-halign|c>|<cwith|6|6|1|1|cell-lsep|1spc>|<cwith|6|6|1|1|cell-rsep|1spc>|<cwith|6|6|1|1|cell-bsep|1spc>|<cwith|6|6|1|1|cell-tsep|1spc>|<cwith|6|6|1|1|cell-rborder|0.5ln>|<cwith|6|6|1|1|cell-bborder|0.5ln>|<cwith|6|6|1|1|cell-lborder|0.5ln>|<cwith|6|6|1|1|cell-lsep|1spc>|<cwith|6|6|1|1|cell-rsep|1spc>|<cwith|6|6|1|1|cell-bsep|1spc>|<cwith|6|6|1|1|cell-tsep|1spc>|<cwith|6|6|1|1|cell-rborder|0.5ln>|<cwith|6|6|1|1|cell-bborder|0.5ln>|<cwith|6|6|1|1|cell-lborder|0.5ln>|<cwith|6|6|1|1|cell-lsep|1spc>|<cwith|6|6|1|1|cell-rsep|1spc>|<cwith|6|6|1|1|cell-bsep|1spc>|<cwith|6|6|1|1|cell-tsep|1spc>|<cwith|6|6|3|3|cell-rborder|1ln>|<cwith|6|6|1|1|cell-halign|c>|<cwith|6|6|2|2|cell-halign|c>|<cwith|6|6|3|3|cell-halign|c>|<cwith|6|6|1|1|cell-lsep|1spc>|<cwith|6|6|1|1|cell-rsep|1spc>|<cwith|6|6|1|1|cell-bsep|1spc>|<cwith|6|6|1|1|cell-tsep|1spc>|<cwith|6|6|1|1|cell-rborder|0.5ln>|<cwith|6|6|1|1|cell-bborder|0.5ln>|<cwith|6|6|1|1|cell-lborder|0.5ln>|<cwith|6|6|1|1|cell-lsep|1spc>|<cwith|6|6|1|1|cell-rsep|1spc>|<cwith|6|6|1|1|cell-bsep|1spc>|<cwith|6|6|1|1|cell-tsep|1spc>|<cwith|6|6|1|1|cell-rborder|0.5ln>|<cwith|6|6|1|1|cell-bborder|0.5ln>|<cwith|6|6|1|1|cell-lborder|0.5ln>|<cwith|6|6|1|1|cell-lsep|1spc>|<cwith|6|6|1|1|cell-rsep|1spc>|<cwith|6|6|1|1|cell-bsep|1spc>|<cwith|6|6|1|1|cell-tsep|1spc>|<cwith|6|6|3|3|cell-rborder|1ln>|<cwith|6|6|1|1|cell-halign|c>|<cwith|6|6|2|2|cell-halign|c>|<cwith|7|7|3|3|cell-halign|c>|<cwith|7|7|1|1|cell-rborder|0.5ln>|<cwith|7|7|1|1|cell-bborder|0.5ln>|<cwith|7|7|1|1|cell-lborder|0.5ln>|<cwith|7|7|1|1|cell-lsep|1spc>|<cwith|7|7|1|1|cell-rsep|1spc>|<cwith|7|7|1|1|cell-bsep|1spc>|<cwith|7|7|1|1|cell-tsep|1spc>|<cwith|7|7|3|3|cell-rborder|1ln>|<cwith|7|7|1|1|cell-halign|c>|<cwith|7|7|2|2|cell-halign|c>|<cwith|7|7|3|3|cell-halign|c>|<cwith|7|7|1|1|cell-rborder|0.5ln>|<cwith|7|7|1|1|cell-bborder|0.5ln>|<cwith|7|7|1|1|cell-lborder|0.5ln>|<cwith|7|7|1|1|cell-lsep|1spc>|<cwith|7|7|1|1|cell-rsep|1spc>|<cwith|7|7|1|1|cell-bsep|1spc>|<cwith|7|7|1|1|cell-tsep|1spc>|<cwith|7|7|3|3|cell-rborder|1ln>|<cwith|7|7|3|3|cell-halign|c>|<cwith|7|7|1|1|cell-lsep|1spc>|<cwith|7|7|1|1|cell-rsep|1spc>|<cwith|7|7|1|1|cell-bsep|1spc>|<cwith|7|7|1|1|cell-tsep|1spc>|<cwith|7|7|1|1|cell-rborder|0.5ln>|<cwith|7|7|1|1|cell-bborder|0.5ln>|<cwith|7|7|1|1|cell-lborder|0.5ln>|<cwith|7|7|1|1|cell-lsep|1spc>|<cwith|7|7|1|1|cell-rsep|1spc>|<cwith|7|7|1|1|cell-bsep|1spc>|<cwith|7|7|1|1|cell-tsep|1spc>|<cwith|7|7|1|1|cell-rborder|0.5ln>|<cwith|7|7|1|1|cell-bborder|0.5ln>|<cwith|7|7|1|1|cell-lborder|0.5ln>|<cwith|7|7|1|1|cell-lsep|1spc>|<cwith|7|7|1|1|cell-rsep|1spc>|<cwith|7|7|1|1|cell-bsep|1spc>|<cwith|7|7|1|1|cell-tsep|1spc>|<cwith|7|7|3|3|cell-rborder|1ln>|<cwith|7|7|1|1|cell-halign|c>|<cwith|7|7|2|2|cell-halign|c>|<cwith|7|7|3|3|cell-halign|c>|<cwith|7|7|1|1|cell-lsep|1spc>|<cwith|7|7|1|1|cell-rsep|1spc>|<cwith|7|7|1|1|cell-bsep|1spc>|<cwith|7|7|1|1|cell-tsep|1spc>|<cwith|7|7|1|1|cell-rborder|0.5ln>|<cwith|7|7|1|1|cell-bborder|0.5ln>|<cwith|7|7|1|1|cell-lborder|0.5ln>|<cwith|7|7|1|1|cell-lsep|1spc>|<cwith|7|7|1|1|cell-rsep|1spc>|<cwith|7|7|1|1|cell-bsep|1spc>|<cwith|7|7|1|1|cell-tsep|1spc>|<cwith|7|7|1|1|cell-rborder|0.5ln>|<cwith|7|7|1|1|cell-bborder|0.5ln>|<cwith|7|7|1|1|cell-lborder|0.5ln>|<cwith|7|7|1|1|cell-lsep|1spc>|<cwith|7|7|1|1|cell-rsep|1spc>|<cwith|7|7|1|1|cell-bsep|1spc>|<cwith|7|7|1|1|cell-tsep|1spc>|<cwith|7|7|3|3|cell-rborder|1ln>|<cwith|7|7|1|1|cell-halign|c>|<cwith|7|7|2|2|cell-halign|c>|<table|<row|<cell|Shortcut>|<cell|Example>|<cell|Wide variant>|<cell|Shortcut>|<cell|Result>>|<row|<cell|<key|math ~>>|<cell|<math|<wide|x|~>>>|<cell|<math|<wide|x+y|~>>>|<cell|<key|math '>>|<cell|<math|<wide|x|\<acute\>>>>>|<row|<cell|<key|math ^>>|<cell|<math|<wide|x|^>>>|<cell|<math|<wide|x+y|^>>>|<cell|<key|math ‘>>|<cell|<math|<wide|x|\<grave\>>>>>|<row|<cell|<key|math B>>|<cell|<math|<wide|x|\<bar\>>>>|<cell|<math|<wide|x+y|\<bar\>>>>|<cell|<key|math .>>|<cell|<math|<wide|x|\<dot\>>>>>|<row|<cell|<key|math V>>|<cell|<math|<wide|x|\<vect\>>>>|<cell|<math|<wide|AB|\<vect\>>>>|<cell|<key|math ">>|<cell|<math|<wide|x|\<ddot\>>>>>|<row|<cell|<key|math C>>|<cell|<math|<wide|x|\<check\>>>>|<cell|<math|<wide|x+y|\<check\>>>>|<cell|>|<cell|>>|<row|<cell|<key|math U>>|<cell|<math|<wide|x|\<breve\>>>>|<cell|<math|<wide|x+y|\<breve\>>>>|<cell|>|<cell|>>>>>
  </big-table|Keyboard shortcuts for wide mathematical accents.>

  The same accents may be inserted below the expressions using the <prefix|math:under> prefix. For instance, <key|math:under B x + y> can be used in order to enter <math|<wide*|x+y|\<bar\>>>.

  <section|Semantic editing facilities><label|section:semantic_editing_facilities>

  Starting with version 1.0.7.10, <TeXmacs> incorporates several features for the “semantic” editing of mathematical formulas. When used appropriately, this allows you to write documents in which all formulas are at least correct from a syntactical point of view. For instance, in the formulas <math|a+b>, the computer will understand that <math|+> is an operator which applies to the arguments <math|a> and <math|b>. Notice that our “semantics” does not go any further: <TeXmacs> is unaware of the mathematical nature of addition.

  Semantic editing does require additional efforts from the user, at least a little adaptation. For instance, it is the user's job to enter multiplications using the shortcut <key|*> and function applications using <key|space>. Indeed, from the graphical point of view, these operations cannot be distinguished, since they are both printed as invisible whitespace. However, the semantics of these operations is clearly very different.

  Although semantically correct documents are usually not very different from informal presentation-oriented documents as far as typesetting is concerned, the additional user effort may pay off for several reasons:

  <\itemize>
    <item>Documents with more semantics are for instance useful when using formulas as inputs for a computer algebra system.

    <item>Syntactically correct documents are less likely to contain “typos” or more intricate mathematical errors.

    <item>For certain editing operations, such as cut and paste, one may directly select subformulas which are meaningful from the syntactical point of view.

    <item>It reduces the risk of using non standard notations, which will be difficult to understand for potential readers of your work.
  </itemize>

  Furthermore, other semantic facilities might be integrated in the future, such as semantic search and replace, or semantic search on the web.

  In order to activate the semantic editing facilities, please toggle <menu|Edit|Preferences|Mathematics|Semantic editing>. In the semantic editing mode, several of the structured editing features of <TeXmacs> apply to the syntactic structure of the formula, rather than the visual structure of the document. For instance, the <em|semantic focus><label|semantic-focus> is usually a subformula of the <hlink|current focus|../../text/man-structure.en.tm>. Similarly, only syntactically meaningful subformulas can be selected when making a selection.

  The semantic focus is useful for several reasons. First of all, it is displayed in green if the formula is syntactically correct and in red if you made an error. This allows to quickly notice any typos while entering a formula. Secondly, if you have any doubt on the precedence of a mathematical operator or relation, then the semantic focus will inform you on the default interpretation: by putting your cursor right next to your operator, the subexpression to which the operator applies will be highlighted. In the case of an addition, or a more general associative operator, all summands are highlighted.

  <section|Common errors and syntax correction>

  By default, the semantic editing mode “understands” most classical mathematical notations. This is achieved through the use of a carefully designed grammar for mainstream mathematics. Obviously, the use of a fixed grammar may cause the following problems:

  <\itemize>
    <item>Mathematical formulas frequently contain <em|ad hoc> notations. For instance, the formulas might contain some text or meaningful whitespace. Another example of an <em|ad hoc> notation is the sign sequence <math|++-+-+>. In such cases, the user should <strong|explicitly annotate> (<smart-ref|section:semantic_editing_facilities>) the appropriate parts of the formula in order to make them semantically meaningful.

    <item>The <TeXmacs> grammar used for the interpretation of mathematical formulas may be incomplete or inadequate for certain situations. It is possible to customize or extend the grammar using the standard <TeXmacs> macro mechanism. Notations for specific areas may be grouped together in dedicated style packages.
  </itemize>

  Besides these intrinsically hard to avoid problems, the following common and “easy-to-make” mistakes are a further source of trouble for associating semantics to mathematical formulas:

  <\itemize>
    <item>Since <TeXmacs> is a wysiwyg editor, some of the structure of the document is invisible for the user. For instance, the presence of a mathematical formula <math|x+y> is indicated through the use of an italic slant and special spacing. However, in the formula <math|f<around*|(|x|)>> it is easy to type the closing bracket outside the formula, with no visual difference.

    <item>Various mathematical notations are visually ambiguous. For instance, <math|a*<around*|(|b+c|)>> would usually be understood as <math|a\<cdot\><around*|(|b+c|)>>, whereas <math|f<around*|(|x+y|)>> rather corresponds to a function application. In the semantic editing mode, the user is expected to resolve this ambiguity by hand by entering multiplications using <key|*> and spaces using <key|space>. The multiply/apply ambiguity is one of the main sources of syntax errors, since many users do not pay attention to invisible differences. Similarly, the <math|\<wedge\>> glyph could be the “logical and” or the “wedge product”. This “homoglyph” issue will be addressed in more detail in the section on the <strong|semantics of mathematical symbols> (<smart-ref|section:semantics_of_mathematical_symbols>).\ 

    <item>It could be that a text was originally written in <LaTeX> or an old version of <TeXmacs>. In that case, the document contains no special indication on matching brackets or the scopes of big operators. For instance, in the formula <math|<around*|[|x,y|[>>, should we interpret the second bracket as a closing bracket? This is indeed the standard french notation for an interval with an open right end. More generally, all problems that we have mentioned so far tend to be present simultaneously when trying to associate semantics to existing documents.
  </itemize>

  After activation of the semantic editing mode, you may check whether a formula is correct by positioning your cursor inside it and looking at the color of the bounding box of the <strong|semantic focus> (see <smart-ref|section:semantic_editing_facilities>): a<nbsp>green color corresponds to a correct formula and a<nbsp>red color indicates an error in the formula. Alternatively, assuming that the focus is on a mathematical formula, you may select <menu|Focus|Preferences|Highlight incorrect formulas>, in which all incorrect formulas are highlighted inside red boxes.

  For the second kind of “easy-to-make” errors, <TeXmacs> includes an automatic syntax corrector. Assuming that your cursor is inside a formula, you may use <menu|Edit|Correct|Correct all> for the correction of all formulas in your document, or the correction of the current selection. If the versioning tool is activated, then you may use <menu|Edit|Correct|Correct manually> to show the differences between the original and the corrected versions. You may then use the versioning tool to go through these differences and select the preferred versions.

  The precise algorithms which are used for the correction may be enabled or disabled from <menu|Edit|Preferences|Mathematics|Manual correction>:

  <\description>
    <item*|<menu|Remove superfluous invisible operators>>This algorithm is used in order to remove any superfluous function applications or multiplications. For instance, users who are accustomed to editing ASCII files often type spaces around binary infixes such as addition. Such “function applications” will be removed by this algorithm.

    <item*|<menu|Insert missing invisible operators>>In <LaTeX>, multiplications and function applications are never entered explicitly. When importing a <LaTeX> document, it is therefore important to detect and insert missing multiplications and function applications.

    <item*|<menu|Homoglyph substitutions>>This algorithm may perform some other useful substitutions of symbols by visually similar, but semantically distinct symbols. For instance, the backslash symbol<nbsp><math|\\> is replaced by the binary set differences infix (as in <math|X\<setminus\>Y>), whenever appropriate.
  </description>

  From the <menu|Edit|Preferences|Mathematics|Automatic correction>, you may also select those corrections algorithms which should be applied automatically whenever you open a file. The various corrections are always carried out when importing a <LaTeX> file.

  After syntax correction, the remaining errors indicate genuine typos at worst or non standard or non supported notations at best. We also notice that “correct” formulas do not necessarily have the intended meaning. In order to check whether the operators indeed apply to the intended arguments, you should keep an eye on the current focus while typing your formulas.\ 

  <section|Semantics of mathematical symbols><label|section:semantics_of_mathematical_symbols>

  The mathematical symbols in <TeXmacs> all come with a certain number of properties which correspond to their intended meaning. For instance, <TeXmacs> is aware that <math|<op|+>> is an infix operator, whereas ! is rather a postfix, and , a separator.

  <TeXmacs> has special symbols <math|\<mathe\>=2.71828\<cdots\>>, <math|\<mathpi\>=3.14159\<cdots\>> and <math|\<mathi\>> for important mathematical constants, which display differently from the mere characters <math|e>, <math|\<pi\>> and <math|i>, and which can be entered using the shortcuts <shortcut|\<mathe\>>, <shortcut|\<mathpi\>> and <shortcut|\<mathi\>>. We recommend to systematically use these shortcuts.

  Inversely, semantically distinct symbols may display in a similar way. For instance, the comma separator, as in <math|f<around|(|x,y|)>>, is different from the decimal comma, as in <math|3\<comma\>14159\<cdots\>>. Notice that the two symbols admit different spacing rules. Semantically distinct symbols which are rendered by the same glyph are called <em|homoglyphs>. Notice that our semantics is purely syntactic: for instance, the<nbsp><math|+> infix is commonly used for addition, but sometimes also for the concatenation of strings. Nevertheless, these two uses do not differ from a syntactical point of view, since the<nbsp><math|+> symbol remains a binary infix with the same precedence with respect to other symbols.

  The most confusing homoglyphs are the various invisible symbols supported by <TeXmacs>:

  <\itemize>
    <item>The multiplication, entered by <key|*>. Example: <math|a*b>.

    <item>Function application, entered by <key|space>. Example: <math|sin x>.

    <item>An invisible separator, entered by <shortcut|\<nocomma\>>. Example: the matrix <math|A=<around|(|a<rsub|i\<nocomma\>j>|)>>.

    <item>An invisible addition, entered by <shortcut|\<noplus\>>. Example: <math|17\<noplus\><frac*|3|8>>.

    <item>An invisible symbol, entered by <shortcut|\<nosymbol\>>. Example: the increment <math|\<nosymbol\>+1>.

    <item><label|nobracket>An invisible bracket (mainly for internal use). A matching pair of invisible brackets is entered using <key|( var>.
  </itemize>

  Again it is recommended that authors carefully enter these various invisible symbols when appropriate. It is particularly important to distinguish between multiplication and function application, since there is no 100% safe automatic way to make this distinction (we already mentioned the formulas <math|a<around|(|b+c|)>> and <math|f<around|(|x+y|)>> before).

  <TeXmacs> supports two quite general schemes for entering homoglyphs. On the one hand, we often rely on the standard variant system. For instance, <math|\<times\>> and <math|\<ast\>> are obtained using <shortcut|\<times\>> and <shortcut|\<ast\>>. In table<nbsp><reference|homoglyph-table> we have given the complete list of homoglyphs supported by <TeXmacs>.

  <big-table|<block|<tformat|<table|<row|<cell|Shortcut>|<cell|Glyph>|<cell|Example>|<cell|Semantics>>|<row|<cell|<key|*>>|<cell|>|<cell|<math|a*b>>|<cell|Multiplication>>|<row|<cell|<key|space>>|<cell|>|<cell|<math|sin x>>|<cell|Function application>>|<row|<cell|<shortcut|\<nocomma\>>>|<cell|>|<cell|<math|a<rsub|i\<nocomma\>j>=a<rsub|j\<nocomma\>i>>>|<cell|Invisible separator>>|<row|<cell|<shortcut|\<noplus\>>>|<cell|>|<cell|<with|mode|math|17\<noplus\><frac*|3|8>>>|<cell|Invisible addition>>|<row|<cell|<shortcut|\<nosymbol\>>>|<cell|>|<cell|<math|\<nosymbol\>+1>>|<cell|Invisible symbol>>|<row|<cell|<key|( var>>|<cell|>|<cell|<math|\<Phi\>\<equiv\><around*|\<nobracket\>|\<forall\>x,P<around*|(|x|)>|\<nobracket\>>>>|<cell|Invisible bracket(s)>>|<row|<cell|<key|\|>>|<cell|<math|\|>>|<cell|<math|<around*|\||-x|\|>=<around*|\||x|\|>>>|<cell|Absolute value>>|<row|<cell|<key|\| var>>|<cell|<math|\|>>|<cell|<math|<around*|{|x\<in\>\<bbb-R\>\|x\<gtr\>0|}>>>|<cell|Separating bar>>|<row|<cell|<key|\| var var>>|<cell|<math|\|>>|<cell|<math|<around*|\<langle\>|a<rsub|i><rsup|2><mid|\|>a<rsub|j><rsup|2>|\<rangle\>>>>|<cell|Extensible middle bar>>|<row|<cell|<key|\| var var var var>>|<cell|<math|\|>>|<cell|<math|11\<divides\>1001>>|<cell|Divides relation>>|<row|<cell|<key|,>>|<cell|,>|<cell|<math|f<around*|(|x,y|)>>>|<cell|Comma separator>>|<row|<cell|<key|, var>>|<cell|,>|<cell|<math|123\<comma\>456>>|<cell|Decimal comma>>|<row|<cell|<key|.>>|<cell|.>|<cell|<math|123.456>>|<cell|Decimal point>>|<row|<cell|<key|. var>>|<cell|.>|<cell|<math|\<mathlambda\>x\<point\>x<rsup|2>>>|<cell|Dot connector>>|<row|<cell|<key|* var var var>>|<cell|<math|\<cdot\>>>|<cell|<math|\<b-v\>\<cdot\>\<b-w\>>>|<cell|Dot multiplication>>|<row|<cell|<key|. var var>>|<cell|<math|\<cdummy\>>>|<cell|<math|\<cdummy\>+1>>|<cell|Dummy wildcard>>|<row|<cell|<key|:>>|<cell|<math|:>>|<cell|<math|<around*|{|x\<in\>E:P<around*|(|x|)>|}>>>|<cell|Separator>>|<row|<cell|<shortcut|\<of\>>>|<cell|<math|\<of\>>>|<cell|<math|x\<of\><math-ss|Int>>>|<cell|Type satisfaction>>|<row|<cell|<shortcut|\<over\>>>|<cell|<math|\<over\>>>|<cell|<math|121\<over\>11=11>>|<cell|Division>>|<row|<cell|<key|\\ var>>|<cell|<math|\\>>|<cell|<math|\\x>>|<cell|Backslash>>|<row|<cell|<key|\\ var var>>|<cell|<math|\\>>|<cell|<math|\<bbb-N\><rsup|\<gtr\>>=\<bbb-N\>\<setminus\><around*|{|0|}>>>|<cell|Set minus>>|<row|<cell|<key|&>>|<cell|<math|\<wedge\>>>|<cell|<math|1=1\<wedge\>2=2>>|<cell|Logical and>>|<row|<cell|<key|* &>>|<cell|<math|\<exterior\>>>|<cell|<math|\<mathd\>x\<exterior\>\<mathd\>y>>|<cell|Wedge product>>>>>|<label|homoglyph-table>Homoglyphs supported by <TeXmacs>.>

  <section|Customized mathematical semantics>

  We have done our best to support most of the classical mathematical notations. Nevertheless, the user may sometimes want to define notations with a non standard semantics. Certain areas may also require special notations which are not supported by default.

  <TeXmacs> provides a very simple <markup|syntax> primitive, which allows the user to manually override the default syntactical semantics of a formula. Assuming that semantic editing was activated, you may insert the <markup|syntax> primitive using <shortcut|(make 'syntax)> or <menu|Insert|Semantics|Other>. The first argument contains the formula as it should be displayed, whereas the second argument contains the formula as it should be interpreted.

  For instance, if we enter <math|\<cal-R\>> as the first argument and <math|\<less\>> as the second one, then the <math|\<cal-R\>> will be interpreted as a binary relation, exactly in the same way as <math|\<less\>>. Moreover, the spacing around <math|\<cal-R\>> will be adapted, so as to mimic the spacing around <math|\<less\>>. In this particular example, we might have obtained the same result by using the <markup|math-relation> primitive, which is equivalent to <markup|syntax> with<nbsp><math|\<less\>> as its second argument. Most standard operator types are available from <menu|Insert|Semantics>, or using the <prefix|math:syntax> keyboard prefix. In particular, you may use <shortcut|(make 'math-ignore)> to simply ignore a formula and <shortcut|(make 'math-ordinary)> in order to make the formula behave as an ordinary symbol (such as the letter “o”).

  The <markup|syntax> primitive is especially powerful when used in combination with the <TeXmacs> macro language. For instance, consider the formula <math|C=1/2*\<mathpi\>*\<mathi\>*<big|oint>f<around*|(|z|)>*\<mathd\> z>. It is likely that the intended interpretation of <math|1/2*\<mathpi\>*\<mathi\>> is <math|1/<around*|(|2*\<mathpi\>*\<mathi\>|)>> and not <math|<around*|(|1/2|)>*\<mathpi\>*\<mathi\>>. Therefore, if we often use the constant <math|2*\<mathpi\>*\<mathi\>>, then we might want to define a macro<nbsp><markup|twopii> by

  <\tm-fragment>
    <inactive|<assign|twopii|<inactive|<macro|<inactive|<syntax|<math|2*\<pi\>*\<mathi\>>|<math|(2*\<pi\>*\<mathi\>)>>>>>>>
  </tm-fragment>

  Such macros may be grouped together into a style package with the user's favourite notations. Future versions of <TeXmacs> might also provide style packages with notations dedicated to specific<nbsp>areas.

  Let us finally notice that there are usually several ways for redefining the semantics of a formula. For instance, an alternative way to define the macro <markup|twopii> is using

  <\tm-fragment>
    <inactive|<assign|twopii|<inactive|<macro|<math|<around*|\<nobracket\>|2*\<mathpi\>*\<mathi\>|\<nobracket\>>>>>>>
  </tm-fragment>

  where we inserted a pair of invisible brackets around <math|2*\<mathpi\>*\<mathi\>>. Similarly, in the formula

  <\equation*>
    \<mathe\><rsup|<sqrt|x>+\<mathe\><rsup|<sqrt|log x>+\<mathe\><rsup|<sqrt|log log x>+<math-ordinary|\<udots\>\<ddots\>>+log log log x>+log log x>+log x>,
  </equation*>

  we may either select the whole formula and give it the semantics of an ordinary symbol, by pressing<nbsp><shortcut|(make 'math-ordinary)>. However, a nicer solution is to only select the subformula <math|<math-ordinary|\<udots\>\<ddots\>>>, and give it the semantics of an ordinary symbol. Yet another example is the sign sequence <math|++-+-+> mentioned earlier. This sequence can be interpreted correctly by inserting invisible separators between the different signs using the <key|, space> shortcut.

  <chapter|Tabular material>

  Tables offer a general way to align markup in complex manners. They can be useful for the presentation of data, but also for typesetting computer programs or the design of web sites. <TeXmacs> provides a wide variety of parameters to control the precise layout of tables and its cells.

  <section|Creating a table><label|section:creating_tables>

  In order to create a table, you may either use <menu|Insert|Table> or one of the following keyboard shorthands:

  <\description>
    <item*|<key|table N t>>Create a plain table.

    <item*|<key|table N T>>Create a table whose cells are centered.

    <item*|<key|table N b>>Create a “block”, whose cells all have a small border.

    <item*|<key|table N B>>Create a block whose cells are centered.
  </description>

  In math mode, a few other table-like structures are provided:

  <\description>
    <item*|<key|table N m>>Create a matrix.

    <item*|<key|table N d>>Create a determinant.

    <item*|<key|table N c>>Create a choice list.
  </description>

  Examples of a plain table, a centered block and a matrix are shown below. Notice that the environments with the explanatory text below the tables were created using <menu|Insert|Table|Small table>. The use of “small tables” allows you to put several tables besides each other on the same line. For a single large table, one may use <menu|Insert|Table|Big table>.<vspace|0.5fn>

  <\with|par-mode|center>
    <small-table|<tabular|<tformat|<table|<row|<cell|boom>|<cell|tree>>|<row|<cell|hallo>|<cell|hello>>|<row|<cell|wiskunde>|<cell|mathematics>>>>>|A plain table.><small-table|<block*|<tformat|<table|<row|<cell|boom>|<cell|tree>>|<row|<cell|hallo>|<cell|hello>>|<row|<cell|wiskunde>|<cell|mathematics>>>>>|A centered block.><small-table|<math|<with|math-display|true|<matrix|<tformat|<table|<row|<cell|a>|<cell|b>>|<row|<cell|c>|<cell|d>>>>>>>|A matrix.>
  </with>

  <vspace*|0.5fn>There are several other table-like environments and new ones may be created by the user. For instance, using <menu|Insert|Mathematics|Equations> or <key|math &>, you may insert an <markup|eqnarray*> environment, which allows mathematically oriented users to align a list of equations which span over entire lines. An example of such a list of equations is

  <\eqnarray*>
    <tformat|<table|<row|<cell|sin <around|(|f<around|(|x|)>*g<around|(|x|)>|)><rprime|'>>|<cell|=>|<cell|<around|(|f<around|(|x|)>*g<around|(|x|)>|)><rprime|'>*cos <around|(|f<around|(|x|)>*g<around|(|x|)>|)>>>|<row|<cell|>|<cell|=>|<cell|<around|(|f<rprime|'><around|(|x|)>*g<around|(|x|)>+f<around|(|x|)>*g<rprime|'><around|(|x|)>|)>*cos <around|(|f<around|(|x|)>*g<around|(|x|)>|)>>>>>
  </eqnarray*>

  When starting a new table, its size is minimal (usually <math|1\<times\>1>) and its cells are empty. New rows and columns are inserted using the <shortcut|(structured-insert-left)>, <shortcut|(structured-insert-right)>, <shortcut|(structured-insert-up)> and <shortcut|(structured-insert-down)> shorthands. For instance, <shortcut|(structured-insert-right)> creates a new column at the right of the current cursor position, as illustrated in the figure below. You may also start a new row below the current cursor position by hitting <shortcut|(kbd-return)>.

  <\big-figure>
    <\equation*>
      <matrix|<tformat|<table|<row|<cell|a<cursor>>|<cell|b>>|<row|<cell|c>|<cell|d>>>>><space|2em>\<longrightarrow\><space|2em><matrix|<tformat|<table|<row|<cell|a>|<cell|<cursor>>|<cell|b>>|<row|<cell|c>|<cell|>|<cell|d>>>>>
    </equation*>
  <|big-figure>
    Example of the insertion of a new column in a matrix. Assuming that the cursor is at the position indicated in the left-hand matrix, insertion of a new column using <shortcut|(structured-insert-right)> results in the right-hand matrix.
  </big-figure>

  <section|Table editing mode>

  In <TeXmacs>, arbitrary blocks of cells in the table may be formatted in particular ways. For instance, you may give individual cells a background color, but you may also decide an entire column to be horizontally centered. By default, formatting commands operate on individual cells, but this may be changed via <menu|Table|Cell operation mode>. The following operation modes are available:

  <\description>
    <item*|<key|table m c>>Operate on individual cells.

    <item*|<key|table m h>>Operate on rows.

    <item*|<key|table m v>>Operate on columns.

    <item*|<key|table m t>>Operate on the entire table.
  </description>

  It is also possible to select a block of cells using the mouse and perform a single operation on that rectangle.

  <section|Alignment>

  The most frequent formatting operation is the horizontal or vertical alignment of a block of cells. You may use the <shortcut|(geometry-left)>, <shortcut|(geometry-right)>, <shortcut|(geometry-up)> and <shortcut|(geometry-down)> keystrokes to quickly align more to the left, right, top or bottom.

  A specific alignment can also be selected in the <menu|Table|Horizontal cell alignment> and <menu|Table|Vertical cell alignment> menus. Alternatively, you may use keyboard shorthands of the types <key|table h><render-key|<math|x>> and <key|table v ><render-key|<math|x>> for horizontal <abbr|resp.> vertical alignment.

  Similarly, you may specify how the table itself should be aligned with respect to the surrounding text. This is either done via the <menu|Table|Horizontal table alignment> and <menu|Table|Vertical table alignment> submenus, or using keyboard shorthands of the form <key|table H><render-key|<math|x>> or <key|table V><render-key|<math|x>>. Here <render-key|<math|x>> represents <key|l> for “left”, <key|c> for “centered”, <key|r> for “right”, <key|b> for “bottom” and <key|t> for “top”.

  <section|Size>

  Using <menu|Table|Cell width|Set width> <abbr|resp.> <menu|Table|Cell height|Set height> you may specify the width or height of a cell. In fact, the specified width (or height) may be taken into account in three different ways:

  <\description>
    <item*|Minimum mode>The actual width of the cell will be the minimum of the specified width and the width of the box inside the cell.

    <item*|Exact mode>The width of the cell will be precisely the specified one.

    <item*|Maximum mode>The actual width of the cell will be the maximum of the specified width and the width of the box inside the cell.
  </description>

  The border width and the cell padding (to be explained below) are taken into account in the size of the box inside the cell.

  You may also specify the width and the height of the entire table in <menu|Table|Special table properties>. In particular, you may specify the table to run over the entire width of a paragraph. When specifying a width (or height) for the entire table, you may specify how the unused space is distributed over the cells using <menu|Table|Special cell properties|Distribute unused space>. By default, the unused space is equally distributed.

  <section|Border and background color>

  You may specify the border widths and padding spaces of a cell in all possible four directions: on the left, on the right, at the bottom and at the top (see <menu|Table|Cell border>). You have keyboard shorthands of the forms <key|table b><render-key|<math|x>> and <key|table p ><render-key|<math|x>> in order to specify border widths and cell padding.

  The default border width for cells in the block environment is <verbatim|1ln>, i.e. the standard line width in the current font (like the width of a fraction bar). This width occurs at the right and the bottom of each cell (except when the cell is on the first row or column). The default horizontal cell padding is <verbatim|1spc>: the width of a white space in the current font. The default vertical cell padding is <verbatim|1sep>: the standard minimal separation between two close boxes.

  Cells may be given a background color via <menu|Table|Cell background color>.

  The entire table may also be given a border and a table padding in <menu|Table|Special table properties|Border>. In this case, the padding occurs outside the border.

  <section|Advanced features>

  In the menus, you also find some other more special features for tables. Very briefly, these include the following:

  <\itemize>
    <item>Change the “span” of a cell and let it run over its neighbouring cells on its right and below.

    <item>Creation of entire subtables inside cells.

    <item>Correction of the depth and height of text, in order to let the baselines match.

    <item>Horizontal hyphenation of cell contents and vertical hyphenation of the entire table.

    <item>Gluing several rows and/or columns together, so that the glued cells become “part of the borders” of the remaining cells.

    <item>Deactivation of the table, in order to see its “source code”.

    <item>Setting the “extension center” of a table. From now on, the formatting properties of this cell will be used for new cells created around this center.

    <item>Specification of the minimal and maximum size of a table, which will be respected during further editing. (this is mainly useful when creating table macros).
  </itemize>

  Currently, all tables come inside an environment like <markup|tabular>, <markup|block>, <markup|matrix>, etc. When creating your own table macros, you may use <menu|Table|Special table properties|Extract format> to extract the format from a given table.

  <chapter|Links and automatically generated content>

  <section|Creating labels, links and references>

  You may create a new inactive label using <shortcut|(make-label)> or <menu|Insert|Link|Label> and a reference to this label using <shortcut|(make 'reference)> or <menu|Insert|Link|Reference>. After typing the name of the label or reference, remember to hit <shortcut|(kbd-return)> in order to <hlink|activate|../text/keyboard/man-hybrid.en.tm> it. You may also type the first characters of the name of a reference and use the <key|tab> key in order to automatically complete it.

  You should be careful to put the label at a point where its number will be correct. When labeling sections, the recommended place is just after the sectional tag. When labeling single equations (created using <menu|Insert|Mathematics|Equation>), the recommended place is at the start inside the equation. When labeling multiple equations (created using <menu|Insert|Mathematics|Equations>), you must put the labels just behind the equation numbers. Recall that you may use <shortcut|(numbered-toggle (focus-tree))> in order to transform an unnumbered environment or equation into a numbered one, and vice versa.

  It is possible to create hyperlinks to other documents using <key|inactive \<gtr\>> or <menu|Insert|Link|Hyperlink>. The first field of the hyperlink is the associated text, which is displayed in blue when activated. The second field contains the name of a document, which may be on the web. As is usual for hyperlinks, a link of the form <verbatim|#<with|font-shape|italic|label>> points to a label in the same document and a link of the form <verbatim|<with|font-shape|italic|url>#<with|font-shape|italic|label>> points to a label in the document located at <verbatim|<with|font-shape|italic|url>>.

  In a similar fashion, an action may be associated to a piece of text or graphics using <key|inactive *> or <menu|Insert|Link|Action>. The second field now contains a Guile/Scheme script command, which is executed whenever you double click on the text, after its activation. For security reasons, such scripts are not always accepted. By default, you are prompted for acceptation; this default behaviour may be changed in <menu|Options|Security>. Notice that the Guile/Scheme command\ 

  <\verbatim>
    \ \ \ \ (system "shell-command")
  </verbatim>

  evaluates <verbatim|shell-command> as a shell command.

  Finally, you may directly include other documents inside a given document using <key|inactive i> or <menu|Insert|Link|Include>. This allows you for instance to include the listing of a program in your text in such a way that your modifications in your program are automatically reflected in your text.

  <section|Inserting images>

  You can include images in the text using the menu <menu|Insert|Image> or using drag-and-drop. Currently, <TeXmacs> recognizes the <verbatim|ps>, <verbatim|eps>, <verbatim|tif>, <verbatim|pdf>, <verbatim|svg>, <verbatim|png>, <verbatim|pdm>, <verbatim|gif>, <verbatim|ppm>, <verbatim|xpm> and <verbatim|fig> file formats.

  By default, images are displayed at their design sizes and aligned at their bottom lines. Alternative widths, heights and alignment offsets may be specified in the image chooser dialogue window, using <hlink|<TeXmacs> notation for lengths|../../devel/format/basics/lengths.en.tm>.\ 

  <\itemize>
    <item>When specifying a new width, but no height at the prompt (or vice versa), the image is resized so as to preserve the aspect ratio. For instance, entering a width of <verbatim|1par> will make the image span over the entire paragraph width and adjust the height proportionally.

    You may use <verbatim|w> and <verbatim|h> as special lengths for the default width and height of the image. For instance, specifying <verbatim|2w> and <verbatim|2h> for the width and the height, the image will be displayed at twice its default size.

    <item>When specifying an alternative alignment, you may use the <verbatim|w> and <verbatim|h> lengths for the displayed width and height (<abbr|i.e.> <verbatim|w> and <verbatim|h> no longer stand for the default width and height). For instance, using <verbatim|-0.5h> for the <math|y>-offset will vertically align the image at its center.
  </itemize>

  We also included a script to convert <name|Xfig> pictures, with optional <LaTeX> formulas in it, into encapsulated postscript. In order to include a <LaTeX> formula in an <verbatim|xfig> picture, we recall you should enter the formula as text, while selecting a <LaTeX> font and setting the special flag in the text flags.

  <\remark>
    For the support of certain formats, <TeXmacs> may rely on external converters to more standard formats such as <name|Ghostscript>, <name|ImageMagick>, <name|Inkscape>, or <name|rsvg-convert>. If necessary, then you may consider installing these tools or ask your system administrator.
  </remark>

  <section|Generating a table of contents>

  It is very easy to generate a table of contents for your document. Just put your cursor at the place where you want your table of contents and click on <menu|Insert|Automatic|Table of contents>.

  In order to generate the table of contents, you should be in a mode where page breaks are visible (select paper for the Screen rendering option of the Format tab in <menu|Document|Page...>), so that the appropriate references to page numbers can be computed. Next, use <menu|Document|Update|Table of contents> or <menu|Document|Update|All> to generate the table of contents. You may have to do this several times, until the document does not change anymore. Indeed, the page numbers may change as a result of modifications in the table of contents!

  <section|Compiling a bibliography>

  <subsubsection*|Editing files with bibliographic entries>

  <TeXmacs> uses the <BibTeX> model for its bibliographies. Manuals about <BibTeX> can easily be found at various places on the web. <BibTeX> files can either be entered and edited using <TeXmacs> itself or using an external tool. Some external tools offer possibilities to search and retrieve bibliographic entries on the web, which can be a reason to prefer such tools from time to time. <TeXmacs> implements good converters for <BibTeX> files, so several editors can easily be used in conjunction.

  The built-in editor for <BibTeX> files is automatically used for files with the <verbatim|.bib> extension. New items can easily be added using <menu|Insert|Database entry>. When creating a new entry, required fields appear in dark blue, alternative fields in dark green and optional fields in light blue. The special field inside the header of your entry is the name of your entry, which will be used later for references to this entry. When editing a field, you may use <shortcut|(kbd-return)> to confirm it and jump to the next one (blank optional fields will automatically be removed when doing this). When the cursor is inside a bibliographic entry, additional fields may also be added using <menu|Focus|Insert above> and <menu|Focus|Insert below>.

  <BibTeX> contains a few unnatural conventions for entering names of authors and managing capitalization inside titles. When editing <BibTeX> files using <TeXmacs>, these conventions are replaced by the following more user friendly conventions:

  <\itemize>
    <item>When entering authors (inside “Author” or “Editor” fields), use the <markup|name> tag for specifying last names (using <menu|Insert|Last name> or <shortcut|(make 'name)>) For instance, “Albert Einstein” should be entered as “Albert <name|Einstein>” or as “A. <name|Einstein>”. Special particles such as “von” can be entered using <menu|Insert|Particle>. Title suffices such as “Jr.” can be entered similarly using <menu|Insert|Title suffix>.

    <item>When entering titles, do not capitalize, except for the first character and names or concepts that always must be. For instance, use “Riemannian geometry” instead of “Riemannian Geometry” and “Differential Galois theory” instead of “Differential Galois Theory”.
  </itemize>

  <subsubsection*|Inserting citations and compiling bibliographies>

  Assuming that you have created a <verbatim|.bib> file with your bibliographic references, the mechanism to automatically compile a bibliography is the following:

  <\itemize>
    <item>Use <menu|Insert|Link|Citation> and <menu|Insert|Link|Invisible citation> to insert citations, which correspond to entries in your <verbatim|.bib> file.

    <item>At the place where your bibliography should be compiled, click on <menu|Insert|Automatic|Bibliography>. At the prompt, you should enter a <verbatim|bibtex> style (such as <verbatim|plain>, <verbatim|alpha>, <verbatim|abbrv>, etc.) and your <verbatim|.bib> file.

    <item>Use <menu|Document|Update|Bibliography> in order to compile your bibliography.
  </itemize>

  Notice that additional BiB<TeX> styles should be put in the directory <verbatim|~/.TeXmacs/system/bib>

  <section|Generating an index>

  For the generation of an index, you first have to put index entries in your document using <menu|Insert|Link|Index entry>. At a second stage, you must put your cursor at the place where you want your index to be generated and click on <menu|Insert|Automatic|Index>. The index is than generated in a similar way as the table of contents.

  In the <menu|Insert|Link|Index entry> menu, you find several types of index entries. The simplest are “main”, “sub”, “subsub”, which are macros with one, two and three arguments respectively. Entries of the form “sub” and “subsub” may be used to subordinate index entries with respect to other ones.

  A complex index entry takes four arguments. The first one is a key how the entry has to be sorted and it must be a “tuple” (created using <key|inactive \<less\>>) whose first component is the main category, the second a subcategory, etc. The second argument of a complex index entry is either blank or “strong”, in which case the page number of your entry will appear in a bold typeface. The third argument is usually blank, but if you create two index entries with the same non-blank third argument, then this will create a “range” of page numbers. The fourth argument, which is again a tuple, is the entry itself.

  It is also possible to create an index line without a page number using “interject” in <menu|Insert|Link|Index entry>. The first argument of this macro is a key for how to sort the index line. The second argument contains the actual text. This construct may be useful for creating different sections “A”, “B”, etc. in your index.

  <section|Compiling a glossary>

  Glossaries are compiled in a similar way as indexes, but the entries are not sorted. A “regular” glossary entry just contains some text and a page number will be generated for it. An “explained” glossary entry contains a second argument, which explains the notation. A “duplicate” entry may be used to create a page number for the second occurrence of an entry. A glossary line creates an entry without a page number.

  <section|Multiple extractions>

  <TeXmacs> allows users to create multiple bibliographies, tables of contents, indexes, <abbr|etc.> inside the same document. Let us explain how to do this for bibliographies; the procedure is similar for other types of automatically generated content.

  First of all, every separate bibliography is identified by a “name”. The default name of the bibliography is <verbatim|bib>. Using <menu|Insert|Link|Alternate|Bibliography>, it is possible to specify a different bibliography (than the default one) for a certain region of text.

  For instance, to specify that a given citation should appear in a second bibliography with name <verbatim|bib2>, you should proceed as follows:

  <\itemize>
    <item>Click on <menu|Insert|Link|Alternate|Bibliography> and enter <verbatim|bib2> on the prompt. This will insert an empty <markup|with-bib> tag into your document, with the cursor inside.

    <item>Inside this <markup|with-bib> tag, enter your citation, using <menu|Insert|Link|Citation>.
  </itemize>

  If needed, the <markup|with-bib> tag can be made to span over a large portion of text. All citations inside this span will be be put into the bibliography with name <verbatim|bib2>.

  The bibliography <verbatim|bib2> itself should be created in a similar way: first click on <menu|Insert|Link|Alternate|Bibliography> and enter <verbatim|bib2> on the prompt. Next insert the bibliography as usual, <em|via> <menu|Insert|Automatic|Bibliography>. Now do <menu|Document|Update|All> as many times as need in order to generate the bibliography and get all links right.

  <section|Books and multifile documents >

  When a document gets really large, you may want to subdivide it into smaller pieces. This both makes the individual pieces more easily reusable in other works and it improves the editor's responsiveness. An entire file can be inserted into another one using <menu|Insert|Link|Include>. In order to speed up the treatment of included documents, they are being buffered. In order to update all included documents, you should use <menu|Tools|Update|Inclusions>.

  When writing a book, one usually puts the individual chapters in files <verbatim|c1.tm>, <verbatim|c2.tm> until <verbatim|cn.tm>. One next creates one file <verbatim|book.tm> for the whole book, in which the files <verbatim|c1.tm>, <verbatim|c2.tm> until <verbatim|cn.tm> are included using the above mechanism. The table of contents, bibliography, etc. are usually put into <verbatim|book.tm>.

  In order to see cross references to other chapters when editing a particular chapter <verbatim|ci.tm>, one may specify <verbatim|book.tm> as a “master file” for the files <verbatim|c1.tm> to <verbatim|cn.tm> using <menu|Tools|Project|Attach master>. Currently, the chapter numbers themselves are not dealt with by this mechanism, so you may want to manually assign the environment variable <src-var|chapter-nr> at the start of each chapter file in order to get the numbering right when editing.

  <chapter|Creating technical pictures>

  Besides the possibility to include pictures which were created using other programs, <TeXmacs> includes a rudimentary tool for creating your own drawings. Although this tool has less features than several most special purpose graphical editors, it does have the advantage that it is fully integrated with <TeXmacs>. In particular, it is easy to insert text, mathematics and hyperlinks inside your pictures. Moreover, pictures which are created in this way often look nicer, because they use the same fonts and default line width as the surrounding text.

  <section|Starting a new picture>

  You may start drawing a new picture using <menu|Insert|Image|Draw image>. In some cases, you may also want to draw something on top of an existing image (or other kinds of content). This can be done by selecting the image or content on top of which you want to draw, and then click on <menu|Insert|Image|Draw over selection>.

  By default, the inserted image spans over the whole paragraph. You may adjust its size using the keyboard shortcuts <shortcut|(graphics-decrease-hsize)>, <shortcut|(graphics-increase-hsize)>, <shortcut|(graphics-decrease-vsize)>, <shortcut|(graphics-increase-vsize)> (to adjust the size a bit faster, you may use <shortcut|(graphics-decrease-hsize-fast)>, <shortcut|(graphics-increase-hsize-fast)>, <shortcut|(graphics-decrease-vsize-fast)>, <shortcut|(graphics-increase-vsize-fast)>). You may also specify an explicit size using <menu|Insert|Geometry|Size>. After completion of your drawing, you may automatically crop the size of your picture to its actual size (plus some additional padding), using <menu|Insert|Geometry|Crop>.

  For technical pictures, it is often useful to display a grid while you are drawing. This can be done using<nbsp><menu|Insert|Grid|Type|Cartesian>. In the menu <menu|Insert|Grid> it is also possible to adjust the colors of the axes and the grid-lines, as well as the number of subunit grid-lines per unit grid-line. By default, grids will also be printed; you need to remove them after completing your drawing if you do not want this.

  By default, <TeXmacs> places the origin of the grid at the center of the screen and uses a <verbatim|1cm> unit. You may scroll the picture using the arrow keys <shortcut|(graphics-move-origin-left)>, <shortcut|(graphics-move-origin-right)>, <shortcut|(graphics-move-origin-up)>, <shortcut|(graphics-move-origin-down)> (or <shortcut|(graphics-move-origin-left-fast)>, <shortcut|(graphics-move-origin-right-fast)>, <shortcut|(graphics-move-origin-up-fast)>, <shortcut|(graphics-move-origin-down-fast)> if you want to move fast). You may specify a different unit using the <menu|Insert|Geometry|Unit> menu. You may also zoom in and out using <shortcut|(graphics-zoom-in)> and <shortcut|(graphics-zoom-out)>, or from the <menu|Insert|Geometry|Zoom> menu.

  <section|Inserting new objects>

  After insertion of a new picture or clicking inside an existing picture, the second mode dependent toolbar shows a<nbsp>list of icons which are useful in graphics mode. In particular, the second group of icons <icon|tm_point_mode.xpm>, <icon|tm_line_mode.xpm>, <icon|tm_cline_mode.xpm>, <icon|tm_spline_mode.xpm>, <icon|tm_cspline_mode.xpm>, <icon|tm_arc_mode.xpm>, <icon|tm_carc_mode.xpm>, <icon|tm_textat_mode.xpm>, <icon|tm_math.xpm> on this toolbar allows you to select the kind of objects that you want to insert. <TeXmacs> currently implements the following primitive graphical objects:

  <\description>
    <item*|Points>When selecting point mode using <icon|tm_point_mode.xpm> or <menu|Insert|Point>, you may insert simple points with the left mouse button.

    <item*|Lines and polygons>When selecting line mode using <icon|tm_line_mode.xpm> or <menu|Insert|Line>, you may insert a new broken line with the left mouse button: at every new click a new point is inserted and the last point is inserted using a double click. Polygon mode (<icon|tm_cline_mode.xpm> or <menu|Insert|Polygon>) is a variant of line mode, with this difference that an additional segment is inserted between the first and the last points.

    <item*|Splines and closed splines>Spline mode is selected using <icon|tm_spline_mode.xpm> or <menu|Insert|Spline>. This mode is similar to line mode, except that we now draw a smooth curve through the specified points. Again, this mode admits a closed variant (<icon|tm_cspline_mode.xpm> or <menu|Insert|Closed spline>).

    <item*|Arcs and circles>Arc mode is selected using <icon|tm_arc_mode.xpm> or <menu|Insert|Arc>. In this mode, you may insert arcs going through three points specified through left mouse clicks. Similarly, you may use circle mode (<icon|tm_carc_mode.xpm> or <menu|Insert|Circle>) for drawing circles.

    <item*|Text and mathematics>When selecting text mode (<icon|tm_textat_mode.xpm> or <menu|Insert|Text>) or mathematics mode (<icon|tm_math.xpm> or <menu|Insert|Mathematics>), you may enter text (or mathematics) at an arbitrary position in the picture, again using the left mouse button.
  </description>

  Typical examples of these basic objects are shown in the figures below:

  <\center>
    <tabular*|<tformat|<table|<row|<cell|<small-figure|<with|gr-mode|point|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|3cm|3cm|center>|<graphics||<point|0.499041|-0.00699497>|<point|-0.919136|-0.23983>|<point|0.329706|-1.19234>>>|Points.>>|<cell|<small-figure|<with|gr-mode|<tuple|edit|line>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|3cm|3cm|center>|<graphics||<line|<point|-0.926313|0.839678>|<point|0.809366318296071|0.564509194337875>|<point|-0.862812541341447|-0.13399589892843>|<point|1.04220134938484|-0.260996824976849>|<point|-0.121973806059003|-1.17117012832385>>>>|Lines.>>|<cell|<small-figure|<with|gr-mode|<tuple|edit|cline>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|3cm|3cm|center>|<graphics||<cline|<point|-0.742988|0.839678>|<point|0.844523085064162|0.691510120386294>|<point|0.886856727080302|-0.769000529170525>|<point|-0.425486175420029|-1.2770042333642>|<point|-1.25099219473475|-0.13399589892843>>>>|Polygons.>>>>>>

    \;

    <tabular*|<tformat|<table|<row|<cell|<small-figure|<with|gr-mode|<tuple|edit|spline>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|3cm|3cm|center>|<graphics||<spline|<point|-1.1308|1.0844>|<point|0.880043656568329|0.661066278608281>|<point|-0.855635666093399|-0.0374388146580235>|<point|0.901210477576399|-0.48194205582749>|<point|-0.516966529964281|-1.1804471490938>>>>|Splines.>>|<cell|<small-figure|<with|gr-mode|<tuple|edit|cspline>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|3cm|3cm|center>|<graphics||<cspline|<point|-0.651144|0.788067>|<point|0.89403360232835|0.322397142479164>|<point|0.640031750231512|-0.905278475988887>|<point|-0.566477047228469|-1.20161397010187>|<point|-1.15914803545443|-0.206773382722582>>>>|Closed splines.>>|<cell|<small-figure|<with|gr-mode|<tuple|edit|arc>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|3cm|3cm|center>|<graphics||<arc|<point|-0.827656|-1.15928>|<point|0.865689906072232|-0.5454425188517>|<point|-0.806488953565286|0.87273448868898>>>>|Arcs.>>>>>>

    \;

    <tabular*|<tformat|<table|<row|<cell|<small-figure|<with|gr-mode|<tuple|edit|carc>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|3cm|3cm|center>|<graphics||<carc|<point|-0.262964677867443|0.990458393967456>|<point|1.02821140362482|-0.0467158354279667>|<point|-0.0724632887948141|-1.1473905278476>>>>|Circles.>>|<cell|<small-figure|<with|gr-mode|<tuple|edit|text-at>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|3cm|3cm|center>|<graphics||<text-at|Hello|<point|-0.164307|0.545955>>>>|Text.>>|<cell|<small-figure|<with|gr-mode|<tuple|edit|math-at>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|3cm|3cm|center>|<graphics||<math-at|\<mathe\><rsup|\<mathpi\>*\<mathi\>>=-1|<point|-1.08166|-0.533553>>>>|Mathematics.>>>>>>
  </center>

  <section|Editing objects>

  Any of the modes which allows for the insertion of new objects (points, lines, polygons, etc.) also allows you to directly edit existing objects. More precisely, as soon as you go over an existing object with your mouse, then the control points for that object will be highlighted automatically. Several editing operations are supported:

  <\description>
    <item*|Moving control points>When your mouse is sufficiently close to a control point, then it will be possible to drag and drop the control point to somewhere else using the left mouse button.

    <item*|Inserting new control points>For objects with an arbitrary number of control points, such as broken lines, polygons, splines and closed splines, it is possible to insert new points on existing edges. In order to do so, move the mouse pointer on the edge where you want to insert a new point; the two neighbouring control points should be highlighted. Then insert a new point drag and move it around using drag and drop for the first mouse button.

    <item*|Removing control points>Using the middle mouse button, it is possible to remove control points (and eventually the object itself).

    <item*|Removing the entire object>Using the middle mouse button while simultaneously pressing the shift key <key|S-> removes the entire object which is currently highlighted.
  </description>

  While editing, it should also be noticed that <TeXmacs> attempts to automatically <em|snap> the mouse pointer to control points or edges of existing objects, as well as to intersection points of two curves and points on the grid. This makes it possible to quickly draw complex pictures which are exact, and not merely exact up to one or more pixels (and ugly when magnified or printed). Around boxes with text or mathematical formulas, there are also eight invisible control points to which <TeXmacs> will attempt to snap the mouse pointer. This makes it easier to draw diagrams as in figure<nbsp><reference|diagram-fig> below.

  Graphical objects are drawn in a specific <em|stacking order> which has the effect that certain objects may be hidden by other objects. Using <shortcut|(graphics-zmove 'closer)> and <shortcut|(graphics-zmove 'farther)>, you may move the currently highlighted object closer to or farther away from the eye for this stacking order. In a similar vein, certain control points may become unaccessible, because hidden by closer control points. In that case, you may use <key|tab> to cycle through all possibilities for the current cursor position.

  <\big-figure|<with|gr-mode|<tuple|edit|spline>|gr-frame|<tuple|scale|1cm|<tuple|0.729978gw|0.140033gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-grid|<tuple|empty>|gr-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|10|none>>|gr-edit-grid|<tuple|empty>|gr-edit-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-text-at-halign|center|gr-arrow-end|\<gtr\>|gr-auto-crop|true|<graphics||<with|text-at-halign|center|<math-at|A|<point|-5|3>>>|<with|text-at-halign|center|<math-at|B|<point|-3.5|3>>>|<with|text-at-halign|center|<math-at|C|<point|-5|2>>>|<with|text-at-halign|center|<math-at|D|<point|-3.5|2>>>|<with|text-at-halign|center|<math-at|X|<point|-2|3>>>|<with|text-at-halign|center|<math-at|Y|<point|-2|2>>>|<with|arrow-end|\<gtr\>|<line|<point|-4.75015|3.12052>|<point|-3.75133946289192|3.1205185871147>>>|<with|arrow-end|\<gtr\>|<line|<point|-5|2.88244>|<point|-5.0|2.35861225029766>>>|<with|arrow-end|\<gtr\>|<line|<point|-4.75637|2.12052>|<point|-3.76357653128721|2.1205185871147>>>|<with|arrow-end|\<gtr\>|<line|<point|-3.5|2.88244>|<point|-3.5|2.35861225029766>>>|<with|arrow-end|\<gtr\>|<line|<point|-3.24864|3.12052>|<point|-2.26367575076068|3.1205185871147>>>|<with|arrow-end|\<gtr\>|<line|<point|-3.23641|2.12052>|<point|-2.21995303611589|2.1205185871147>>>|<with|arrow-end|\<gtr\>|<line|<point|-2|2.88244>|<point|-2.0|2.35861225029766>>>|<with|arrow-end|\<gtr\>|<spline|<point|-4.75015|3.35861>|<point|-2.87767892578383|3.71332186797195>|<point|-1.31133417118666|3.26881862680249>|<point|-1.7800304273052|2.35861225029766>>>>>>
    <label|diagram-fig>Example of a diagram which was drawn by using snapping to the eight control points around each box with a mathematical formula. Notice also that we cropped the graphics to its actual size.
  </big-figure>

  <section|Specification of style properties>

  Each of the fundamental types of graphical objects also admits a certain number of style properties which affect the rendering. The following style properties exist:

  <paragraph|Color>This property applies to any of the graphical object types and specifies the color.

  <paragraph|Fill color>This property applies to all graphical object types except text and mathematics. It specifies a fill color for the object.

  <\big-figure|<with|gr-mode|<tuple|edit|cspline>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-fill-color|pastel red|gr-color|dark magenta|gr-auto-crop|true|<graphics||<cspline|<point|-4.82503|-0.183391>|<point|-4.54985778542135|2.12379282973938>|<point|-3.34334898796137|1.57345548352957>|<point|-2.623677073687|0.070611191956608>|<point|-3.89368633417119|0.790283106230983>>|<with|fill-color|pastel yellow|<cspline|<point|-1.75584|2.22963>|<point|-2.24267429554174|1.23478634740045>|<point|-1.62883648630771|0.324613044053446>|<point|-1.88283833840455|1.21361952639238>>>|<with|color|dark blue|fill-color|pastel orange|<cspline|<point|-0.0201581|1.78512>|<point|-0.845664109009128|1.36178727344887>|<point|-0.464661330863871|0.493947612118005>|<point|0.424345151475063|0.917284032279402>>>|<with|color|dark magenta|fill-color|pastel red|<cspline|<point|2.11769|1.99679>|<point|2.81619592538696|0.811449927239053>|<point|1.56735348591083|0.769116285222913>>>>>>
    Examples of a few closed splines with different colors and fill colors.
  </big-figure>

  <paragraph|Opacity>This property also applies to any of the graphical object types and specifies an opacity between 0% and 100%. The default is 100% and lower opacities will make the object more transparent.

  <big-figure|<with|gr-mode|<tuple|edit|carc>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-grid|<tuple|empty>|gr-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|10|none>>|gr-edit-grid|<tuple|empty>|gr-edit-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-fill-color|pastel green|gr-color|dark green|gr-opacity|20%|gr-auto-crop|true|<graphics||<with|color|dark brown|fill-color|brown|<cline|<point|-5|1>|<point|-5.0|-1.0>|<point|5.0|-1.0>|<point|5.0|1.0>>>|<with|color|dark green|fill-color|pastel green|<carc|<point|4|-1.5>|<point|4.5|-1.0>|<point|4.0|-0.5>>>|<with|color|dark green|opacity|80%|fill-color|pastel green|<carc|<point|2|-1.5>|<point|2.5|-1.0>|<point|2.0|-0.5>>>|<with|color|dark green|opacity|60%|fill-color|pastel green|<carc|<point|0|-1.5>|<point|0.5|-1.0>|<point|0.0|-0.5>>>|<with|color|dark green|opacity|40%|fill-color|pastel green|<carc|<point|-2|-1.5>|<point|-1.5|-1.0>|<point|-2.0|-0.5>>>|<with|color|dark green|opacity|20%|fill-color|pastel green|<carc|<point|-4|-1.5>|<point|-3.5|-1.0>|<point|-4.0|-0.5>>>>>|Examples of the same object with increasing opacities on top of another object.>

  <paragraph|Point style>A few different point styles are supported for displaying points: solid disks, round circles and squares.

  <big-figure|<with|gr-mode|<tuple|edit|text-at>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-fill-color|red|gr-grid|<tuple|empty>|gr-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|10|none>>|gr-edit-grid|<tuple|empty>|gr-edit-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-point-style|square|gr-text-at-halign|center|gr-auto-crop|true|<graphics||<with|fill-color|red|<point|-2|0>>|<with|fill-color|red|point-style|round|<point|0|0>>|<with|fill-color|red|point-style|square|<point|2|0>>|<with|text-at-halign|center|<text-at|Square|<point|2|0.5>>>|<with|text-at-halign|center|<text-at|Round|<point|0|0.5>>>|<with|text-at-halign|center|<text-at|Disk|<point|-2|0.5>>>>>|The different point styles for black color and red fill color.>

  <paragraph|Line width>The line width property applies to all curves (that is, to broken lines, polygons, splines, closed splines, arcs and circles). By default it is <verbatim|1ln>, the width of the fraction bar in mathematical formulas, but any <TeXmacs> length unit can be used instead.

  <\big-figure|<with|gr-mode|<tuple|edit|text-at>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-grid|<tuple|empty>|gr-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|10|none>>|gr-edit-grid|<tuple|empty>|gr-edit-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-line-width|5ln|gr-auto-crop|true|<graphics||<spline|<point|-3|0>|<point|-2.0|0.3>|<point|0.0|-0.3>|<point|2.0|0.3>|<point|3.0|0.0>>|<with|line-width|0.5ln|<spline|<point|-3|1>|<point|-2.0|1.3>|<point|0.0|0.7>|<point|2.0|1.3>|<point|3.0|1.0>>>|<with|line-width|2ln|<spline|<point|-3|-1>|<point|-2.0|-0.7>|<point|0.0|-1.3>|<point|2.0|-0.7>|<point|3.0|-1.0>>>|<with|line-width|5ln|<spline|<point|-3|-2>|<point|-2.0|-1.7>|<point|0.0|-2.3>|<point|2.0|-1.7>|<point|3.0|-2.0>>>|<text-at|0.5ln|<point|3.5|1>>|<text-at|1ln|<point|3.5|0>>|<text-at|2ln|<point|3.5|-1>>|<text-at|5ln|<point|3.5|-2>>>>>
    The same curve using different line widths.
  </big-figure>

  <paragraph|Line dashes>Various dash styles are available for curves in <menu|Focus|Line dashes>.

  <\big-figure|<with|gr-mode|<tuple|edit|line>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-grid|<tuple|empty>|gr-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|10|none>>|gr-edit-grid|<tuple|empty>|gr-edit-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-line-width|2ln|gr-dash-style|11100|gr-dash-style-unit|20ln|gr-auto-crop|true|<graphics||<with|line-width|2ln|<line|<point|-3|1>|<point|-2.0|1.5>|<point|0.0|0.5>|<point|2.0|1.5>|<point|3.0|1.0>>>|<with|dash-style|10|line-width|2ln|<line|<point|-3|0.5>|<point|-2.0|1.0>|<point|0.0|0.0>|<point|2.0|1.0>|<point|3.0|0.5>>>|<with|dash-style|11100|line-width|2ln|<line|<point|-3|0>|<point|-2.0|0.5>|<point|0.0|-0.5>|<point|2.0|0.5>|<point|3.0|0.0>>>|<with|dash-style|1111010|line-width|2ln|<line|<point|-3|-0.5>|<point|-2.0|0.0>|<point|0.0|-1.0>|<point|2.0|0.0>|<point|3.0|-0.5>>>|<with|dash-style|1111010|line-width|2ln|dash-style-unit|10ln|<line|<point|-3|-1>|<point|-2.0|-0.5>|<point|0.0|-1.5>|<point|2.0|-0.5>|<point|3.0|-1.0>>>|<with|dash-style|11100|line-width|2ln|dash-style-unit|20ln|<line|<point|-3|-1.5>|<point|-2.0|-1.0>|<point|0.0|-2.0>|<point|2.0|-1.0>|<point|3.0|-1.5>>>>>>
    The same curve using different dashing styles.
  </big-figure>

  <paragraph|Line arrows>Various arrows at the ends of curves are supported in <menu|Focus|Line arrows>.

  <\big-figure|<with|gr-mode|<tuple|edit|line>|gr-frame|<tuple|scale|1cm|<tuple|0.5gw|0.5gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-grid|<tuple|empty>|gr-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|10|none>>|gr-edit-grid|<tuple|empty>|gr-edit-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-line-width|2ln|gr-arrow-begin|\||gr-arrow-end|\||gr-auto-crop|true|<graphics||<with|line-width|2ln|<line|<point|-4|2>|<point|-1.0|2.0>>>|<with|arrow-end|\<gtr\>|line-width|2ln|<line|<point|-4|1.5>|<point|-1.0|1.5>>>|<with|arrow-end|\|\<gtr\>|line-width|2ln|<line|<point|-4|1>|<point|-1.0|1.0>>>|<with|arrow-end|\<gtr\>\<gtr\>|line-width|2ln|<line|<point|-4|0.5>|<point|-1.0|0.5>>>|<with|arrow-end|\<less\>|line-width|2ln|<line|<point|-4|0>|<point|-1.0|0.0>>>|<with|arrow-end|\<less\>\||line-width|2ln|<line|<point|-4|-0.5>|<point|-1.0|-0.5>>>|<with|arrow-end|\<less\>\<less\>|line-width|2ln|<line|<point|-4|-1>|<point|-1.0|-1.0>>>|<with|arrow-end|\||line-width|2ln|<line|<point|-4|-1.5>|<point|-1.0|-1.5>>>|<with|arrow-end|o|line-width|2ln|<line|<point|-4|-2>|<point|-1.0|-2.0>>>|<with|arrow-end|\|\<gtr\>|line-width|2ln|arrow-begin|\<less\>\||<line|<point|0|2>|<point|3.0|2.0>>>|<with|arrow-end|\|\<gtr\>|line-width|2ln|arrow-begin|\<gtr\>|<line|<point|0|1.5>|<point|3.0|1.5>>>|<with|arrow-end|o|line-width|2ln|arrow-begin|o|<line|<point|0|1>|<point|3.0|1.0>>>|<with|arrow-end|\<less\>\||line-width|2ln|arrow-begin|\|\<gtr\>|<line|<point|0|0.5>|<point|3.0|0.5>>>|<with|arrow-end|\<less\>|line-width|2ln|arrow-begin|\<gtr\>|<line|<point|0|0>|<point|3.0|0.0>>>|<with|line-width|2ln|arrow-begin|\<gtr\>|<line|<point|0|-0.5>|<point|3.0|-0.5>>>|<with|arrow-end|\<gtr\>\<gtr\>|line-width|2ln|arrow-begin|\<gtr\>|<line|<point|0|-1>|<point|3.0|-1.0>>>|<with|arrow-end|\<gtr\>\<gtr\>|line-width|2ln|arrow-begin|\<gtr\>\<gtr\>|<line|<point|0|-1.5>|<point|3.0|-1.5>>>|<with|arrow-end|\||line-width|2ln|arrow-begin|\||<line|<point|0|-2>|<point|3.0|-2.0>>>>>>
    The same segment using different types of arrows at the extremities.
  </big-figure>

  <paragraph|Text alignment>For textual and mathematical boxes, its is possible to specify the horizontal and vertical alignment properties, as indicated in the figure below:

  <\big-figure|<with|gr-mode|<tuple|edit|line>|gr-frame|<tuple|scale|1cm|<tuple|0.420008gw|0.5gh>>|gr-geometry|<tuple|geometry|1par|0.6par>|gr-grid|<tuple|empty>|gr-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-edit-grid-aspect|<tuple|<tuple|axes|none>|<tuple|1|none>|<tuple|10|none>>|gr-edit-grid|<tuple|empty>|gr-edit-grid-old|<tuple|cartesian|<point|0|0>|1>|gr-line-width|2ln|gr-text-at-halign|center|gr-text-at-valign|top|gr-auto-crop|true|<graphics||<with|color|light grey|line-width|2ln|<line|<point|-3|2>|<point|-3.0|-2.0>>>|<with|text-at-valign|center|<text-at|Left|<point|-3|1>>>|<with|text-at-valign|center|text-at-halign|center|<text-at|Center|<point|-3|0>>>|<with|text-at-valign|center|text-at-halign|right|<text-at|Right|<point|-3|-1>>>|<with|color|light grey|line-width|2ln|<line|<point|-1|0>|<point|7.0|0.0>>>|<with|text-at-valign|bottom|text-at-halign|center|<text-at|Bottom <math|y>|<point|0|0>>>|<with|text-at-halign|center|<text-at|Base <math|y>|<point|1.5|0>>>|<with|text-at-valign|axis|text-at-halign|center|<text-at|Axis <math|y>|<point|3|0>>>|<with|text-at-valign|center|text-at-halign|center|<text-at|Center <math|y>|<point|4.5|0>>>|<with|text-at-valign|top|text-at-halign|center|<text-at|Top <math|y>|<point|6|0>>>>>>
    Illustration of horizontal and vertical alignment of text boxes.
  </big-figure>

  <section|Editing groups of objects>

  The rightmost series of icons on the second mode dependent toolbar is used for editing groups of graphical objects. In group editing mode, you may select or unselect objects using right mouse clicks. You may also select all objects in a rectangle by dragging using the right mouse button. When pressing the left mouse button, the current group operation is performed jointly on all selected objects.

  The following kinds of group operations are supported:

  <\description>
    <item*|Changing properties>Selected using <icon|tm_edit_props.xpm> or <menu|Insert|Set properties>. The current properties (as indicated in the focus bar) are applied to the selected objects.

    <item*|Move objects>Selected using <icon|tm_group_move.xpm> or <menu|Insert|Move objects>. The selected objects are moved until you press the left mouse button a second time.

    <item*|Resize objects>Selected using <icon|tm_group_zoom.xpm> or <menu|Insert|Resize objects>. The selected objects are resized until you press the left mouse button a second time.

    <item*|Rotate objects>Selected using <icon|tm_group_rotate.xpm> or <menu|Insert|Rotate objects>. The selected objects are rotated until you press the left mouse button a second time.

    <item*|Group or ungroup objects>Selected using <icon|tm_group_group.xpm> or <menu|Insert|Group/ungroup>. The selected objects are grouped together into a single object. If you selected one grouped object, then this object will be ungrouped.
  </description>

  In the group editing mode, it is also possible to copy and paste groups of objects.

  <chapter|Advanced layout features>

  <section|Flows>

  Complex documents often contain footnotes or floating objects, which appear differently on pages as the main text. In fact, the content of such complex documents use several <with|font-shape|italic|flows>, one for the main text, one for the footnotes, one for floats, and still another one for two column text. The different flows are broken across pages in a quite independent way.

  In order to insert a footnote, you may use <menu|Format|Page insertion|Footnote>. The number of columns of the text may be changed in <menu|Paragraph|Number of columns>.

  <section|Floating objects>

  Floating objects are allowed to move on the page independently from the main text. Usually they contain figures or tables which are too large to nicely fit into the main text. A floating object may be inserted using <menu|Insert|Note|Floating object>.

  You may also create a floating object and directly insert a figure or table inside it using <menu|Insert|Note|Floating figure> <abbr|resp.> <menu|Insert|Note|Floating table>. However, sometimes you might want to insert several smaller figures or tables inside one floating object. You may do this using <menu|Insert|Image|Small figure> <abbr|resp.> <menu|Insert|Table|Small table>.

  After creating a floating object, you may control its position using <menu|Focus|Allowed positions> (when inside the float). You may specify whether you allow the floating object to appear at the top of the page, at the bottom, directly in the text, or on the next page. By default, the float may appear everywhere. However, a floating object will never appear inside the main text at less than three lines from the bottom or the top of a page.

  <section|Page breaking>

  The page breaking may be controlled very precisely by the user inside <menu|Document|Page|Breaking>. In the submenu <menu|Algorithm>, you may specify the algorithm being used. Professional page breaking is best in print, but may slow down the editing when being used interactively in paper mode. Sloppy page breaking is fastest and medium is professional except for multicolumn material, for which the professional algorithm is significantly slower.

  You may also allow the page breaking algorithm to enlarge or reduce the length of pages in exceptional cases in the submenu <menu|Limits>. The stretchability of vertical space between paragraphs and so may be specified in <menu|Flexibility>. The factor <math|1> is default; a smaller factor enforces a more rigid spacing, but the quality of the breaks may decrease.

  <chapter|Editing tools><label|chapter:editing_tools>

  In this chapter, we discuss some of the general editing facilities that are implemented in <TeXmacs>. Of course, this includes basic operations that can also be found in other editors: “cut and paste”, “search and replace”, etc. But, more interestingly, some of these facilities take advantage of the additional structure of <TeXmacs> documents. Typical examples of “structured editing features” are “structured cursor movement” and “structured variants”. Traditional operations such as “search and replace” also attempt to exploit the document structure. For instance, when searching <math|x> in math mode, you will only find matches that are also in math mode.

  <section|Cut and paste>

  You can select text and formulas by maintaining the left mouse button. In order to delete the selected region, use <menu|Edit|Cut> or <shortcut|(kbd-cut)>. In order to copy the selected region, first click on <menu|Edit|Copy> or hit <shortcut|(kbd-copy)>. Next, paste it as many times as you want to the location of your cursor, using <menu|Edit|Paste> or <shortcut|(kbd-paste)>.

  It is also possible to change the text properties of a selected region. For instance, in order to transform some black text in red, you select it using the left mouse button and click on <render-menu|Format|<rigid|<render-menu|Color|<tabular*|<tformat|<cwith|1|1|1|1|cell-vcorrect|n>|<cwith|1|1|1|1|cell-lsep|1spc>|<cwith|1|1|1|1|cell-rsep|1spc>|<cwith|1|1|1|1|cell-bsep|1spc>|<cwith|1|1|1|1|cell-tsep|1spc>|<cwith|1|1|1|1|cell-width|1.5em>|<cwith|1|1|1|1|cell-hmode|exact>|<cwith|1|1|1|1|cell-background|red>|<table|<row|<cell|>>>>>>>>. Similarly, if you select a formula and you click on <menu|Insert|Fraction>, then the formula becomes the numerator of the newly created fraction.

  When using the copy and paste mechanism to communicate with other applications, text is copied and pasted using the <TeXmacs> data format. You may specify other import and export formats using <menu|Tools|Miscellaneous|Import selections as> <abbr|resp.> <menu|Tools|Miscellaneous|Export selections as>. Alternatively, you may directly copy to or paste from an external format using the first group of entries in the <menu|Edit|Copy to> and <menu|Edit|Paste from> submenus. For instance, a <LaTeX> formula can be pasted inside a <TeXmacs> formula using <menu|Edit|Paste from|LaTeX>.

  By default, copying and pasting uses the “primary clipboard”. Using the remaining entries in the <menu|Edit|Copy to> and <menu|Edit|Paste from> menus, you may specify as many other clipboards as you like. This allows you to keep multiple selections in memory, ready to be pasted.

  There are two ways to make selections using the keyboard. When using the cursor keys <key|left>, <key|right>, <abbr|etc.> while holding down the <prefix|S-> button, you may select text while moving around the cursor. Alternatively, you may press <shortcut|(kbd-select-enlarge)> once to fix a starting position. When moving around using the cursor keys, the text between the starting position and the current position keeps being selected. The selection gets cleared by pressing <shortcut|(selection-cancel)>.

  Notice that the <shortcut|(kbd-select-enlarge)> shortcut also allows you to make <em|structured selections>. You may select the current word you are in by pressing <shortcut|(kbd-select-enlarge)> twice. Each additional time you press <shortcut|(kbd-select-enlarge)> results in the selection of the smallest structure that englobes the current selection. Ultimately, when the entire document gets selected, pressing <shortcut|(kbd-select-enlarge)> once more clears the selection.

  <section|Search and replace>

  You can start searching text by pressing <shortcut|(interactive-search)> or <menu|Edit|Search>. Doing this, a new special “search toolbar” will appear below the main text, just above the footer. When typing text in the search field of the toolbar, all occurrences of this text will be highlighted in the main document. Moreover, one “principal” occurrence will be highlighted in red and you may navigate through all occurrences using <key|pageup> and <key|pagedown> (or <key|up> and <key|down>, or <key|return>). Using <key|home> and <key|end>, you may jump to the first and last occurrences respectively. As soon as you press the escape key <key|escape>, the search toolbar will be closed, searching stops and focus returns to the main document.

  During a search, <TeXmacs> only looks for text in the same mode and language as at the position where you started your search. In other words, when searching an <math|x> in math-mode, you will not find any x's in the ordinary text. As a current limitation, the search string on the search toolbar can only contain ordinary text and no math-symbols or more complicated structured text. More complex searches will be discussed below.

  In order to replace text, you should use <menu|Edit|Replace> or press <key|C-=>. This will cause a special “replace toolbar” to appear below the main text, just above the footer. You are prompted for the string that is to be replaced and the string by which to replace. Again, you may use the <key|pageup> and <key|pagedown> keys in order to navigate through the occurrences of the search string. When pressing <key|tab> or <key|return> in the search field, focus will be moved to the replace field. You may still use the <key|pageup> and <key|pagedown> keys in order to navigate through the occurrences of the search string. In addition, pressing <key|return> will replace the principal occurrence of the search string by the replace string. Using <key|S-return>, you may undo the last replacement. You may replace all remaining occurrences by pressing <key|C-return>. Like in the case of searching, the query-replace command is mode and language sensitive.

  The search and replace toolbars are quite rudimentary in the sense that they only allow for searching and replacing plain text. By pressing the <icon|tm_expand_tool.xpm> icon on either of these toolbars, you may expand the toolbar into a full blown widget with larger search and replace fields that may contain arbitrary markup. Searching and replacing can be done using more or less the same keyboard shortcuts as in the case of the toolbars, but you may now search and replace arbitrary content.

  When searching non textual content, the conditions for having a hit are somewhat released. For instance, assume that you are just starting a new search with an empty search field. Then typing<nbsp><key|F6> inserts the <markup|strong> tag with no text inside yet. Instead of looking only for “strong empty strings”, <TeXmacs> will rather look for all strong markup in your document. If you next enter the letter “a”, then <TeXmacs> will look for all strong text that contains the letter “a”. In a<nbsp>similar way, when searching for the formula <math|<frac|x|>>, <TeXmacs> will highlight all fractions in which the numerator contains the variable <math|x>. Yet another example: a search for <math|<frac||<sqrt|x>>> will highlight all formulas in which the denominator contains a square root that contains the variable <math|x>. For instance, the fraction <math|<frac|a+b|c+<sqrt|x+y>>> will be highlighted, but not <math|<frac|<sqrt|x+y>|a+<sqrt|y>>>.

  When using the structured text and replace widgets, <TeXmacs> also implements a few additional special tags for enhancing structured searching. First of all, it can happen that you would like to search for certain content <em|inside> a special context. For instance, you might want to search for all occurrences of the letter “a” inside a <markup|strong> tag. When searching for <strong|a>, as above, <TeXmacs> will highlight all <markup|strong> tags that contain the letter “a”. In order to highlight the letters “a” themselves, you should first enter the <markup|strong> tag inside an empty search field using <key|F6>. You next enter a special <markup|select-region> tag using <key|std ?>, and finally insert the letter “a” inside this tag. Other special markup that can be used inside search fields are the “wildcards” <math|x>, <math|y> and <math|z>, which are entered using <key|std 1>,<nbsp><key|std 2> and<nbsp><key|std 3>.

  As soon as you start using the structured text and replace widgets instead of the toolbars, this will be remembered as a user preference: any subsequent searches or replacements will again use the widgets. In order to switch back to the less intrusive toolbar methods for searching and replacing, you should press the <icon|tm_compress_tool.xpm> icon.

  \;

  <section|Spell checking>

  If the program <verbatim|ispell> has been installed on your system, then you may use it to check your text for misspelled words by pressing <shortcut|(interactive-spell)> or <menu|Edit|Spell>. Notice that you might have to verify that the dictionaries corresponding to the languages in which your texts have been written have been installed on your system; this is usually the case for English.

  When you launch the spell checker (either on the whole text or on a selected region), you will be prompted at each misspelled word and the footer displays the available options:

  <\description>
    <item*|tab)>Accepts the misspelled word and all its future occurrences in the text.

    <item*|+)>Indicate that the “misspelled” word is actually correct and that it has to be inserted in your personal dictionary.

    <item*|1-9)>Several suggested corrections for your misspelled word.
  </description>

  Notice that <verbatim|ispell> just checks for misspelled words. No grammatical faults will be detected.

  When starting the spell checker, it will use the dictionary of the language that is active at the current cursor position (or the start of a selection). Only text in that language will be checked. If your document contains text in several languages, then you will have to launch the spell checker once for each language being used.

  <section|Undoing and redoing changes>

  It is possible to gradually undo the changes you made in a document from the moment that you launched <TeXmacs>. This can be done via <menu|Edit|Undo> or using the keystroke <shortcut|(undo 0)>. Undone changes can be “redone” using <menu|Edit|Redo> or <shortcut|(redo 0)>. <TeXmacs> maintains the entire “history tree” of all your edits. Sometimes, after multiple undo and redo actions, this means that there can be several ways to redo some modification; in that case, <menu|Edit|Redo> becomes a menu in which you can select the appropriate branch.

  We notice that only changes in the document itself are taken into account by the undo system. In particular, modifications of most of the global document properties can not be undone. This includes modifications of the document style, the page size, the main font, etc. The same remark applies to any modifications outside <TeXmacs> that were triggered by your actions. For instance, in a computer algebra session, you can undo your edits inside <TeXmacs>, but not the computations in the external computer algebra system.

  <section|Structured editing><label|section:structured_editing>

  As a general rule, the behaviour of most structured editing operations is conditioned by the <em|<rigid|current focus>>. By default, the focus is on the innermost tag that contains the cursor. Whenever some selection is active, the focus is rather on the innermost tag that contains the selection. During structured operations, such as navigating among similar tags, the focus may temporarily be set to something else. The current focus is visually indicated by the innermost cyan box around the cursor.

  For instance, the <em|structured insertion> commands <shortcut|(structured-insert-left)>, <shortcut|(structured-insert-right)>, <shortcut|(structured-insert-up)> and <shortcut|(structured-insert-down)> have a particular meaning both inside tables and trees. Inside tables, they allow you to insert new rows and columns (see figure<nbsp><reference|matrix-insert-fig>). Inside trees, they correspond to the insertion of new nodes (see figure<nbsp><reference|tree-insert-fig>). If you are inside a<nbsp>tree inside a table, then the innermost tag is a tree, and node insertions will take precedence over the insertion of new rows and columns.

  For most editing operations, a “default particular behaviour” has been defined. This behaviour may potentially be overridden for a few exceptional tags. In our example of structured insertion, the default behaviour of <shortcut|(structured-insert-left)> and <shortcut|(structured-insert-right)> is to insert a new argument to the tag at the left or at the right of the cursor (when allowed). Inside tables, this behaviour is overridden so as to insert entire columns.

  <\big-figure>
    <\equation*>
      <matrix|<tformat|<table|<row|<cell|a>|<cell|b<cursor>>|<cell|c>>|<row|<cell|d>|<cell|e>|<cell|f>>>>><space|5em><matrix|<tformat|<table|<row|<cell|a>|<cell|b>|<cell|<cursor>>|<cell|c>>|<row|<cell|d>|<cell|e>|<cell|>|<cell|f>>>>><space|2em><matrix|<tformat|<table|<row|<cell|a>|<cell|<cursor>>|<cell|b>|<cell|c>>|<row|<cell|d>|<cell|>|<cell|e>|<cell|f>>>>><space|2em><matrix|<tformat|<table|<row|<cell|a>|<cell|b>|<cell|c>>|<row|<cell|>|<cell|<cursor>>|<cell|>>|<row|<cell|d>|<cell|e>|<cell|f>>>>><space|2em><matrix|<tformat|<table|<row|<cell|>|<cell|<cursor>>|<cell|>>|<row|<cell|a>|<cell|b>|<cell|c>>|<row|<cell|d>|<cell|e>|<cell|f>>>>>
    </equation*>
  <|big-figure>
    <label|matrix-insert-fig>Assume that the cursor is at the position of <cursor> inside the left-most matrix. Then the four other matrices respectively correspond to the insertion of a new column at the left<nbsp>(<shortcut|(structured-insert-left)>) or right<nbsp>(<shortcut|(structured-insert-right)>), <abbr|resp.> a new row above<nbsp>(<shortcut|(structured-insert-up)>) or below<nbsp>(<shortcut|(structured-insert-down)>).
  </big-figure>

  <\big-figure|<tree|a|b|c<cursor>|d><space|3em><space|3em><tree|a|b|<cursor>|c|d><space|3em><tree|a|b|c|<cursor>|d><space|3em><tree|a|b|<tree|<cursor>|c>|d><space|3em><tree|a|b|<tree|c|<cursor>>|d>>
    <label|tree-insert-fig>Assume that the cursor is at the position of <cursor> inside the left-most tree. Then the four other trees respectively correspond to the insertion of a new node at the left<nbsp>(<shortcut|(structured-insert-left)>), at the right<nbsp>(<shortcut|(structured-insert-right)>), above<nbsp>(<shortcut|(structured-insert-up)>) or below<nbsp>(<shortcut|(structured-insert-down)>).
  </big-figure>

  Similarly, still in the case of matrices, the keys <shortcut|(structured-insert-start)>, <shortcut|(structured-insert-end)>, <shortcut|(structured-insert-top)> and <shortcut|(structured-insert-bottom)> can be used for inserting a new first or last column, <abbr|resp.> a new first or last row. The keys <shortcut|(structured-remove-left)> and <shortcut|(structured-remove-right)> are mapped to the commands for backward <abbr|resp.> forward <em|structured deletion>. For matrices, this will result in the removal of the column before or after the cursor (see figure<nbsp><reference|matrix-remove-fig>). In order to remove the enclosing environment you may use <shortcut|(remove-structure-upwards)> or <shortcut|(remove-structure-upwards)>.

  <\big-figure>
    <\equation*>
      <matrix|<tformat|<table|<row|<cell|a>|<cell|b<cursor>>|<cell|c>>|<row|<cell|d>|<cell|e>|<cell|f>>>>><space|5em><matrix|<tformat|<table|<row|<cell|b<cursor>>|<cell|c>>|<row|<cell|e>|<cell|f>>>>><space|2em><matrix|<tformat|<table|<row|<cell|a>|<cell|<cursor>c>>|<row|<cell|d>|<cell|f>>>>><space|2em>b<cursor>
    </equation*>
  <|big-figure>
    <label|matrix-remove-fig>Assume that the cursor is at the position of <cursor> inside the left-most matrix. Then pressing the keys<nbsp><shortcut|(structured-remove-left)> and <shortcut|(structured-remove-right)> respectively result in the next two matrices. Pressing either<nbsp><shortcut|(remove-structure-upwards)> or <shortcut|(remove-structure-upwards)> replaces the matrix by the content of the cell in which you are, leaving you with the <math|b> at the right-hand side.
  </big-figure>

  <section|Structured cursor movement><label|section:structured_cursor_movement>

  <TeXmacs> implements the three main mechanisms for <em|structured cursor movement>:

  <\enumerate>
    <item>Traversal of the entire structure of the document.

    <item>Traversal of tags that are similar to the innermost tag.

    <item>Movements inside the innermost tag.
  </enumerate>

  Most keyboard shortcuts for structured cursor movements can be used in combination with the<nbsp><prefix|S-><nbhyph>key so as to simultaneously select text while moving around.

  <paragraph*|Structured traversal of the document>

  The <shortcut|(kbd-select-if-active traverse-left)>, <shortcut|(kbd-select-if-active traverse-right)>, <shortcut|(kbd-select-if-active traverse-up)> and <shortcut|(kbd-select-if-active traverse-down)> keys are used for the structured traversal of the entire document. Inside plain text, <shortcut|(kbd-select-if-active traverse-left)> and <shortcut|(kbd-select-if-active traverse-right)> allow you to move in a word-by-word manner, whereas <shortcut|(kbd-select-if-active traverse-up)> and <shortcut|(kbd-select-if-active traverse-down)> correspond to paragraph-by-paragraph motion.

  In the presence of other markup, the <shortcut|(kbd-select-if-active traverse-left)> and <shortcut|(kbd-select-if-active traverse-right)> keys allow you to visit all accessible cursor positions in the document, except that we keep moving in a word-by-word manner inside plain text. The behaviour of the <shortcut|(kbd-select-if-active traverse-up)> and <shortcut|(kbd-select-if-active traverse-down)> keys is more context-dependent. Inside matrices, they typically allow you to move one row up or down.

  <paragraph*|Traversal of tags that are similar to the innermost tag>

  This type of cursor movement allows you to quickly visit all other tags in the document that are <em|similar> to the innermost tag. The <shortcut|(kbd-select-if-active traverse-previous)> and <shortcut|(kbd-select-if-active traverse-next)> keys allow you move to the previous or next similar tags, whereas <shortcut|(traverse-first)> and <shortcut|(traverse-last)> directly jump to the first or last similar tags.

  For instance, if you are inside a section title, then you may move to the previous sectional title using <shortcut|(kbd-select-if-active traverse-previous)>. Subsection and chapter titles are in particular understood to be “similar” to section titles. Notice that you may use <shortcut|(traverse-previous-section-title)> to jump to the previous section title.

  <paragraph*|Movements inside the innermost tag>

  It is also possible to quickly move inside the innermost tag without quitting it. The shortcuts <shortcut|(structured-left)>, <shortcut|(structured-right)>, <shortcut|(structured-start)> and <shortcut|(structured-end)> provide a way to move to the previous, next, first or last argument of the innermost tag. Furthermore, the shortcuts <shortcut|(structured-exit-left)> and <shortcut|(structured-exit-right)> may be used to exit the innermost tag on the left or on the right.

  This default behaviour may be overridden in special contexts. For instance, inside tables or trees, they rather correspond to cell-by-cell or node-by-node cursor movement. In addition, these cases associate vertical cursor movements to <shortcut|(structured-up)>, <shortcut|(structured-down)>, <shortcut|(structured-top)> and<nbsp><shortcut|(structured-bottom)>.

  <section|Structured variants><label|section:structured_variants>

  When creating an environment like a theorem, an equation or a list, it frequently happens that one would like to change the environment <em|a posteriori>. The keyboard shortcuts<nbsp><shortcut|(variant-circulate (focus-tree) #t)> and <shortcut|(variant-circulate (focus-tree) #f)> allow you to cycle through the list of <em|structured variants> of the innermost tag, in forward or backward direction, respectively.

  For instance, assuming that you are inside a theorem, pressing <shortcut|(variant-circulate (focus-tree) #t)> several times will change the theorem into a proposition, a lemma, a corollary, a conjecture, and finally back into a theorem. The <shortcut|(variant-circulate (focus-tree) #f)> key allows you to cycle in the reverse direction: theorem<nbsp><math|<op|\<rightarrow\>>> conjecture<nbsp><math|<op|\<rightarrow\>>> corollary<nbsp><math|<op|\<rightarrow\>>> lemma<nbsp><math|<op|\<rightarrow\>>> proposition<nbsp><math|<op|\<rightarrow\>>> theorem.

  In the case of mathematical formulas, the <shortcut|(variant-circulate (focus-tree) #t)> shortcut allows you to change an inline formula such as <math|a<rsup|2>+b<rsup|2>=c<rsup|2>> into the displayed formula

  <\equation*>
    a<rsup|2>+b<rsup|2>=c<rsup|2>
  </equation*>

  while taking care of potential “trailing spaces and punctuation signs”.

  <TeXmacs> also provides the <shortcut|(numbered-toggle (focus-tree))> shortcut for turning numbered environments into unnumbered environments and <em|vice versa>. This works for most common environments like theorems, remarks, tables, equations, etc. Notice that <shortcut|(numbered-toggle (focus-tree))> also turns an unnumbered itemize environment into an enumeration and <em|vice versa>, whereas <shortcut|(variant-circulate (focus-tree) #t)> allows you to cycle between the available kinds of list items (bullets, dashes, arrows, <abbr|etc.>).

  Folding and unfolding provides yet another example of an interesting way to toggle between several environments. Inside a computer algebra session such as

  <\session|pari|default>
    <\unfolded-io|Pari] >
      factor (x^15 - 1)
    <|unfolded-io>
      <with|color|magenta|%1 = <math|<with|color|blue|<matrix|<tformat|<table|<row|<cell|x-1>|<cell|1>>|<row|<cell|x<rsup|2>+x+1>|<cell|1>>|<row|<cell|x<rsup|4>+x<rsup|3>+x<rsup|2>+x+1>|<cell|1>>|<row|<cell|x<rsup|8>-x<rsup|7>+x<rsup|5>-x<rsup|4>+x<rsup|3>-x+1>|<cell|1>>>>>>>>
    </unfolded-io>
  </session>

  you may click on “<verbatim|<with|color|dark brown|Pari]>>” in order to fold the output (only the input remains visible) and click once again in order to unfold back to the original state. The <shortcut|(alternate-toggle (focus-tree))> shortcut achieves the sa、me effect. There various other foldable environments, most of which are available through <menu|Insert|Fold>.

  <section|Positioning and resizing objects><label|section:positioning_and_resizing_objects>

  The <prefix|structured:geometry> prefix may be used for positioning and resizing objects. For instance, inside a cell of a<nbsp>table, you may use <key|structured:geometry right> to align the cell more to the right. Behind a space introduced <em|via> <menu|Format|Space>, the same key allows you to increase the width of space. More generally, the following shortcuts are implemented:

  <\description>
    <item*|<shortcut|(geometry-left)>>Decrease the horizontal size of an object, or align more to the left.

    <item*|<shortcut|(geometry-right)>>Increase the horizontal size of an object, or align more to the right.

    <item*|<shortcut|(geometry-down)>>Decrease/increase the vertical size of an object, or align more to the bottom.

    <item*|<shortcut|(geometry-up)>>Increase/decrease the vertical size of an object, or align more to the top.

    <item*|<shortcut|(geometry-start)>>Decrease the horizontal offset of an object, or left align.

    <item*|<shortcut|(geometry-end)>>Increase the horizontal offset of an object, or right align.

    <item*|<shortcut|(geometry-bottom)>>Decrease the vertical offset of an object, or align at the bottom.

    <item*|<shortcut|(geometry-top)>>Increase the vertical offset of an object, or align at the top.

    <item*|<shortcut|(geometry-reset)>>Revert the geometry (size, position, alignment) to the defaults.

    <item*|<shortcut|(geometry-circulate #t)>, <shortcut|(geometry-circulate #f)>>Circulate among the available length units for specifying the geometry.

    <item*|<shortcut|(geometry-slower)>, <shortcut|(geometry-faster)>>Decrease or increase the step size when positioning or resizing.
  </description>

  Particular tags to which the shortcuts apply are the following:

  <\description>
    <item*|Spaces>Both horizontal and vertical spaces from the <menu|Format|Space> menu. You should put the cursor just after the space tag for the shortcuts to apply.

    <item*|Box modifiers>The tags <markup|move>, <markup|shift>, <markup|resize>, <markup|extend>, <markup|clipped>, <markup|smashed>, <markup|inflate> from the <menu|Format|Adjust> menu.

    <item*|Animations>The durations of animations can be modified using <shortcut|(geometry-left)> and <shortcut|(geometry-right)>.

    <item*|Images>The size and alignment of images can be changed.
  </description>

  <section|Versioning tools>

  When writing documents in collaboration with other authors, it frequently arises that one wants to go through changes made by the other authors, and either accept, discard or further correct them. After enabling the versioning tool through <menu|Tools|Versioning tool>, a special menu <menu|Version> appears in the main menu bar, which makes this process automatic. Below, we will describe in more detail how this tool works.

  In addition, there exist many stand-alone programs for maintaining several versions of a same file, such as <hlink|<name|Subversion>|https://en.wikipedia.org/wiki/Apache_Subversion>, <hlink|<name|Git>|http://git-scm.com/>, <hlink|<name|Darcs>|http://darcs.net/>, <hlink|<name|GNU Arch>|http://www.gnu.org/software/gnu-arch/>, just to mention a few of them. <TeXmacs> currently provides a rudimentary support for <name|Subversion> and <name|Git>, but interfaces for the other systems could easily be added.

  <paragraph*|Comparing two versions>

  Assume that we have two versions <verbatim|old.tm> and <verbatim|new.tm> of the same document. In order to see the changes, first load the newer version <verbatim|new.tm>, then click on <menu|Version|Compare|With older version> and select the older version <verbatim|old.tm>. The buffer will still be named <verbatim|new.tm>, and the changes between both versions will be indicated by special markup. If there are any changes, then the cursor will be positioned at the first difference. In a similar way, you may compare the current buffer with a<nbsp>newer version on disk using <menu|Version|Compare|With newer version>.

  It is possible to go through all the differences between the old and new versions either from the items in the submenu <menu|Version|Move>, or using the keyboard shortcuts <shortcut|(version-previous-difference)> and <shortcut|(version-next-difference)>. One may also use the more <strong|general structured navigation shortcuts> <shortcut|(traverse-first)>, <shortcut|(traverse-last)>, <shortcut|(kbd-select-if-active traverse-previous)> and <shortcut|(kbd-select-if-active traverse-next)> (see <smart-ref|section:structured_cursor_movement>).

  <paragraph*|Visualization of the differences>

  Differences between the two versions can be displayed in three ways: by showing only the old version, only the new version, or both versions simultaneously. In all cases, the old version is displayed in dark red and the new version in dark green.

  The visualization style can be specified individually for each individual change, via <menu|Version|Show> or the keyboard shortcuts <shortcut|(version-show 'version-old)> (old version), <shortcut|(version-show 'version-new)> (new version) and <shortcut|(version-show 'version-both)> (both versions). One may also cycle through the different style using the <strong|structured variant> (<smart-ref|section:structured_variants>) key <shortcut|(variant-circulate (focus-tree) #t)>. If you selected some text, then the above actions will apply to the whole selection. In particular, by selecting the entire file, you can visualize the older or the newer version, or both versions.

  <paragraph*|Retaining a specific version>

  It often occurs that we want to go through the changes between two versions and progressively retain either one or the other version for each individual difference. Assuming that the cursor is inside a given difference, this can be done from entries in the submenu <menu|Version|Retain>. Alternatively, one may use the shortcuts <shortcut|(version-retain 0)>, <shortcut|(version-retain 1)> and <shortcut|(kbd-control-return)> to retain the old, new and currently displayed version, respectively. If both versions are displayed, then <shortcut|(kbd-control-return)> retains the new version. After retaining one of the versions, we automatically jump to the next difference, which can then be processed.

  If you selected some text, then any of the above action will retain the appropriate version for each of the differences in the selection. This applies in particular to the case when you select the entire document. A convenient alternative way to process all differences is to use <shortcut|(version-previous-difference)> and <shortcut|(version-next-difference)> to go through the differences, use <shortcut|(version-show 'version-old)> and <shortcut|(version-show 'version-new)> to select the preferred version. As soon as all differences have been processed, you select the entire document and click on <menu|Version|Retain|Current version>.

  <paragraph*|Grain control and reactualizing the differences>

  The entries in the submenu <menu|Version|Grain> allow you to control the grain with which differences between versions are computed. By default, we use the finest grain <menu|Detailed>. It is also possible to compute differences on a paragraph-based level, using <menu|Block>. In that case, the entire paragraphs in which a change occurs will be highlighted. The roughest grain <menu|Rough> will highlight the entire text, if a change occurs somewhere inside.

  The grain is used when comparing two documents using <menu|Version|File|Compare>, but it is also possible to change the grain for a selected portion of text: simply select the text and choose the new grain in the submenu <menu|Version|Grain>. This can in particular be applied on the entire buffer. Similarly, if you change the grain inside a difference, then the difference will be recomputed using the new grain.

  Notice that you may also “change” the grain to the current grain. This has the effect of reactualizing the differences of a selected portion or of the current difference at the cursor position. This may be useful, if you made some changes to one of the versions. For instance, assume that the old version contained a theorem and that we changed it into a lemma in the new version and also modified part of its inside text. When visualizing the changes, the whole theorem will be highlighted, since there is no appropriate markup to indicate that we just changed from a<nbsp>theorem to a lemma. Nevertheless, if we want to compare the inside texts, we may turn the old theorem into a lemma and then reactualize.

  <paragraph*|Using external programs such as <name|Subversion> for version control>

  If the file you are editing belongs to a directory that is under version control (only <name|Subversion> and <name|Git> is currently supported, although other systems might follow), then the first part of the <menu|Version> menu will contain some clickable entries.

  First of all, if the current buffer is under version control, then you may take a look at its history using <menu|Version|History>. The history contains a list of hyperlinks to older revisions, together with short information about who changed what and when. Older revisions cannot be saved, but you may compare them to the current user version (on disk or being edited) using <menu|Version|Compare|With current user version>.

  After making some changes to a file under version control, the version inside the editor or on disk no longer corresponds to the version in the repository. Using<nbsp><menu|Version|Commit>, the current user's version can be committed to the repository. When doing so, you will be prompted for a small explanatory message about the changes that you have made. A file that is not yet under version control can be added to the version control system using <menu|Version|Register>. Registering a file does <em|not> commit it to the repository: you still have to use <menu|Version|Commit> in order to do so.

  If, while you were editing, changes to the file were made in the repository, then you may merge the result with your current version using <menu|Version|Update>. At the moment, no conflict resolution has been implemented yet, although this is planned for the future.

  <chapter|Laptop presentations>

  <TeXmacs> features a “presentation mode”, for making presentations from a laptop. The presentation mode is activated/deactivated using <menu|View|Presentation mode> or <shortcut|(toggle-full-screen-mode)>. In this chapter, we describe several dedicated style packages and markup elements which can be used for making slick presentations.

  Several types of remote controllers are supported for laptop presentations. Some of them (such as Apple infrared controllers) should work out of the box (at least for the Qt version). Others map the buttons on the remote controller to certain keys on your keyboard, and you will need to toggle <menu|View|Remote control> in order to remap these keys to the right actions during presentations. If necessary, the appropriate mappings may be specified in <menu|Edit|Preferences|Keyboard|Remote control>. By activating the debugging tool <menu|Tools|Debugging tool> and <menu|Debug|keyboard>, you may find out the particular mappings used by your remote control.

  <section|Beamer styles>

  In order to start writing a laptop presentation, you should first select the <tmstyle|beamer> style using <menu|Document|Style|beamer>. There are several main “themes” for presentations, such as <subsubmenu|Document|Beamer theme|Bluish>, <subsubmenu|Document|Beamer theme|Ice>, <subsubmenu|Document|Beamer theme|Metal>, <subsubmenu|Document|Beamer theme|Reddish>, <subsubmenu|Document|Beamer theme|Ridged paper>, which can be selected from the <menu|Document|Beamer theme> menu.

  The presentation style includes the <tmstyle|alt-colors> style package, which features the use of colors for mathematical formulas, enunciations, etc. Additional customizations of the presentation style are available in the <menu|Focus|Preferences> menus for the various tags to which they apply. For instance, the rendering of slide titles and theorems can be further customized.

  <section|Traversal of a presentation>

  One major family of markup tags for presentations concerns the traversal of the document during a presentation. The keys <key|F10> and <key|F11> are used respectively for going back and forth in the presentation. The keys <key|F9> and <key|F12> are used to go to the start <abbr|resp.> end of the presentation. When using the <tmstyle|beamer> style or when enabling the “presentation tool” in the <menu|Tools> menu, a <menu|Dynamic> menu and additional icons will appear, which can also be used for the traversal of your presentation.

  The most basic traversal tag is called a “switch”, and allows the user to show different pieces of text in successive and mutually exclusive manner. The entire presentation itself usually consists of a <markup|screens> switch, where the pieces are the successive “slides” of the presentation. After selection of the <tmstyle|beamer> style, this switch can be inserted using <menu|Focus|Screens> or <menu|Insert|Fold|Switch|Screens>. You may jump from one screen to another one using <key|pageup> and <key|pagedown>.

  Inside a switch, new “branches” can be inserted after or before the currently visible branch using <menu|Focus|Insert argument after> or <menu|Focus|Insert argument before>. Besides the <markup|screens> switch, you may use <menu|Insert|Fold|Switch|Standard> to insert paragraph-wide switches, and <menu|Insert|Fold|Switch|Tiny> to insert inline switches (similarly to displayed and inline formulas).

  Another popular way to traverse is presentation is to progressively unroll content. This can be done by inserting an <markup|unroll> tag using <menu|Insert|Fold|Unroll>. Using a “hack” this tag can be combined with the <markup|itemize> and <markup|enumerate> tags: first create the list environment, but remove the first (automatically inserted) <markup|item> tag. Next insert the unroll tag. When pressing <key|enter> inside the unroll tag, new items are created; you still have to use <menu|Focus|Insert argument after> for inserting new branches to the unroll structure (in particular, several items could be unrolled at once).

  A variant of unrolling is unfolding. This is basically an unroll tag with exactly two branches, but different variants are available in <menu|Insert|Fold|Folded> depending on the desired rendering. In particular, some of the renderings display a button which may be pushed in order to fold or unfold some content. The input-output fields inside computer algebra sessions are also foldable. Similarly, the tags in <menu|Insert|Fold|Summarize> are switches with two branches, again with different kinds of rendering.

  When using <TeXmacs> in combination with an external plug-in, such as a computer algebra system, you will notice that all input-output fields in <hlink|sessions|../interface/man-session-basic.en.tm> are foldable. In addition, you can create so called “<hlink|executable switches|../interface/man-scripting-language.en.tm>” using the items in the <menu|Insert|Fold|Executable> submenu. This allows you to switch back and forth between a given input to the system and the corresponding output.

  All markup for the traversal of presentations may be nested in a natural way. In the <menu|Insert|Fold|Traversal> menu, you may specify whether unrolled and folded structures should be folded back after traversal.

  <section|Overlays>

  The standard “fold”, “unroll” and “switch” tags implement the most frequent kinds of traversal of a slideshow. However, there are cases in which more complex successions are needed.

  <\big-figure|<block|<tformat|<cwith|1|1|1|1|cell-hyphen|t>|<twith|table-width|0.333par>|<twith|table-hmode|exact>|<table|<row|<\cell>
    <\compact>
      Elimination of <math|x> from

      <\equation*>
        x*sin y-3*x*y=\<alpha\>
      </equation*>

      yields

      <\equation*>
        x=<frac|\<alpha\>|sin y-3*y>.
      </equation*>
    </compact>
  </cell>>>>><space|2em><block|<tformat|<cwith|1|1|1|1|cell-hyphen|t>|<twith|table-width|0.333par>|<twith|table-hmode|exact>|<table|<row|<\cell>
    <\compact>
      Elimination of <math|<with|color|red|x>> from

      <\equation*>
        <with|color|red|x>*sin y-3*<with|color|red|x>*y=\<alpha\>
      </equation*>

      yields

      <\equation*>
        <with|color|red|x>=<frac|\<alpha\>|sin y-3*y>.
      </equation*>
    </compact>
  </cell>>>>>>
    <label|red-x-fig>Example of highlighting a variable <math|x> when switching from one slide to a next one.
  </big-figure>

  For instance, imagine that we are given a slide, and that we wish to highlight all occurrences of some variable <math|x> in red on the next slide (see figure<nbsp><reference|red-x-fig>). This could be achieved by using a switch tag: we just copy the whole slide both in the first and in the second branch of the switch, and next color all instances of <math|x> red in the second branch. However, this solution has the disadvantage that any <em|a posteriori> modification on the slide has to be made both in the first and in the second branch.

  <TeXmacs> provides a so called “overlay” mechanism for this kind of more complex successions of slides. You may insert a pile of overlays using <menu|Insert|Fold|Overlays|Standard>. At the start, the pile contains a unique overlay, but new overlays can then be added using the standard keyboard shortcuts <shortcut|(structured-insert-right)> and <shortcut|(structured-insert-left)> for <hlink|structured insertion|../editing/man-structured-editing.en.tm>. When applied to overlays, the standard keys <key|F10> and <key|F11> for traversing the presentation have the effect of going up and down in the pile of overlays.

  By default, all text which is typed by the user will be visible on all overlays. But, using the filters in the menu <menu|Insert|Fold|Overlay>, it is also possible to create text which is only visible on specified overlays of the pile. There are four basic types of filters:

  <\description>
    <item*|<subsubsubmenu|Insert|Fold|Overlay|Visible from here on>>Text that will be visible on this and all subsequent overlays.

    <item*|<subsubsubmenu|Insert|Fold|Overlay|Visible until here>>Text that will be visible on this and all previous overlays.

    <item*|<subsubsubmenu|Insert|Fold|Overlay|Visible only here>>Text that will be visible only on this overlay.

    <item*|<subsubsubmenu|Insert|Fold|Overlay|Visible except here>>Text that will be visible on all but the current overlays.
  </description>

  In a similar way, <TeXmacs> provides tags for alternate views: depending on whether a certain predicate is met, we show the “main content” on certain overlays and the “alternate content” on the remaining overlays. We use the same four types of predicates:

  <\description>
    <item*|<subsubsubmenu|Insert|Fold|Overlay|Alternate from here on>>The alternate text will be used on this and all subsequent overlays.

    <item*|<subsubsubmenu|Insert|Fold|Overlay|Alternate until here>>The alternate text will be used on this and all previous overlays.

    <item*|<subsubsubmenu|Insert|Fold|Overlay|Alternate only here>>The alternate text will only be used on this overlay.

    <item*|<subsubsubmenu|Insert|Fold|Overlay|Alternate except here>>The alternate text will be used on all but the current overlays.
  </description>

  <TeXmacs> finally provides a means of customizing the way that “hidden” and “shown” content should be rendered: user determined coloring schemes can be used using the <markup|alter-colors> tag which can be inserted from <menu|Insert|Fold|Overlay|Specify color alternation>. For instance, in order to achieve the effect mentioned in the example from Figure<nbsp><reference|red-x-fig>, you may specify a “black to red” color alternation, and then use a <subsubsubmenu|Insert|Fold|Overlay|Visible from here on> type of overlay.

  <section|Decorations>

  In order to decorate your laptop presentations, <TeXmacs> provides a few extra markup elements: <markup|granite>, <markup|manila-paper>, <markup|metal>, <markup|pine>, <markup|ridged-paper> and <markup|rough-paper>. These tags will put your content on a nice, natural background, as illustrated in the figure below. You may also use the <markup|tit> tag for giving individual slides a title.

  <\big-figure>
    <use-package|ornaments><tabular*|<tformat|<table|<row|<cell|<granite|<tabular*|<tformat|<twith|table-lsep|0.5em>|<twith|table-rsep|0.5em>|<twith|table-bsep|0.5em>|<twith|table-tsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<table|<row|<cell|<large|<strong|Granite>>>>|<row|<cell|<math|a<rsup|2>+b<rsup|2>=c<rsup|2>>>>>>>><space|1em><metal|<tabular*|<tformat|<twith|table-lsep|0.5em>|<twith|table-rsep|0.5em>|<twith|table-bsep|0.5em>|<twith|table-tsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<table|<row|<cell|<large|<strong|Metal>>>>|<row|<cell|<math|a<rsup|2>+b<rsup|2>=c<rsup|2>>>>>>>><space|1em><pine|<tabular*|<tformat|<twith|table-lsep|0.5em>|<twith|table-rsep|0.5em>|<twith|table-bsep|0.5em>|<twith|table-tsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<table|<row|<cell|<large|<strong|Pine>>>>|<row|<cell|<math|a<rsup|2>+b<rsup|2>=c<rsup|2>>>>>>>>>>|<row|<cell|>>|<row|<cell|<manila-paper|<tabular*|<tformat|<twith|table-lsep|0.5em>|<twith|table-rsep|0.5em>|<twith|table-bsep|0.5em>|<twith|table-tsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<table|<row|<cell|<large|<strong|Manila paper>>>>|<row|<cell|<math|a<rsup|2>+b<rsup|2>=c<rsup|2>>>>>>>><space|1em><ridged-paper|<tabular*|<tformat|<twith|table-lsep|0.5em>|<twith|table-rsep|0.5em>|<twith|table-bsep|0.5em>|<twith|table-tsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<table|<row|<cell|<large|<strong|Ridged paper>>>>|<row|<cell|<math|a<rsup|2>+b<rsup|2>=c<rsup|2>>>>>>>><space|1em><rough-paper|<tabular*|<tformat|<twith|table-lsep|0.5em>|<twith|table-rsep|0.5em>|<twith|table-bsep|0.5em>|<twith|table-tsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<table|<row|<cell|<large|<strong|Rough paper>>>>|<row|<cell|<math|a<rsup|2>+b<rsup|2>=c<rsup|2>>>>>>>>>>>>>

    \;
  <|big-figure>
    <label|ornament-fig>Some standard ornaments for decorating your presentations.
  </big-figure>

  <section|Animations>

  <TeXmacs> provides some rudimentary support for animations inside laptop presentations. This support is likely to be further improved in future <TeXmacs> distributions.

  The simplest animations are available from the menus <menu|Insert|Animation|Translate> and <menu|Insert|Animation|Progressive>. Using the first menu, it is possible to create moving content: you first specify a duration for the full animation and then enter the content which has to be moved. The different kinds of moving content are illustrated in figure<nbsp><reference|translate-fig>. Similarly, using the second menu, it is possible to create content which only progressively appears on the screen. The various kinds of progressive content are illustrated in figure<nbsp><reference|progressive-fig>. The duration of the animations can be <hlink|modified <em|a<nbsp>posteriori>|../editing/man-structured-geometry.en.tm> by putting your cursor inside them and using the shortcuts <shortcut|(geometry-left)> and<nbsp><shortcut|(geometry-right)>.

  <big-figure|<tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-translate|<large|Hello world>|2sec|<tuple|-1.0|0.0>|>>>|<row|<cell|<menu|Rightwards>>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-translate|<large|Hello world>|2sec|<tuple|1.0|0.0>|>>>|<row|<cell|<menu|Leftwards>>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-translate|<large|Hello world>|2sec|<tuple|0.0|-1.0>|>>>|<row|<cell|<menu|Upwards>>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-translate|<large|Hello world>|2sec|<tuple|0.0|1.0>|>>>|<row|<cell|<menu|Downwards>>>>>>|<label|translate-fig>Moving content, as inserted from <menu|Insert|Animation|Translate>.>

  <big-figure|<tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-progressive|<large|Hello<anim-progressive||2sec|<tuple|0.0|0.0|0.0|1.0>|>>|2sec|<tuple|0.0|0.0|0.0|1.0>|>>>|<row|<cell|<menu|Rightwards>>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-progressive|<large|Hello>|2sec|<tuple|1.0|0.0|1.0|1.0>|>>>|<row|<cell|<menu|Leftwards>>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-progressive|<large|Hello world>|2sec|<tuple|0.5|0.5|0.5|0.5>|>>>|<row|<cell|<menu|From center>>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-progressive|<large|Hello>|2sec|<tuple|0.0|0.0|1.0|0.0>|>>>|<row|<cell|<menu|Upwards>>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-progressive|<large|Hello>|2sec|<tuple|0.0|1.0|1.0|1.0>|>>>|<row|<cell|<menu|Downwards>>>>>>|<label|progressive-fig>Progressive content, as inserted from <menu|Insert|Animation|Progressive>.>

  Other basic animations are “animated gif pictures”, which can be inserted from <menu|Insert|Animation|Animation>, and sounds, which can be inserted from <menu|Insert|Animation|Sound>. Support for movies should be added later.

  It is also possible to combine animation, so as to form larger animations. For instance, using <menu|Insert|Animation|Compose> you can play several animations one after another. Often the individual elements of a composed animations are fixed animation of a given duration, which can be inserted using <menu|Insert|Animation|Fixed>. Of course, you may also use moving or progressive content or even composed animations as building blocks. An animation can be repeated indefinitely using <menu|Insert|Animation|Repeat>. This may for instance be used to create a blinking effect. Some examples of the various possibilities can be found in figure<nbsp><reference|compose-fig>. <rsub|<math|>>

  <big-figure|<tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-compose|<anim-constant|<large|Hello>|2sec>|<anim-constant|<large|World>|2sec>>>>|<row|<cell|Compose>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-repeat|<anim-compose|<anim-constant|<large|<space|0.6spc>Hello>|1sec>|<anim-constant|<large|World>|1sec>>>>>|<row|<cell|Blinking>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<large|<anim-repeat|<anim-compose|<anim-constant|<with|color|brown|T<space|-0.2spc><rsub|<with|math-level|0|font-shape|small-caps|e>>X<space|-0.2spc>><with|color|dark green|<rsub|<with|math-level|0|font-shape|small-caps|m<space|-0.2spc>a<space|-0.4spc>c<space|-0.2spc>s>>>|1sec>|<anim-constant|<with|color|dark green|T<space|-0.2spc><rsub|<with|color|brown|<with|math-level|0|font-shape|small-caps|e>>>X<space|-0.2spc>><with|color|brown|<rsub|<with|math-level|0|font-shape|small-caps|m<space|-0.2spc>a<space|-0.4spc>c<space|-0.2spc>s>>>|1sec>>>>>>|<row|<cell|<TeXmacs> logo>>>>><space|1em><tabular*|<tformat|<cwith|1|1|1|1|cell-lsep|0.5em>|<cwith|1|1|1|1|cell-rsep|0.5em>|<cwith|1|1|1|1|cell-bsep|0.5em>|<cwith|1|1|1|1|cell-tsep|0.5em>|<cwith|1|1|1|1|cell-background|pastel yellow>|<cwith|2|2|1|1|cell-tsep|0.5em>|<table|<row|<cell|<anim-repeat|<large|<name|<anim-compose|<anim-progressive|<with|color|dark green|Mathe<rsub|<math|>>>|2sec|<tuple|0.0|0.0|0.0|1.0>|><phantom|magiX>|<anim-constant|<with|color|dark green|Mathe<rsub|<math|>>><with|color|dark magenta|magiX>|1sec>>>>>>>|<row|<cell|<name|Magix> animation>>>>>|<label|compose-fig>Different kinds of composed animations.>

  <section|Exporting presentations>

  Once you have created a file with the <tmstyle|beamer> style you may want to export it to <abbr|PDF> in order to be able to give your presentation without using <TeXmacs>. There are two ways in which this can be done: <em|expanded> and <em|unexpanded>.

  <\enumerate>
    <item><em|Expanded> means that <markup|fold>s of all kinds are “flattened” out before they are exported. This is useful if you intend the resulting <abbr|PDF> file to be distributed and printed, since it will have exactly as many pages as slides your presentation.

    <item><em|Unexpanded> means that the <abbr|PDF> file will have as many pages as <em|steps> your presentation, which depending on your use of <markup|fold>, <markup|switch>, <markup|overlay>, etc. will typically result in many more pages.
  </enumerate>

  You can select which of these methods will be used with <menu|Preferences|Converters|TeXmacs-\<gtr\>Pdf/Postscript|Expand beamer slides>.

  <chapter|Using TeXmacs as an interface>

  An important feature of <TeXmacs> is it's ability to communicate with extern systems. For computer algebra systems or other scientific computation systems, this is typically done in shell-like sessions, in which it is possible to evaluate commands and display the results in a nice, graphical way. Some systems can also be used more in the background as scripting languages.

  See <menu|Help|Plug-ins> for a list of existing plug-ins and more documentation on these systems.

  <section|Creating sessions>

  A session can be started from the <menu|Insert|Session> menu. Since <TeXmacs> is based on the <name|Scheme> language, it is always possible to start a <name|Scheme> session using <menu|Insert|Session|Scheme>. On <name|Unix> systems, it is usually also possible to start <name|Bash> shell sessions using <menu|Insert|Session|Shell>. The remainder of the items in the <menu|Insert|Session> menu depend on the plug-ins which are installed on your system.

  A session consists of a sequence of input and output fields and possible text between them. When pressing <shortcut|(kbd-return)> inside an input field of a session, the text inside the environment is evaluated and the result is displayed in an output field.

  When entering a command in a session, the application attempts to execute it. Several commands may be launched concurrently in the same document, but the output will only be active in the session where the cursor is and at the place of the cursor. Therefore, we recommend to use different buffers for parallel executions.

  For each type of extern application, one may choose between sharing a single process by different sessions, or launching a separate process for each different session. More precisely, when inserting a session using <menu|Insert|Session|Other>, you may specify both a “session type” (Shell, Pari, Maxima, <abbr|etc.>) and a “session name” (the default name is “default”). Sessions with different names correspond to different processes and sessions with the same name share a common process.

  In order to finish the process which underlies a given session, you may use <menu|Session|Close session>. When pressing <shortcut|(kbd-return)> in the input of a non-connected system, the system will be restarted automatically. You may also use <menu|Session|Interrupt execution> in order to interrupt the execution of a command. However, several applications do not support this feature.

  In order to evaluate all fields of <abbr|e.g.> a previously created session, you may use <menu|Session|Evaluate|Evaluate all>. Similarly, <menu|Session|Evaluate|Evaluate above> and <menu|Session|Evaluate|Evaluate below> allow you to evaluate all field above or below the current field.

  <section|Editing sessions>

  Inside input fields of sessions, the cursor keys have a special meaning: when moving upwards or downwards, you will move to previous or subsequent input fields. When moving to the left or to the right, you will never leave the input field; you should rather use the mouse for this.

  Some facilities for editing input, output and text fields are available in the <menu|Session|Field> menu. Keyboard shortcuts for inserting fields are <shortcut|(structured-insert-up)> (insert above) and <shortcut|(structured-insert-down)>. Keyboard shortcuts for removing matching text/input/output fields are <shortcut|(structured-remove-left)> (remove backwards) and <shortcut|(structured-remove-right)> (remove current fields).

  It is possible to create “subsessions” using <menu|Session|Session|Create subsession> or <shortcut|(structured-insert-right)>. In that case, the current input-output field becomes the body of an unfolded subsession. Such a subsession consists of an explanatory text together with the subsession body. Subsessions can be folded and unfolded using <shortcut|(dynamic-previous)> <abbr|resp.> <shortcut|(dynamic-next)>. Subsessions have a nice rendering on the screen when using the <tmpackage|framed-session> package in <menu|Document|Use package|Program>.

  Notice that input/output fields and subsessions are foldable: when clicking on the prompt with the mouse, you may fold or unfold the entry to hide or show the output. For laptop presentations, this folding and unfolding process is done automatically when traversing your presentation. It is also possible to fold or unfold all fields in a session using <menu|Session|Session|Fold all fields> and <menu|Session|Session|Unfold all fields>.

  Other useful editing operations are <menu|Session|Session|Clear all fields>, which is useful for creating a demo session which will be executed later on, and <menu|Session|Split session>, which can be used for splitting a session into parts for inclusion into a paper.

  <\example>
    <label|session-example>A typical <name|Maxima> session is given below. If <name|Maxima> is present on your system, then you may put your cursor in one of the inputs, perform some edits, and try to reexecute it.

    <\session|maxima|default>
      <\output>
        Maxima 5.25.1 http://maxima.sourceforge.net

        using Lisp SBCL 1.0.51

        Distributed under the GNU Public License. See the file COPYING.

        Dedicated to the memory of William Schelter.

        The function bug_report() provides bug reporting information.
      </output>

      <\unfolded-io>
        <with|color|red|(<with|math-font-family|rm|%i>1) >
      <|unfolded-io>
        diff (x^x^x, x)
      <|unfolded-io>
        <math|<with|math-display|true|<text|<with|font-family|tt|color|red|(<with|math-font-family|rm|%o1>) >>x<rsup|x<rsup|x>>*<around*|(|x<rsup|x>*log <around*|(|x|)>*<around*|(|log <around*|(|x|)>+1|)>+x<rsup|x-1>|)>>>
      </unfolded-io>

      <\unfolded-io>
        <with|color|red|(<with|math-font-family|rm|%i>2) >
      <|unfolded-io>
        integrate (%o1, x)
      <|unfolded-io>
        <math|<with|math-display|true|<text|<with|font-family|tt|color|red|(<with|math-font-family|rm|%o2>) >>\<mathe\><rsup|\<mathe\><rsup|x*log <around*|(|x|)>>*log <around*|(|x|)>>>>
      </unfolded-io>

      <\unfolded-io>
        <with|color|red|(<with|math-font-family|rm|%i>3) >
      <|unfolded-io>
        integrate (x^5 / (x^2 - x + 17), x)
      <|unfolded-io>
        <math|<with|math-display|true|<text|<with|font-family|tt|color|red|(<with|math-font-family|rm|%o3>) >><frac|239*log <around*|(|x<rsup|2>-x+17|)>|2>+<frac|1361*arctan <around*|(|<frac|2*x-1|<sqrt|67>>|)>|<sqrt|67>>+<frac|3*x<rsup|4>+4*x<rsup|3>-96*x<rsup|2>-396*x|12>>>
      </unfolded-io>
    </session>
  </example>

  <section|Selecting the input method>

  By default, <TeXmacs> will attempt to evaluate the input field when pressing <key|return>. Multiline input can be created using <key|S-return>. Alternatively, when selecting the multiline input mode using <menu|Session|Input mode|Multiline input>, the <key|return> key will behave as usual and <key|S-return> may be used in order to evaluate the input field. Notice finally that certain systems admit built-in heuristics for testing whether the input has been completed; if not, then the <key|return> may behave as usual.

  Certain applications allow you to type the mathematical input in a graphical, two dimensional form. This feature can be used by selecting <menu|Session|Input mode|Mathematical input>. If this feature is available, then it is usually also possible to copy and paste output back into the input. However, it depends on the particular application how well this works. Keep in mind that some key combinations may be used by the <subsubmenu|Session|Input|Mathematical input> mode: for instance the key <key|$> is usually redefined inside math mode, so if you want to input it you'll have to type <key|S-F5><key|$>. You can read more about the prefix key <key|S-F5> in “<hlink|Keyboard shortcuts for text mode|../text/keyboard/man-text-kbd.en.tm>”.

  <\example>
    Below, you will find the <hlink|previous example session|man-session-edit.en.tm#session-example>, but now using mathematical input:

    <\session|maxima|default>
      <\output>
        Maxima 5.25.1 http://maxima.sourceforge.net

        using Lisp SBCL 1.0.51

        Distributed under the GNU Public License. See the file COPYING.

        Dedicated to the memory of William Schelter.

        The function bug_report() provides bug reporting information.
      </output>

      <\unfolded-io-math>
        <with|color|red|(<with|math-font-family|rm|%i>1) >
      <|unfolded-io-math>
        diff<around*|(|x<rsup|x<rsup|x>>,x|)>
      <|unfolded-io-math>
        <math|<with|math-display|true|<text|<with|font-family|tt|color|red|(<with|math-font-family|rm|%o1>) >>x<rsup|x<rsup|x>>*<around*|(|x<rsup|x>*log <around*|(|x|)>*<around*|(|log <around*|(|x|)>+1|)>+x<rsup|x-1>|)>>>
      </unfolded-io-math>

      <\unfolded-io-math>
        <with|color|red|(<with|math-font-family|rm|%i>2) >
      <|unfolded-io-math>
        <big|int>%o1*\<mathd\> x
      <|unfolded-io-math>
        <math|<with|math-display|true|<text|<with|font-family|tt|color|red|(<with|math-font-family|rm|%o2>) >>\<mathe\><rsup|\<mathe\><rsup|x*log <around*|(|x|)>>*log <around*|(|x|)>>>>
      </unfolded-io-math>

      <\unfolded-io-math>
        <with|color|red|(<with|math-font-family|rm|%i>3) >
      <|unfolded-io-math>
        <big|int><frac|x<rsup|5>|x<rsup|2>-x+17>*\<mathd\> x
      <|unfolded-io-math>
        <math|<with|math-display|true|<text|<with|font-family|tt|color|red|(<with|math-font-family|rm|%o3>) >><frac|239*log <around*|(|x<rsup|2>-x+17|)>|2>+<frac|1361*arctan <around*|(|<frac|2*x-1|<sqrt|67>>|)>|<sqrt|67>>+<frac|3*x<rsup|4>+4*x<rsup|3>-96*x<rsup|2>-396*x|12>>>
      </unfolded-io-math>
    </session>
  </example>

  <section|Scripting languages>

  <TeXmacs> provides a few other kinds of additional interfaces to external systems in addition to shell-like interfaces. First of all, it is possible to insert a so called “executable switch” anywhere in the document using <menu|Insert|Fold|Executable>.

  For instance, if <name|Maxima> is installed on your system, then <menu|Insert|Fold|Executable|Maxima> should yield something like <script-input|maxima|default||>. You may enter a<nbsp><name|Maxima> expression in the yellow part of this markup, say <script-input|maxima|default|diff(x^x,x)|>. Using <shortcut|(kbd-return)>, you may now switch back and forth between the unevaluated input and the evaluated output <script-output|maxima|default|diff(x^x,x)|<math|x<rsup|x>*<around*|(|log <around*|(|x|)>+1|)>>>. Using <shortcut|(kbd-shift-return)>, you enable multi-line input. This kind of executable switches are very useful for plug-ins such as <name|Dra<TeX>>, <name|Eukleides>, <name|Feynmf>, <abbr|etc.>, which are mainly used for the efficient computation and insertion of special graphics inside <TeXmacs> documents.

  Some plug-ins such as <name|Maxima> can even be selected as a <em|scripting language> using <menu|Document|Scripts|Maxima>. When doing so, a special <menu|Maxima> menu will appear, which allows for many useful operations directly on formulas. For instance, when putting the cursor inside the formula <math|1+1> and pressing <shortcut|(script-eval)> or <menu|Evaluate>, the formula gets evaluated automatically to yield <math|2>.

  If a plug-in can be used as a scripting language, then it is possible to create executable switches with links between them. More precisely, assuming that you selected a scripting language from <menu|Document|Scripts>, you may insert a new <em|executable input field> using <shortcut|(make-calc-input)> or <menu|Insert|Link|Executable input field>. As before, when pressing <key|return>, the current input is evaluated and you will see the corresponding output; you may switch back to the input by pressing <key|return> once more.

  Contrary to executable switches, you may attach an identifier to the executable input field by deactivating the field or by editing the <samp|Ref> field in the focus bar. Inside other executable input fields, you may then refer to the value of the field by inserting a <em|field reference> using <shortcut|(make 'calc-ref)> or <menu|Insert|Link|Field reference>. As a variant to executable input fields, you may sometimes prefer to insert plain <em|input fields> using <shortcut|(make-calc-inert)> or <menu|Insert|Link|Input field>. These fields can only be used as inputs and pressing <key|return> inside such a field will only recompute those other fields which depend on it.

  <\example>
    The executable input fields may for instance be nice in pedagogic documents in which parts of the document may be modified and recomputed by the reader. For instance, evaluation of the input fragment

    <\quote-env>
      The derivative of <with|prog-scripts|maxima|<calc-inert|function|<math|x<rsup|x>>>> equals <with|prog-scripts|maxima|<calc-input|derivative|diff(<calc-ref|function>,x)|<math|x<rsup|x>*<around*|(|log <around*|(|x|)>+1|)>>>>.

      The second derivative is given by <with|prog-scripts|maxima|<calc-input|second|diff(<calc-ref|derivative>,x)|<math|x<rsup|x>*<around*|(|log <around*|(|x|)>+1|)><rsup|2>+x<rsup|x-1>>>>.
    </quote-env>

    yields

    <\quote-env>
      The derivative of <with|prog-scripts|maxima|<calc-inert|function2|<math|x<rsup|x>>>> equals <with|prog-scripts|maxima|<calc-output|derivative2|diff(<calc-ref|function2>,x)|<math|x<rsup|x>*<around*|(|log <around*|(|x|)>+1|)>>>>.

      The second derivative is given by <with|prog-scripts|maxima|<calc-output|second2|diff(<calc-ref|derivative2>,x)|<math|x<rsup|x>*<around*|(|log <around*|(|x|)>+1|)><rsup|2>+x<rsup|x-1>>>>.
    </quote-env>

    Of course, if the reader changes the input function <math|x<rsup|x>> into something else and presses <key|return>, then the first and second derivatives will be updated automatically.
  </example>

  <section|Spreadsheets>

  <TeXmacs> provides rudimentary spreadsheet-like facilities with the advantage that the computations can be carried out using any of the plug-ins that can be used as a scripting language. In order to use the spreadsheet facilities, you should therefore start with the selection of a scripting language in the menu <menu|Document|Scripts>.

  As soon as you have selecting a scripting language, such as <name|Maxima>, then you may enter a new spreadsheet using <menu|Insert|Table|Textual spreadsheet> or <menu|Insert|Table|Numeric spreadsheet>. You may edit the spreadsheet as an ordinary table, except that the <key|return> key will attempt to reevaluate the cells of the table.

  In addition, when preceding the contents of a cell by =, then cell will be considered as an input-output switch. More precisely, the input is a formula which will be evaluated using the current scripting language. After the evaluation, only the result of the evaluation is shown in the cell. After pressing <key|return> a second time in the cell, it will be possible switch back and edit the input. In the formulas, one may refer to the others using names such as <samp|c5> for the third row and the fifth column.

  <\example>
    On the left-hand side of the figure below, we have displayed a simple table with formulas for evaluating the sums of the first two items of each row. On the right-hand side, we have shown the result after evaluation.

    <\big-figure|<small|<with|prog-scripts|maxima|<calc-table|simple1|<numeric-dot-table|<tformat|<cwith|1|-1|1|-1|cell-width|5em>|<cwith|1|-1|1|-1|cell-hmode|max>|<table|<row|<cell|<cell-inert|a1|1>>|<cell|<cell-inert|b1|10>>|<cell|<cell-inert|c1|=a1+b1>>>|<row|<cell|<cell-inert|a2|100>>|<cell|<cell-inert|b2|1000>>|<cell|<cell-inert|c2|=a2+b2>>>>>>><space|2em><calc-table|simple2|<numeric-dot-table|<tformat|<cwith|1|-1|1|-1|cell-width|5em>|<cwith|1|-1|1|-1|cell-hmode|max>|<table|<row|<cell|<cell-inert|a1|1>>|<cell|<cell-inert|b1|10>>|<cell|<cell-output|c1|=a1+b1|<math|11>>>>|<row|<cell|<cell-inert|a2|100>>|<cell|<cell-inert|b2|1000>>|<cell|<cell-output|c2|=a2+b2|<math|1100>>>>>>>>>>>
      Evaluation of a simple spreadsheet.
    </big-figure>
  </example>

  <\example>
    The cells may contain mathematical formulas and the spreadsheet may take advantage of any of the capacities of the scripting language. For instance, the figure below demonstrates another possible use of <name|Maxima>.

    <\big-figure|<small|<with|prog-scripts|maxima|<calc-table|derivatives1|<textual-table|<tformat|<cwith|1|-1|1|1|cell-width|15em>|<cwith|1|-1|1|1|cell-hmode|max>|<table|<row|<cell|<cell-inert|a1|<math|sin<around*|(|x<rsup|2>|)>>>>>|<row|<cell|<cell-inert|a2|=diff(a1,x)>>>|<row|<cell|<cell-inert|a3|=diff(a2,x)>>>|<row|<cell|<cell-inert|a4|=diff(a3,x)>>>>>>><space|2em><calc-table|derivatives2|<textual-table|<tformat|<cwith|1|-1|1|1|cell-width|15em>|<cwith|1|-1|1|1|cell-hmode|max>|<table|<row|<cell|<cell-inert|a1|<math|sin<around*|(|x<rsup|2>|)>>>>>|<row|<cell|<cell-output|a2|=diff(a1,x)|<math|2*x*cos <around*|(|x<rsup|2>|)>>>>>|<row|<cell|<cell-output|a3|=diff(a2,x)|<math|2*cos <around*|(|x<rsup|2>|)>-4*x<rsup|2>*sin <around*|(|x<rsup|2>|)>>>>>|<row|<cell|<cell-output|a4|=diff(a3,x)|<math|-12*x*sin <around*|(|x<rsup|2>|)>-8*x<rsup|3>*cos <around*|(|x<rsup|2>|)>>>>>>>>>>>>
      Computation of successive derivatives using <name|Maxima>.
    </big-figure>
  </example>

  <TeXmacs> supports a few special notations for applying operations on all cells in a subtable. For instance, as in <name|Excel>, one may use the notation <samp|c3:d5> for indicating all cells <samp|c3>, <samp|c4>, <samp|c5>, <samp|d3>, <samp|d4>, <samp|d5> in the block from <samp|c3> to <samp|d5>. An alternative notation <cell-commas> for <samp|:> can be entered by typing <key|, ,>. In a similar way, one may enter the special notation <cell-plusses> by typing <key|+ +>. For instance, <samp|c3<cell-plusses>d5> stands for the sum of all cells between <samp|c3> and <samp|d5>.

  <\example>
    The figure below shows an example on how to use taking sums of cells. Notice that empty cells count for zero.

    <\big-figure|<small|<with|prog-scripts|maxima|<calc-table|sum1|<numeric-dot-table|<tformat|<cwith|1|-1|1|-1|cell-width|5em>|<cwith|1|-1|1|-1|cell-hmode|max>|<table|<row|<cell|<cell-inert|a1|15.10>>|<cell|<cell-inert|b1|15.10>>|<cell|<cell-inert|c1|30.20>>>|<row|<cell|<cell-inert|a2|100>>|<cell|<cell-inert|b2|125>>|<cell|<cell-inert|c2|75>>>|<row|<cell|<cell-inert|a3|28.50>>|<cell|<cell-inert|b3|>>|<cell|<cell-inert|c3|14.25>>>|<row|<cell|<cell-inert|a4|12>>|<cell|<cell-inert|b4|16>>|<cell|<cell-inert|c4|20>>>|<row|<cell|<cell-inert|a5|=a1<cell-plusses>a4>>|<cell|<cell-inert|b5|=b1<cell-plusses>b4>>|<cell|<cell-inert|c5|=c1<cell-plusses>c4>>>>>>><space|2em><calc-table|sum2|<numeric-dot-table|<tformat|<cwith|1|-1|1|-1|cell-width|5em>|<cwith|1|-1|1|-1|cell-hmode|max>|<cwith|5|5|1|3|cell-width|5em>|<cwith|5|5|1|3|cell-hmode|max>|<table|<row|<cell|<cell-inert|a1|15.10>>|<cell|<cell-inert|b1|15.10>>|<cell|<cell-inert|c1|30.20>>>|<row|<cell|<cell-inert|a2|100>>|<cell|<cell-inert|b2|125>>|<cell|<cell-inert|c2|75>>>|<row|<cell|<cell-inert|a3|28.50>>|<cell|<cell-inert|b3|>>|<cell|<cell-inert|c3|14.25>>>|<row|<cell|<cell-inert|a4|12>>|<cell|<cell-inert|b4|16>>|<cell|<cell-inert|c4|20>>>|<row|<cell|<cell-output|a5|=a1<cell-plusses>a4|<math|155.6>>>|<cell|<cell-output|b5|=b1<cell-plusses>b4|<math|156.1>>>|<cell|<cell-output|c5|=c1<cell-plusses>c4|<math|139.45>>>>>>>>>>>
      Evaluation of a simple spreadsheet.
    </big-figure>
  </example>

  Notice that copying and pasting of subtables works in the same way as for ordinary tables, with the additional features that the names of the cells and references to cells in the formulas are renumbered automatically. Similarly, automatic renumbering is used when inserting new columns or rows, or when removing existing columns or rows.

  We also notice that field references can be used inside spreadsheet cells in order to refer to some computational markup outside the table. Inversely, each spreadsheet also carries an invisible <samp|Ref> field which can be edited by deactivating the spreadsheet or from the focus bar (when selecting the entire spreadsheet). The <samp|Ref> field of the spreadsheet is used as a prefix for referring to the contents of cells outside the table or from within other spreadsheets. For instance, if <samp|Ref> equals <samp|sheet>, then <samp|sheet-c4> will refer to the field <samp|c4> inside the spreadsheet.

  <section|Remote plug-ins>

  It sometimes happens that certain plug-ins are only installed on a remote computer. In many cases, it will still be possible to use such a plug-in inside <TeXmacs> over an <hlink|SSH|http://www.openssh.com/> connection.

  In order to make this work, you first have to make sure that SSH is installed on both computers and that connecting by SSH to the remote machine can be done automatically, without having to type a password. This can be done by copying your public identity on the local server to the remote server into the file <verbatim|~/.ssh/authorized_keys>; see the documentation on SSH for more information.

  As the next step, you have to make sure that <TeXmacs> has been installed on both computers. The remote <TeXmacs> installation will mainly be used in order to detect which plug-ins can be used on the remote computer.

  When everything has been set up correctly in this way, select <menu|Insert|Session|Remote> in order to open the remote plug-in selector. Add the name of the remote server by typing its name or IP address and clicking on <menu|Add>. After a small pause, the remote server should appear in the list together with the remote plug-ins which are supported. You may now simply select the plug-in you want to use from the list. Notice that remote plug-ins may take a few seconds in order to boot. Please be patient while booting is in progress.

  Servers which have been added to the list of remote plug-in servers will be remembered at the next time when you start <TeXmacs>. You may use the buttons <menu|Remove> and <menu|Update> in order to remove a server from the list and to redetermine the list of supported remote plug-ins.

  <chapter|Writing your own style files and packages>

  One of the fundamental strengths of <TeXmacs> is the possibility to write your own style files and packages. The purpose of style files is multiple:

  <\itemize>
    <item>They allow the abstraction of repetitive elements in texts, like sections, theorems, enumerations, etc.

    <item>They form a mechanism which allow you to structure your text. For instance, you may indicate that a given portion of your text is an abbreviation, a quotation or “important”.

    <item>Standard document styles enable you to write professionally looking documents, because the corresponding style files have been written with a lot of care by people who know a lot about typography and aesthetics.
  </itemize>

  The user may select a major style from the <menu|Document|Style> menu. The major style usually reflects the kind of document you want to produce (like a letter, an article or a book) or a particular layout policy (like publishing an article in a given journal).

  Style packages, which are selected from the <menu|Document|Style> menu, are used for further customization of the major style. For instance, the <tmpackage|number-europe> package enables European-style theorem numbering and the <tmpackage|maxima> package contains macros for customizing the layout of sessions of the <name|Maxima> computer algebra system. Several packages may be used together.

  When you want to add your own markup to <TeXmacs> or personalize the layout, then you have to choose between writing a principal style file or a style package. In most cases, you will probably prefer to write a style package, since this will allow you to combine it arbitrary other styles. However, in some cases you may prefer to create a new principal style, usually by personalizing an existing style. This is usually the case if you want to mimic the layout policy of some journal. In this chapter, we will both explain how to write your own style packages and how to customize the standard styles.

  <section|Writing a simple style package>

  Let us explain on an example how to write a simple style package. First of all, you have to create a new buffer using <menu|File|New> and select the <tmstyle|source> document style using <menu|Document|Style|source>. Now save your empty style package in your personal style package directory

  <verbatim| \ \ \ $HOME/.TeXmacs/packages>

  Notice that the button <menu|Texts> in the file browser corresponds to the directory

  <verbatim| \ \ \ $HOME/.TeXmacs/texts>

  Consequently, you can go to the style package directory from there, by double clicking on <verbatim|..> and next on <verbatim|packages>. Similarly, the directory

  <verbatim| \ \ \ $HOME/.TeXmacs/styles>

  contains your personal style files. After saving your empty style package, it should automatically appear in the <menu|Document|Package> menu. Notice that style files must be saved using the <verbatim|.ts> file extension. If you save the style file in a subdirectory of <verbatim|$HOME/.TeXmacs/packages>, then it will automatically appear in the corresponding submenu of <menu|Document|Package>.

  Let us now create a simple macro <markup|hi> which displays “Hello world”. First type <shortcut|(make 'assign)>, so as to create an assignment. You should see something like

  <\tm-fragment>
    <inactive*|<assign||>>
  </tm-fragment>

  Now enter “hi” as the first argument and type <shortcut|(make 'macro)> inside the second argument in order to create a macro. You should now see something like

  <\tm-fragment>
    <inactive*|<assign|hi|<macro|>>>
  </tm-fragment>

  Finally, type the text “Hello world” in the body of the macro. Your document should now consist of the following line:

  <\tm-fragment>
    <inactive*|<assign|hi|<macro|Hello world>>>
  </tm-fragment>

  After saving your style package, opening a new document and selecting your package in the <menu|Document|Use package> menu, you may now use the macro <markup|hi> in your document by typing <key|\\ h i> and hitting <shortcut|(kbd-return)>.

  In a similar way, you may create macros with arguments. For instance, assume that we started entering a macro <markup|hello> in a similar way as above. Instead of typing “Hello world”, we first type <shortcut|(structured-insert-left)> inside the macro body so as to create an additional argument on the left hand side of the cursor. We next enter the name of the argument, say “name”. You should now see something like below:

  <\tm-fragment>
    <inactive*|<assign|hello|<macro|name|>>>
  </tm-fragment>

  In the second argument of the body, we now type “Hello ”, <shortcut|(make 'arg)>, “name”, <key|right> and “, how are you today?”. After this you should see

  <\tm-fragment>
    <inactive*|<assign|hello|<macro|name|Hello <arg|name>, how are you today?>>>
  </tm-fragment>

  The <shortcut|(make 'arg)> shortcut is used to retrieve the macro argument <src-arg|name>. Instead of typing <shortcut|(make 'arg)>, “name” and <key|right>, you may also use the hybrid <key|\\>-key and type <key|\\ n a m e> followed by <shortcut|(kbd-return)>. After saving your style package, you may again use the macro in any document which uses your package by typing <key|\\ h e l l o> and hitting <key|return>.

  From the internal point of view, all macro definitions are stored in the environment of the <TeXmacs> typesetter. Besides macros, the environment also contains normal environment variables, such as section counters or the font size. The environment variables can either be globally changed using the <markup|assign> primitive, or locally, using the <markup|with> primitive. For instance, when including the line

  <\tm-fragment>
    <inactive*|<assign|section-nr|-1>>
  </tm-fragment>

  in your package, and using <tmstyle|article> as your major style, then the first section will be numbered <no-break><math|0>. Similarly, the variant

  <\tm-fragment>
    <inactive*|<assign|hello|<macro|name|Hello <with|font-shape|small-caps|<arg|name>>!>>>
  </tm-fragment>

  of the <markup|hello> macro displays the name of the person in <with|font-shape|small-caps|Small Capitals>. Notice that the <markup|with> primitive can also be used to locally redefine a macro. This is for instance used in the definitions of the standard list environments, where the macro which renders list icons is changed inside the body of the list. Yet another variant of the <markup|hello> macro relies on the standard <markup|person> macro:

  <\tm-fragment>
    <inactive*|<assign|hello|<macro|name|Hello <person|<arg|name>>!>>>
  </tm-fragment>

  In order to produce the macro application <inactive*|<person|<arg|name>>>, you first have to start a compound tag using <shortcut|(make 'compound)>, type the name “person”, insert an argument <shortcut|(structured-insert-right)>, and enter the argument <src-arg|name> as before. When you are done, you may press <shortcut|(kbd-return)> in order to change the <markup|compound> tag into a <markup|person> tag. Alternatively, you may type <key|\\>, “person”, <shortcut|(structured-insert-right)> and “name”.

  By combining the above constructs, an ordinary user should already be able to produce style packages for all frequently used notations. An interesting technique for writing macros which involve complex formulas with some subformulas which may change goes as follows:

  <\enumerate>
    <item>Type the formula, say <math|<around|(|a<rsub|1>,\<ldots\>,a<rsub|n>|)>>, in an ordinary document.

    <item>Create the skeleton of your macro in your style package:

    <\tm-fragment>
      <inactive*|<assign|n-tuple|<macro|a|>>>
    </tm-fragment>

    <item>Copy the formula and paste it into the body of your macro:

    <\tm-fragment>
      <inactive*|<assign|n-tuple|<macro|a|(a<rsub|1>,\<ldots\>,a<rsub|n>)>>>
    </tm-fragment>

    <item>Replace the subformulas you want to parameterize by macro arguments:

    <\tm-fragment>
      <inactive*|<assign|n-tuple|<macro|a|(<arg|a><rsub|1>,\<ldots\>,<arg|a><rsub|n>)>>>
    </tm-fragment>

    <item>You may now use the macro in documents which use your package:

    <\equation*>
      <with|n-tuple|<macro|a|<around|(|<arg|a><rsub|1>,\<ldots\>,<arg|a><rsub|n>|)>>|<n-tuple|a>=<n-tuple|b>.>
    </equation*>
  </enumerate>

  <section|Rendering of style files and packages>

  <subsection|ASCII-based or tree-based editing: an intricate choice>

  Most users are used to edit source code using a conventional editor like <name|Emacs>, while presenting the source code in ASCII format. Since all <TeXmacs> documents are stored as <hlink|trees|../../../devel/format/basics/basics.en.tm>, an interesting but complicated question is which format is most suitable for editing such documents. One option is to represent the tree using an ASCII-based format, such as XML, Scheme, or the native format for storing files on a disk. The other option is to edit the trees as such, making no fundamental distinction between source code and normal documents.

  In <TeXmacs> we have chosen to implement the second option. More precisely, any document can be edited in “source mode”, which is merely a mode for rendering the document in a way which makes its tree structure particularly apparent. It may be instructive to take an arbitrary document of yours and to take a look at it in “source mode” by enabling <menu|Document|Source|Edit source tree>.

  The choice between ASCII-based editing and tree-based editing is non-trivial, because <TeXmacs> style files and packages have a double nature: they may be seen as programs which specify how to render macros, but these programs naturally contain ordinary content. There are several reasons why users often prefer to edit source code in an ASCII-based format:

  <\enumerate>
    <item>It is easy to manually format the code so as to make it more readable.

    <item>In particular, it is easy to add comments.

    <item>Standard editors like <name|Emacs> provide tools for automatic highlighting, indentation, <abbr|etc.>

    <item><label|structure-constraints>One is not constraint by any “structure” during the editing phase.
  </enumerate>

  Our approach is to reproduce as much of the above advantages in a structured document environment. Although point <reference|structure-constraints> will obviously be hard to meet when following this approach, we believe that the first three advantages might actually become greater in a structured environment. However, this requires a more profound understanding of how users format and edit source code.

  For instance, consider a piece of manually formatted code like

  <\cpp-code>
    if (cond) hop \ \ = 2;

    else \ \ \ \ \ holala= 3;
  </cpp-code>

  Clearly, the user had a particular formatting policy when writing this code. However, this policy does not appear in the document: manual intervention will be necessary if the variable <verbatim|cond> is renamed <verbatim|c>, or if the variable <verbatim|holala> is renamed <verbatim|hola>.

  At the moment, <TeXmacs> provides no tools for dealing with the above example in an automatic way, but a few tools are already provided. For instance, the user is given a great amount of control on how to indent source code and reasonable defaults are provided as a function of the structure. We also provide high level environments for comments and structured highlighting. Further tools will be developed later and we are open for any suggestions from our users.

  <subsection|Global presentation>

  In the <menu|Source tags> group of the <menu|Document|Source> menu, you find several ways to customize the rendering of source trees in your document. We recommend you to play around with the different possibilities in a document of your own (after enabling <menu|Document|Source|Source tree>) or a standard style package in <verbatim|$TEXMACS_PATH/packages>.

  First of all, you may choose between the different major styles “angular”, “scheme”, “functional” and “<LaTeX>” \ for rendering source trees, as illustrated in the figure below:

  <\big-figure>
    <\quote-env>
      <small|<tabular*|<tformat|<twith|table-width|1par>|<twith|table-hmode|exact>|<cwith|2|2|1|1|cell-hyphen|t>|<cwith|2|2|3|3|cell-hyphen|t>|<cwith|5|5|1|1|cell-hyphen|t>|<cwith|5|5|3|3|cell-hyphen|t>|<table|<row|<cell|<with|font-size|0.71|Angular>>|<cell|>|<cell|<with|font-size|0.71|Scheme>>>|<row|<\cell>
        <\with|src-style|angular>
          <\framed-fragment>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </framed-fragment>
        </with>
      </cell>|<cell|>|<\cell>
        <\with|src-style|scheme>
          <\framed-fragment>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </framed-fragment>
        </with>
      </cell>>|<row|<cell|>|<cell|>|<cell|>>|<row|<cell|<with|font-size|0.71|Functional>>|<cell|>|<cell|<with|font-size|0.71|<LaTeX>>>>|<row|<\cell>
        <\with|src-style|functional>
          <\framed-fragment>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </framed-fragment>
        </with>
      </cell>|<cell|>|<\cell>
        <\with|src-style|latex>
          <\framed-fragment>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </framed-fragment>
        </with>
      </cell>>>>>>
    </quote-env>
  <|big-figure>
    Different styles for rendering the same source tree.
  </big-figure>

  Secondly, you may wish to reserve a special treatment to certain tags like <markup|concat> and <markup|document>. In the menu <menu|Document|Source|Special> you may specify to which extent you want to treat such tags in a special way:

  <\description>
    <item*|None>No tags receive a special treatment.

    <item*|Formatting>Only the formatting tags <markup|concat> and <markup|document> are represented as usual.

    <item*|Normal>In addition to the formatting tags, a few other tags like <markup|compound>, <markup|value> and <markup|arg> are represented in a special way.

    <item*|Maximal>At the moment, this option is not yet implemented. The intention is to allow the user to write his own customizations and to allow for special rendering of basic operations like <markup|plus>.
  </description>

  These different options are illustrated below:

  <\big-figure>
    <\quote-env>
      <small|<tabular*|<tformat|<twith|table-width|1par>|<twith|table-hmode|exact>|<cwith|2|2|1|1|cell-hyphen|t>|<cwith|2|2|3|3|cell-hyphen|t>|<cwith|5|5|1|1|cell-hyphen|t>|<cwith|5|5|3|3|cell-hyphen|t>|<table|<row|<cell|<with|font-size|0.71|None>>|<cell|>|<cell|<with|font-size|0.71|Formatting>>>|<row|<\cell>
        <\framed-fragment>
          <\with|src-special|raw>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>|<cell|>|<\cell>
        <\framed-fragment>
          <\with|src-special|format>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>>|<row|<cell|>|<cell|>|<cell|>>|<row|<cell|<with|font-size|0.71|Normal>>|<cell|>|<cell|<with|font-size|0.71|Maximal>>>|<row|<\cell>
        <\framed-fragment>
          <\with|src-special|normal>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>|<cell|>|<\cell>
        <\framed-fragment>
          <\with|src-special|maximal>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>>>>>>
    </quote-env>

    \;
  <|big-figure>
    Different ways to render special tags.
  </big-figure>

  Another thing which may be controlled by the user is whether the presentation of tags should be compact or stretched out across several lines. Several levels of compactification may be specified in the <menu|Document|Source|Compactification> menu:

  <\description>
    <item*|Minimal>The tags are all stretched out across several lines.

    <item*|Only inline tags>All non-inline tags are stretched out across several lines.

    <item*|Normal>All inline arguments at the start of the tag are represented in a compact way. As soon as we encounter a block argument, the remainder of the arguments are stretched out across several lines.

    <item*|Inline arguments>All inline arguments are represented in a compact way and only block tags are stretched out across several lines.

    <item*|Maximal>All source code is represented in a compact way.
  </description>

  The “normal” and “inline arguments” options rarely differ. The visual effect of the different options is illustrated below:

  <\big-figure>
    <\quote-env>
      <small|<tabular*|<tformat|<twith|table-width|1par>|<twith|table-hmode|exact>|<cwith|2|2|1|1|cell-hyphen|t>|<cwith|2|2|3|3|cell-hyphen|t>|<cwith|5|5|1|1|cell-hyphen|t>|<cwith|5|5|3|3|cell-hyphen|t>|<table|<row|<cell|<with|font-size|0.71|Minimal>>|<cell|>|<cell|<with|font-size|0.71|Only inline tags>>>|<row|<\cell>
        <\framed-fragment>
          <\with|src-compact|none>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>|<cell|>|<\cell>
        <\framed-fragment>
          <\with|src-compact|inline>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>>|<row|<cell|>|<cell|>|<cell|>>|<row|<cell|<with|font-size|0.71|Normal>>|<cell|>|<cell|<with|font-size|0.71|Maximal>>>|<row|<\cell>
        <\framed-fragment>
          <\with|src-compact|normal>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>|<cell|>|<\cell>
        <\framed-fragment>
          <\with|src-compact|all>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>>>>>>
    </quote-env>
  <|big-figure>
    Different levels of compactification.
  </big-figure>

  Finally, the user may specify the way closing tags should be rendered when the tag is stretched out across several lines. The rendering may either be minimalistic, compact, long, or recall the matching opening tag. The different options are illustrated below:

  <\big-figure>
    <\quote-env>
      <small|<tabular*|<tformat|<twith|table-width|1par>|<twith|table-hmode|exact>|<cwith|2|2|1|1|cell-hyphen|t>|<cwith|2|2|3|3|cell-hyphen|t>|<cwith|5|5|1|1|cell-hyphen|t>|<cwith|5|5|3|3|cell-hyphen|t>|<table|<row|<cell|<with|font-size|0.71|Minimal>>|<cell|>|<cell|<with|font-size|0.71|Compact>>>|<row|<\cell>
        <\framed-fragment>
          <\with|src-close|minimal>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>|<cell|>|<\cell>
        <\framed-fragment>
          <\with|src-close|compact>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>>|<row|<cell|>|<cell|>|<cell|>>|<row|<cell|<with|font-size|0.71|Stretched>>|<cell|>|<cell|<with|font-size|0.71|Repeat>>>|<row|<\cell>
        <\framed-fragment>
          <\with|src-close|long>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>|<cell|>|<\cell>
        <\framed-fragment>
          <\with|src-close|repeat>
            <inactive*|<assign|quick-theorem|<\macro|body>
              <surround|<no-indent>Theorem. ||<arg|body>>
            </macro>>>
          </with>
        </framed-fragment>
      </cell>>>>>>
    </quote-env>
  <|big-figure>
    Different ways to render closing tags.
  </big-figure>

  <subsection|Local customization>

  Even though <TeXmacs> tries hard to render source code in a nice way following the global rendering options that you specified, the readability of the source code often needs to be further enhanced locally. In source mode, this can be done using the menus <menu|Source|Activation> and <menu|Source|Presentation>. Any local hints on how to render source code are automatically removed from the document when it is being used as a style file or package.

  First of all, for certain pieces of content the user may prefer to see them in their “activated” form instead as dead source code. This may for instance be the case for embedded images, or for mathematical symbols, like in

  <\tm-fragment>
    <math|<inactive*|<assign|R|<macro|<active*|\<bbb-R\>>>>>>
  </tm-fragment>

  Such an active presentation may also be preferred for certain more complex macros:

  <\tm-fragment>
    <math|<inactive*|<assign|diag|<macro|var|dim|<active*|<matrix|<tformat|<table|<row|<cell|<inactive*|<arg|var>><rsub|1>>|<cell|>|<cell|\<b-0\>>>|<row|<cell|>|<cell|\<ddots\>>|<cell|>>|<row|<cell|\<b-0\>>|<cell|>|<cell|<inactive*|<arg|var>><rsub|<inactive*|<arg|dim>>>>>>>>>>>>>
  </tm-fragment>

  A piece of code can be activated by selecting it and using <menu|Source|Activation|Activate> or <shortcut|(make-mod-active 'active*)>. Similarly, a piece of content may be deactivated using <key|<rigid|M->-> (we used this in the second example above for the rendering of the arguments <src-arg|var> and <src-arg|dim>). Activation and deactivation either apply to the whole tree, or to the root only (<abbr|e.g.> <menu|Source|Activation|Activate once>).

  Another way to customize the rendering is to override some of the global rendering options. This is mainly interesting for controlling more precisely which tags have to be stretched across several lines and which tags have to be represented in a compact fashion. For instance, the <markup|concat> tag can be used in order to concatenate content, as well as for specifying a block of sequential statements, or a combination of both. For instance, in the piece of code

  <\tm-fragment>
    <inactive*|<assign|my-section|<macro|title|<style-with|src-compact|none|<header-hook|<arg|title>><toc-hook|<arg|title>><my-section-title|<arg|title>>>>>>
  </tm-fragment>

  we have stretched the <markup|concat> tag along several lines using <menu|Source|Presentation|Stretched> (notice that this implies the <markup|concat> tag to appear explicitly, so as to avoid confusion with the <markup|document> tag). Similarly, if a part of the concatenation were to be displayed as usual, then one may use <menu|Source|Presentation|Compact>:

  <\tm-fragment>
    <inactive*|<assign|my-section|<macro|title|<style-with|src-compact|none|<header-hook|<arg|title>><toc-hook|<arg|title>><style-with|src-compact|all|<with|font-series|bold|Section:> <arg|title>>>>>>
  </tm-fragment>

  At present, we did not implement a way to mark arguments as inline or block, but we might do this later.

  A final way to customize the rendering of source code is to apply an arbitrary macro using <menu|Source|Presentation|Apply macro> or <menu|Source|Presentation|Apply macro once>. This macro will be automatically removed when you use your document as a style file or package.

  <section|The style-sheet language>

  In the section about <hlink|writing a simple style package|style-example.en.tm> we already gave you a first impression about the style-sheet language of <TeXmacs>. In this section, we will give a more complete survey of the available features. For more detailed descriptions, we refer to the chapter about the <hlink|<TeXmacs> primitives|../../format/stylesheet/stylesheet.en.tm>.

  The style-sheet primitives can be obtained from the <menu|Source> menu when you are in source mode. In all other modes, the <menu|Source> menu becomes visible after enabling the <menu|Source macros tool> in the <menu|Tools> menu. Alternatively, you may use the <prefix|A-> and <prefix|executable> keyboard prefixes in source mode and the<nbsp><prefix|inactive> and<nbsp><prefix|executable> prefixes otherwise. Furthermore, we recall that the hybrid <key|\\>-key may be used for creating macro-applications or arguments, depending on the context. Finally, the <shortcut|(structured-insert-right)> and <shortcut|(structured-insert-left)> keys are used for inserting arguments.

  <subsection|Assignments>

  All user defined <TeXmacs> macros and style variables are stored in the “current typesetting environment”. This environment associates a tree value to each string variable. Variables whose values are macros correspond to new primitives. The others are ordinary environment variables. The primitives for operating on the environment are available from <menu|Source|Define>.

  You may permanently change the value of an environment variable using the <markup|assign> primitive, as in the example

  <\tm-fragment>
    <inactive*|<assign|hi|<macro|Hi there!>>>
  </tm-fragment>

  You may also locally change the values of one or several environment variables using the <markup|with> primitive:

  <\tm-fragment>
    <inactive*|<with|font-series|bold|color|red|Bold red text>>
  </tm-fragment>

  The value of an environment variable may be retrieved using the <markup|value> primitive. This may for instance be used in order to increase a counter:

  <\tm-fragment>
    <inactive*|<assign|my-counter|<plus|<value|my-counter>|1>>>
  </tm-fragment>

  Finally, you may associate logical properties to environment variables using the <markup|drd-props> primitive. This is explained in more detail in the section about <hlink|macro primitives|../../format/stylesheet/prim-macro.en.tm>.

  <subsection|Macro expansion>

  The main interest of the <TeXmacs>' style-sheet language is the possibility to define macros. These come in three flavours: ordinary macros, macros which take an arbitrary number of arguments and external macros, whose expansion is computed by <name|Scheme> or a plug-in. The macro-related primitives are available from the <menu|Source|Macro> menu. Below, we will only describe the ordinary macros. For more details, we refer to the section about <hlink|macro primitives|../../format/stylesheet/prim-macro.en.tm>.

  Ordinary macros are usually defined using

  <\tm-fragment>
    <inactive*|<assign|my-macro|<macro|<active*|x<rsub|1>>|<active*|<math|\<cdots\>>>|<active*|x<rsub|n>>|body>>>
  </tm-fragment>

  After such an assignment, <markup|my-macro> becomes a new primitive with <math|n> arguments, which may be called using

  <\tm-fragment>
    <inactive|<my-macro|<active*|y<rsub|1>>|<active*|<math|\<cdots\>>>|<active*|y<rsub|n>>>>
  </tm-fragment>

  Inside the body of the macro, the <markup|arg> primitive may be used to retrieve the values of the arguments to the macro.

  <\tm-fragment>
    <inactive*|<assign|hello|<macro|name|Hello <arg|name>, you look nice today!>>>
  </tm-fragment>

  It is possible to call a macro with less or more arguments than the expected number. Superfluous arguments are simply ignored. Missing arguments take the nullary <markup|uninit> primitive as value:

  <\tm-fragment>
    <inactive*|<assign|hey|<macro|first|second|<style-with|src-compact|none|<if|<equal|<arg|second>|<uninit>>|Hey <arg|first>, you look lonely today...|Hey <arg|first> and <arg|second>, you form a nice couple!>>>>>
  </tm-fragment>

  We finally notice that you are allowed to compute with macros, in a similar way as in functional programming, except that our macros are not closures (yet). For instance:

  <\tm-fragment>
    <inactive|<assign|my-macro-copy|<inactive|<value|my-macro>>>>
  </tm-fragment>

  The <markup|compound> tag may be used to apply macros which are the result of a computation:

  <\tm-fragment>
    <inactive*|<assign|overloaded-hi|<macro|name|<style-with|src-compact|none|<compound|<if|<nice-weather>|<value|happy-hi>|<value|sad-hi>>|<arg|name>>>>>>
  </tm-fragment>

  <subsection|Formatting primitives>

  This section contains some important notes on formatting primitives which are not really part of the style-sheet language, but nevertheless very related.

  First of all, most <TeXmacs> presentation tags can be divided in two main categories: inline tags and block tags. For instance, <markup|frac> is a typical inline tag, whereas <markup|theorem> is a typical block tag. Some tags, like <markup|strong> are inline if their argument is and block in the contrary case. When writing macros, it is important to be aware of the inline or block nature of tags, because block tags inside a horizontal concatenation are not rendered in an adequate way. If you need to surround a block tag with some inline text, then you need the surround primitive:

  <\tm-fragment>
    <inactive*|<assign|my-theorem|<macro|body|<surround|<no-indent><with|font-series|bold|Theorem. >|<right-flush>|<arg|body>>>>>
  </tm-fragment>

  In this example, we surrounded the body of the theorem with the bold text “Theorem.” at the left hand side and a “right-flush” at the right-hand side. Flushing to the right is important in order to make the blue visual border hints look nice when you are inside the environment.

  In most cases, <TeXmacs> does a good job in determining which tags are inline and which ones are not. However, you sometimes may wish to force a tag to be a block environment. For instance, the tag <markup|very-important> defined by

  <\tm-fragment>
    <inactive*|<assign|very-important|<macro|body|<with|font-series|bold|color|red|<arg|body>>>>>
  </tm-fragment>

  may both be used as an inline tag and a block environment. When placing your cursor just before the <markup|with>-tag and hitting <shortcut|(kbd-return)> followed by <key|backspace>, you obtain

  <\tm-fragment>
    <inactive*|<assign|very-important|<\macro|body>
      <with|font-series|bold|color|red|<arg|body>>
    </macro>>>
  </tm-fragment>

  Since the body of the macro is now a block, your tag <markup|very-important> will automatically become a block environment too. In the future, the <markup|drd-props> primitive will give you even more control over which tags and arguments are inline and which ones are block.

  Another important property of tags is whether they contain normal textual content or tabular content. For instance, consider the definition of the standard <markup|eqnarray*> tag (with a bit of presentation markup suppressed):

  <\tm-fragment>
    <inactive*|<assign|eqnarray*|<macro|body|<with|par-mode|center|mode|math|math-display|true|par-sep|0.45fn|<surround|<no-page-break*><vspace*|0.5fn>|<vspace|0.5fn><no-indent*>|<tformat|<twith|table-hyphen|y>|<twith|table-width|1par>|<twith|table-min-cols|3>|<twith|table-max-cols|3>|<cwith|1|-1|1|1|cell-hpart|1>|<cwith|1|-1|-1|-1|cell-hpart|1>|<arg|body>>>>>>>
  </tm-fragment>

  The use of <markup|surround> indicates that <markup|eqnarray*> is a block environment and the use of <markup|tformat> specifies that it is also a tabular environment. Moreover, the <markup|twith> and <markup|cwith> are used to specify further formatting information: since we are a block environment, we enable hyphenation and let the table span over the whole paragraph (unused space being equally distributed over the first and last columns). Furthermore, we have specified that the table contains exactly three columns.

  Finally, it is important to bear in mind that style-sheets do not merely specify the final presentation of a document, but that they may also contain information for the authoring phase. Above, we have already mentioned the use of the <markup|right-flush> tag in order to improve the rendering of \ visual border hints. Similarly, visual hints on invisible arguments may be given in the form of flags:

  <\tm-fragment>
    <inactive*|<assign|labeled-theorem|<macro|id|body|<style-with|src-compact|none|<surround|<style-with|src-compact|none|<no-indent><flag|Id: <arg|id>|blue|id><with|font-series|bold|Theorem. >>|<right-flush>|<arg|body>>>>>>
  </tm-fragment>

  More generally, the <markup|specific> tag with first argument “screen” may be used to display visual hints, which are removed when printing the document.

  <subsection|Evaluation control>

  The <menu|Source|Evaluation> menu contains several primitives to control the way expressions in the style-sheet language are evaluated. The most frequent use of these primitives is when you want to write a “meta-macro” like <markup|new-theorem> which is used for defining or computing on other macros. For instance:

  <\tm-fragment>
    <inactive*|<assign|new-theorem|<macro|name|text|<quasi|<assign|<unquote|name>|<macro|body|<surround|<no-indent><strong|<unquote|<arg|text>>. >|<right-flush>|<arg|body>>>>>>>>
  </tm-fragment>

  When calling <inactive*|<new-theorem|theorem|Theorem>> in this example, we first evaluate all <markup|unquote> instructions inside the <markup|quasi> primitive, which yields the expression

  <\tm-fragment>
    <inactive*|<assign|theorem|<macro|body|<surround|<no-indent><strong|Theorem. >|<right-flush>|<arg|body>>>>>
  </tm-fragment>

  Next, this expression is evaluated, thereby defining a macro <markup|theorem>.

  It should be noticed that the <TeXmacs> conventions for evaluation are slightly different then those from conventional functional languages like <name|Scheme>. The subtle differences are motivated by our objective to make it as easy as possible for the user to write macros for typesetting purposes.

  For instance, when <TeXmacs> calls a macro <inactive*|<macro|<active*|x<rsub|1>>|<active*|<math|\<cdots\>>>|<active*|x<rsub|n>>|body>> with arguments <verbatim|y<rsub|1>> until <verbatim|y<rsub|n>>, the argument variables <src-arg|x<rsub|1>> until <src-arg|x<rsub|n>> are bound to the unevaluated expressions <verbatim|y<rsub|1>> until <verbatim|y<rsub|n>>, and the body is evaluated with these bindings. The evaluation of <verbatim|y<rsub|i>> takes place each time we request for the argument <no-break><src-arg|x<rsub|i>>. In particular, when applying the macro <inactive*|<macro|x|<arg|x> and again <arg|x>>> to an expression <verbatim|y>, the expression <no-break><verbatim|y> is evaluated twice.

  In <name|Scheme>, the bodies of <name|Scheme> macros are evaluated twice, whereas the arguments of functions are evaluated. On the other hand, when retrieving a variable (whether it is an argument or an environment variable), the value is not evaluated. Consequently, a <TeXmacs> macro

  <\tm-fragment>
    <inactive*|<assign|foo|<macro|x|<blah|<arg|x>|<arg|x>>>>>
  </tm-fragment>

  would correspond to a <name|Scheme> macro

  <\scm-code>
    (define-macro (foo x)

    \ \ ‘(let ((x (lambda () ,x)))

    \ \ \ \ \ (blah (x) (x)))
  </scm-code>

  Conversely, the <name|Scheme> macro and function

  <\scm-code>
    (define-macro (foo x) (blah x x))

    (define (fun x) (blah x x))
  </scm-code>

  admit the following analogues in <TeXmacs>:

  <\tm-fragment>
    <\inactive*>
      <assign|foo|<macro|x|<eval|<blah|<quote-arg|x>|<quote-arg|x>>>>>
    </inactive*>

    <\inactive*>
      <assign|fun|<macro|x|<with|x*|<arg|x>|<blah|<quote-value|x*>|<quote-value|x*>>>>>
    </inactive*>
  </tm-fragment>

  Here the primitives <markup|quote-arg> and <markup|quote-value> are used to retrieve the value of an argument <abbr|resp.> an environment variable. The <TeXmacs> primitives <markup|eval>, <markup|quote>, <markup|quasiquote> and <markup|unquote> behave in the same way as their <name|Scheme> analogues. The <markup|quasi> primitive is a shortcut for quasi-quotation followed by evaluation.

  <subsection|Control flow>

  Besides sequences of instructions, which can be achieved using the <markup|concat> primitive, and the mechanism of macro expansion, the <TeXmacs> style-sheet language provides a few other primitive for affecting the control flow: <markup|if>, <markup|case>, <markup|while> and <markup|for-each>. These primitives are available from the <menu|Source|Control flow> menu. However, we have to warn the user that the conditional constructs are quite fragile: they only apply to inline content and the accessibility of macro arguments should not to much depend on the conditions.

  The most important primitive <markup|if>, which can be entered using <shortcut|(make 'if)>, allows for basic conditional typesetting:

  <\tm-fragment>
    <inactive*|<assign|appendix|<\macro|title|body>
      <style-with|src-compact|none|<compound|<if|<long-document>|<value|chapter-appendix>|<value|section-appendix>>|<arg|title>|<arg|body>>>
    </macro>>>
  </tm-fragment>

  In this example, <markup|appendix> is a block environment consisting of a title and a body, and which is rendered as a chapter for long documents and as a section for short ones. Notice that the following implementation would have been incorrect, since the <markup|if> primitive currently only works for inline content:

  <\tm-fragment>
    <inactive*|<assign|appendix|<\macro|title|body>
      <style-with|src-compact|none|<if|<long-document>|<chapter-appendix|<arg|title>|<arg|body>>|<section-appendix|<arg|title>|<arg|body>>>>
    </macro>>>
  </tm-fragment>

  The <markup|if> primitive may also be used in order to implement optional arguments:

  <\tm-fragment>
    <inactive*|<assign|hey|<macro|first|second|<style-with|src-compact|none|<if|<equal|<arg|second>|<uninit>>|Hey <arg|first>, you look lonely today...|Hey <arg|first> and <arg|second>, you form a nice couple!>>>>>
  </tm-fragment>

  However, <TeXmacs> is not clever enough to detect which arguments are optional and which arguments are accessible (<abbr|i.e.> which arguments can be edited by the user). Therefore, you will have to manually give this information using the <markup|drd-props> primitive. The <markup|case>, <markup|while> and <markup|for-each> primitives are explained in more detail in the <hlink|corresponding section|../../format/stylesheet/prim-control.en.tm> on the <hlink|<TeXmacs> primitives|../../format/stylesheet/stylesheet.en.tm>.

  <subsection|Computational markup>

  In the menus <menu|Source|Arithmetic>, <menu|Source|Text>, <menu|Source|Tuple> and <menu|Source|Condition> you will find different primitives for computing with integers, strings, tuples and boolean values. For instance, in the following code, the <markup|new-important> tag defines a new “important tag” as well as a variant in red:

  <\tm-fragment>
    <inactive*|<assign|new-important|<macro|name|<quasi|<style-with|src-compact|none|<style-with|src-compact|none|<assign|<unquote|<arg|name>>|<macro|x|<with|font-series|bold|<arg|x>>>>><style-with|src-compact|none|<assign|<unquote|<merge|<arg|name>|-red>>|<macro|x|<with|font-series|bold|color|red|<arg|x>>>>>>>>>>
  </tm-fragment>

  Here we use the <markup|merge> primitive in order to concatenate two strings. The different computational primitives are described in more detail in the <hlink|corresponding section|../../format/stylesheet/prim-functional.en.tm> on the <hlink|<TeXmacs> primitives|../../format/stylesheet/stylesheet.en.tm>.

  <section|Customizing the standard TeXmacs styles>

  Whenever the standard <TeXmacs> style files are inadequate for a given purpose, it is possible to write your own style files. However, designing your own style files from scratch may be a complex task, so it is usually preferable to customize the existing styles. This requires some understanding of the global architecture of the standard style files and a more precise understanding of the parts you wish to customize. In this section, we will explain the general principles. For more details, we refer to the chapter on the <hlink|principal <TeXmacs> tags|../design/style-language.en.tm>.

  <subsection|Organization of the style files and packages>

  Each standard <TeXmacs> style file or package is based on a potentially finite number of subpackages. From an abstract point of view, this organization may be represented by a labeled tree. For instance, the tree which corresponds to the <tmstyle|article> style is represented below:

  <\big-figure|<tree|<tmstyle|article>|<tree|<tmpackage|std>|<stack|<tformat|<table|<row|<cell|<tmpackage|std-markup>>>|<row|<cell|<tmpackage|std-symbol>>>|<row|<cell|<tmpackage|std-math>>>|<row|<cell|<tmpackage|std-list>>>|<row|<cell|<tmpackage|std-utils>>>|<row|<cell|<tmpackage|std-counter>>>|<row|<cell|<tmpackage|std-automatic>>>|<row|<cell|<tmpackage|list>>>|<row|<cell|<tmpackage|session>>>>>>>|<tree|<tmpackage|env>|<stack|<tformat|<table|<row|<cell|<tmpackage|env-base>>>|<row|<cell|<tmpackage|env-math>>>|<row|<cell|<tmpackage|env-theorem>>>|<row|<cell|<tmpackage|env-float>>>>>>>|<tree|<tmpackage|title-base>|<tmpackage|title-generic>>|<tmpackage|header-article>|<tree|<tmpackage|section-article>|<tmpackage|section-base>>>>
    The tree with the packages from which the <tmstyle|article> style has been built up. In order to save space, we have regrouped the numerous children of <tmpackage|std> and <tmpackage|env> in vertical lists.
  </big-figure>

  Most of the style packages correspond to a <abbr|d.t.d.> (data type definition) which contains the “abstract interface” of the package, <abbr|i.e.> the exported tags. For instance, the package <tmpackage|std-markup> corresponds to the <abbr|d.t.d.> <tmdtd|std-markup>. Sometimes however, several style packages match the same <abbr|d.t.d.>. For instance, both <tmpackage|header-article> and <tmpackage|header-book> match the <abbr|d.t.d.> <tmdtd|header>, since they merely implement different ways to render the same tags.

  When building your own style files or packages, you may use the <markup|use-package> primitive in order to include other packages. For instance, the <tmstyle|article> style essentially consists of the line

  <\tm-fragment>
    <inactive*|<use-package|std|env|title-generic|header-article|section-article>>
  </tm-fragment>

  More precisely, the <markup|use-package> package sequentially includes the style packages corresponding to its arguments. The packages should be in <verbatim|$TEXMACS_PACKAGE_PATH>, which contains <verbatim|.>, <verbatim|~/.TeXmacs/packages> and <verbatim|$TEXMACS_PATH/packages> by default. Furthermore rendering information for the source code like <markup|style-with> tags are discarded before evaluation of the files.

  <\remark>
    We strongly recommend the user to take a look at some of the standard style files and packages which can be found in

    <\verbatim>
      \ \ \ \ $TEXMACS_PATH/styles

      \ \ \ \ $TEXMACS_PATH/packages
    </verbatim>

    When loading using <shortcut|(interactive load-buffer)>, these paths are in the standard load path. For instance, if you want to take a look at the <tmpackage|std-markup> package, then it suffices to type <shortcut|(interactive load-buffer)>, followed by the file name <verbatim|std-markup.ts> and <shortcut|(kbd-return)>.
  </remark>

  <\remark>
    It is also possible to customize the presentation of the source code of the style files and packages themselves, by using other packages in addition to <tmstyle|source> or by using another major style file based on <tmstyle|source>. In that case, the extra markup provided by such packages may be used for presentation purposes of the source code, but it is not exported when using your package in another file.
  </remark>

  <subsection|General principles for customization>

  Style files and packages basically enrich the current typesetting environment with a combination of

  <\itemize>
    <item>Environment variables.

    <item>Tags for the end-user.

    <item>Customizable macros.
  </itemize>

  Furthermore, they may define some tags for intern implementation purposes, which will not be documented in this manual. They may also specify some logical properties of tags using the <markup|drd-props> primitive.

  Environment variables are almost always attributes for controlling the rendering of content, or counters for sections, equations, <abbr|etc.>. Although several simple tags for the end-user like <markup|strong> may be redefined in your own style files, this practice is not recommended for more complex tags like <markup|section>. Indeed, the <markup|section> tag involves many things like resetting subcounters, entering the title into the table of contents and so on. Therefore, special additional macros are provided the customization of such tags, like <markup|section-title>, <markup|section-clean> and <markup|section-toc>.

  <subsection|Customizing the general layout>

  The general layout of a document is mainly modified by setting the appropriate environment variables for <hlink|page layout|../../format/environment/env-page.en.tm> and <hlink|paragraph layout|../../format/environment/env-par.en.tm>. For instance, by including the following lines in your style file, you can set the page size to <verbatim|letter> and the left and right margins to <verbatim|2in>:

  <\tm-fragment>
    <\inactive*>
      <assign|page-type|letter>

      <assign|page-odd|2in>

      <assign|page-even|2in>

      <assign|page-right|2in>
    </inactive*>
  </tm-fragment>

  It should be noticed that the environment variables for page layout are quite different in <TeXmacs> and <TeX>/<LaTeX>. In order to make it easier to adapt <LaTeX> style files to <TeXmacs>, we have therefore provided the <tmpackage|std-latex> package, which emulates the environment variables from <TeX>/<LaTeX>. Typically, this allows you determine the global layout by lines like

  <\tm-fragment>
    <\inactive*>
      <assign|tex-odd-side-margin|<macro|20pt>>

      <assign|tex-even-side-margin|<macro|20pt>>

      <assign|tex-text-width|<macro|33pc>>
    </inactive*>
  </tm-fragment>

  We notice that macros which return lengths are considered as <hlink|lengths|../../format/basics/lengths.en.tm> themselves. In the case of the <TeX>/<LaTeX> emulation package, we actually <em|require> all lengths to be macros.

  The page headers and footers are usually not determined by global environment variables or macros, since they may change when a new chapter or section is started. Instead, <TeXmacs> provides the call-back macros <markup|header-title>, <markup|header-author>, <markup|header-primary> and <markup|header-secondary>. These macros are called when the document title or author are specified or when a new primary or secondary section is started (primary sections are typically chapters in books, or sections in articles). For instance, the following redefinition makes the principal section name appear on even pages, together with the current page number and a wide underline.

  <\tm-fragment>
    <inactive*|<assign|header-primary|<macro|title|nr|type|<assign|page-even-header|<quasiquote|<style-with|src-compact|none|<wide-std-underlined|<style-with|src-compact|none|<page-the-page><htab|5mm><unquote|<arg|title>>>>>>>>>>
  </tm-fragment>

  <subsection|Customizing list environments>

  Lists are made up of two principal ingredients: the outer list environment and the inner items. List environments may either be customized by customizing or redefining the rendering macros for these environments, or defining additional list environments which match the same abstract interface.

  The rendering of the outer list environment is controlled by the <markup|render-list> macro which takes the body of the list as its argument. For instance, consider the following redefinition of <markup|render-list>:

  <\tm-fragment>
    <inactive*|<assign|render-list|<macro|body|<style-with|src-compact|none|<surround|<no-page-break*><vspace*|0.5fn>|<right-flush><vspace|0.5fn><no-indent*>|<with|par-left|<plus|<value|par-left>|3fn>|par-right|<plus|<value|par-right>|3fn>|<arg|body>>>>>>>
  </tm-fragment>

  This redefinition affects the rendering of all list environments (itemize, enumerate, <abbr|etc.>) by reducing the right margin with a length of <verbatim|3fn>:

  <\with|render-list|<macro|body|<surround|<no-page-break*><vspace*|0.5fn>|<right-flush><vspace|0.5fn><no-indent*>|<with|par-left|<plus|<value|par-left>|3fn>|par-right|<plus|<value|par-right>|3fn>|<arg|body>>>>>
    <\itemize>
      <item>This text, which has been made so long that it does not fit on a single line, is indented on the right hand side by <verbatim|3fn>.

      <\enumerate>
        <item>This text is indented by an additional <verbatim|3fn> on the right hand side, since it occurs inside a second list environment.
      </enumerate>

      <item>Once again: this text, which has been made so long that it does not fit on a single line, is indented on the right hand side by <verbatim|3fn>.
    </itemize>
  </with>

  In a similar way, you may customize the rendering of list items by redefining the macros <markup|aligned-item> and <markup|compact-item>. These macros both take one argument with the text of the item and render it either in a right-aligned way (such that subsequent text is left aligned) or in a left-aligned way (such that subsequent text may not be aligned). For instance, consider the following redefinition of <markup|aligned-item>:

  <\tm-fragment>
    <inactive*|<assign|aligned-item|<macro|x|<style-with|src-compact|none|<vspace*|0.5fn><with|par-first|-3fn|<yes-indent>><resize|<with|color|red|<arg|x>>|<minus|1r|2.5fn>||<plus|1r|0.5fn>|>>>>>
  </tm-fragment>

  Then items inside all list environments with compact items will appear in red:

  <\with|aligned-item|<macro|x|<vspace*|0.5fn><with|par-first|-3fn|<yes-indent>><resize|<with|color|red|<arg|x>>|<minus|1r|2.5fn>||<plus|1r|0.5fn>|>>>
    <\itemize>
      <item>This list and aligned descriptions have red items.

      <\description-aligned>
        <item*|C1>First condition.

        <item*|C2>Second condition.
      </description-aligned>

      <item>The items of compact description lists are rendered using <markup|compact-item>.

      <\description-compact>
        <item*|Gnus and gnats>Nice beasts.

        <item*|Micros and softies>Evil beings.
      </description-compact>
    </itemize>
  </with>

  <\remark>
    The macros <markup|aligned-item> and <markup|compact-item> are required to produce inline content, so that they may be used in order to surround blocks. In particular, several other internal macros (<markup|aligned-space-item>, <markup|long-compact-strong-dot-item>, <abbr|etc.>) are based on <markup|aligned-item> and <markup|compact-item>, and used for the rendering of the different types of lists (<markup|itemize-arrow>, <markup|description-long>, <abbr|etc.>). In the future, we also plan to extend <markup|item> and <markup|item*> with a compulsory <src-arg|body> argument. When customizing the list environments, it is important to keep that in mind, so as to make your style-sheets upward compatible.
  </remark>

  The <tmdtd|std-list> <abbr|d.t.d.> also provides a macro <markup|new-list> to define new lists. Its syntax is <explain-macro|new-list|name|item-render|item-transform>, where <src-arg|name> is the name of the new list environment, <src-arg|item-render> an (inline) macro for rendering the item and <src-arg|item-transform> an additional transformation which is applied on the item text. For instance, the <markup|enumerate-roman> environment is defined by

  <\tm-fragment>
    <\inactive*>
      <new-list|enumerate-roman|<value|aligned-dot-item>|<macro|x|<number|<arg|x>|roman>>>
    </inactive*>
  </tm-fragment>

  <subsection|Customizing numbered textual environments>

  <TeXmacs> provides three standard types of numbered textual environments: theorem-like environments, remark-like environments and exercise-like environments. The following aspects of these environments can be easily customized:

  <\itemize>
    <item>Adding new environments.

    <item>Modifying the rendering of the environments.

    <item>Numbering the theorems in a different way.
  </itemize>

  <paragraph*|Defining new environments>

  First of all, new environments can be added using the meta-macros <markup|new-theorem>, <markup|new-remark> and <markup|new-exercise>. These environments take two arguments: the name of the environment and the name which is used for its rendering. For instance, you may wish to define the environment <markup|experiment> by

  <\tm-fragment>
    <inactive*|<new-theorem|experiment|Experiment>>
  </tm-fragment>

  When available in the <TeXmacs> dictionaries, the text “Experiment” will be automatically translated when your document is written in a foreign language. In the section about <hlink|how to define new environments|../../../main/styles/env/env-base-dtd.en.tm>, it is also explained how to define other numbered textual environments (besides theorems, remarks and exercises).

  <paragraph*|Customization of the rendering>

  The principal rendering of the environments can be customized by redefining the <markup|render-theorem>, <markup|render-remark> and <markup|render-exercise> macros. These macros take the <src-arg|name> of the environment (like “Theorem <no-break>1.2”) and its <src-arg|body> as arguments. For instance, if you want theorems to appear in a slightly indented way, with a slanted body, then you may redefine <markup|render-theorem> as follows:

  <\tm-fragment>
    <inactive*|<assign|render-theorem|<\macro|which|body>
      <padded-normal|1fn|1fn|<surround|<theorem-name|<arg|which><theorem-sep>>||<with|font-shape|slanted|par-left|<plus|<value|par-left>|1.5fn>|<arg|body>>>>
    </macro>>>
  </tm-fragment>

  This redefinition produces the following effect:

  <\with|render-theorem|<\macro|which|body>
    <padded-normal|1fn|1fn|<surround|<theorem-name|<arg|which><theorem-sep>>||<with|font-shape|slanted|par-left|<plus|<value|par-left>|1.5fn>|<arg|body>>>>
  </macro>>
    <\theorem>
      This is a theorem which has been typeset in a slanted font.
    </theorem>
  </with>

  By default, the theorems are rendered as remarks with the only difference that their bodies are typeset in an italic font. Hence, redefining the <markup|render-remark> macro will also affect the rendering of theorems. The default <markup|render-proof> macro is also based on <markup|render-remark>.

  Instead of redefining the entire rendering, the user might just wish to customize the way names of theorems are rendered or redefine the separator between the name and the body. As the user may have noticed by examining the above redefinition of <markup|render-theorem>, these aspects are controlled by the macros <markup|theorem-name> and <markup|theorem-sep>. For instance, consider the following redefinitions:

  <\tm-fragment>
    <inactive*|<assign|theorem-name|<macro|name|<with|color|dark red|font-series|bold|<arg|name>>>>>

    <inactive*|<assign|theorem-sep|<macro|: >>>
  </tm-fragment>

  Then theorem-like environments will be rendered as follows:

  <\with|theorem-name|<macro|name|<with|color|dark red|font-series|bold|<arg|name>>>|theorem-sep|<macro|: >>
    <\proposition>
      This proposition is rendered in is a fancy way.
    </proposition>
  </with>

  <paragraph*|Customization of the numbering>

  In the sections about <hlink|counters and counter groups|../../../main/styles/std/std-counter-dtd.en.tm>, it is explained how to customize the counters of numbered environments for particular purposes. For instance, by redefining <markup|inc-theorem>, you may force theorems to reset the counter of corollaries:

  <\tm-fragment>
    <inactive*|<style-with|src-compact|none|<quasi|<style-with|src-compact|none|<assign|inc-theorem|<macro|<compound|<unquote|<value|inc-theorem>>><reset-corollary>>>>>>>
  </tm-fragment>

  Notice the trick with <markup|quasi> and <markup|unquote> in order to take into account additional action which might have been undertaken by the previous value of the macro <markup|inc-theorem>.

  The following code from <verbatim|number-long-article.ts> is used in order to prefix all standard environments with the number of the current section:

  <\tm-fragment>
    <inactive*|<assign|section-clean|<macro|<reset-subsection><reset-std-env>>>>

    <inactive*|<assign|display-std-env|<macro|nr|<section-prefix><arg|nr>>>>
  </tm-fragment>

  <subsection|Customizing sectional tags>

  By default, <TeXmacs> provides the standard sectional tags from <LaTeX> <markup|part>, <markup|chapter>, <markup|section>, <markup|subsection>, <markup|subsubsection>, <markup|paragraph>, <markup|subparagraph>, as well as the special tag <markup|appendix>. <TeXmacs> also implements the unnumbered variants <markup|part*>, <markup|chapter*>, <abbr|etc.> and special section-like tags <markup|bibliography>, <markup|table-of-contents>, <markup|the-index>, <markup|the-glossary>, <markup|list-of-figures>, <markup|list-of-tables>.

  <\remark>
    <label|section-extra-argument-rem>Currently, the sectional tags take one argument, the section title, but a second argument with the body of the section is planned to be inserted in the future (see the experimental <tmpackage|structured-section> package). For this reason (among others), style files should never redefine the main sectional tags, but rather customize special macros which have been provided to this effect.
  </remark>

  From a global point of view, an important predicate macro is <markup|sectional-short-style>. When it evaluates to <verbatim|true>, then appendices, tables of contents, <abbr|etc.> are considered to be at the same level as sections. In the contrary case, they are at the same level as chapters. Typically, articles use the short sectional style whereas book use the long style.

  The rendering of a sectional tag <markup|<em|x>> is controlled through the macros <markup|<em|x>-sep>, <markup|<em|x>-title> and <markup|<em|x>-numbered-title>. The <markup|<em|x>-sep> macro prints the separator between the section number and the section title. It defaults to the macro <markup|sectional-sep>, which defaults in its turn to a wide space. For instance, after redefining

  <\tm-fragment>
    <inactive*|<assign|sectional-sep|<macro| -- >>>
  </tm-fragment>

  sectional titles would typically look like

  <\tm-fragment>
    <with|section-nr|1|sectional-sep|<macro| -- >|<section-numbered-title|Hairy GNUs>>
  </tm-fragment>

  The <markup|<em|x>-title> and <markup|<em|x>-numbered-title> macros respectively specify how to render unnumbered and numbered section titles. Usually, the user only needs to modify <markup|<em|x>-title>, since <markup|<em|x>-numbered-title> is based on <markup|<em|x>-title>. However, if the numbers have to be rendered in a particular way, then it may be necessary to redefine <markup|<em|x>-numbered-title>. For instance, consider the redefinition

  <\tm-fragment>
    <inactive*|<assign|subsection-numbered-title|<macro|name|<style-with|src-compact|none|<sectional-normal|<with|font-series|bold|<the-subsection>. ><arg|name>>>>>>
  </tm-fragment>

  This has the following effect on the rendering of subsection titles:

  <\tm-fragment>
    <with|section-nr|2|subsection-nr|3|the-subsection|<macro|<value|section-nr>.<value|subsection-nr>>|subsection-numbered-title|<macro|name|<sectional-normal|<with|font-series|bold|<the-subsection>. ><arg|name>>>|<subsection-numbered-title|Very hairy GNUs>>
  </tm-fragment>

  Notice that the <tmpackage|section-base> package provides several <hlink|useful helper macros|../../../main/styles/section/section-base-helper.en.tm> like <markup|sectional-normal>.

  <\remark>
    Sectional titles can either be rendered in a “short” or in the “long” fashion. By default, paragraphs and subparagraphs use the short rendering, for which the body starts immediately at the right of the title:

    <\tm-fragment>
      <paragraph-title|My paragraph>Blah, blah, and more blahs...
    </tm-fragment>

    All other sectional tags use the long rendering, in which case the section title takes a separate line on its own:

    <\tm-fragment>
      <section-title|My section>

      Blah, blah, and more blahs...
    </tm-fragment>

    We do not recommend to modify the standard settings (<abbr|i.e.> to render paragraphs in a long way or sections in a short way). If you really want to do so, then we recommend to redefine the corresponding environment variables <inactive|<value|enrich-x-long>>. This will ensure upward compatibility when sectional tags will take an additional argument (see remark <reference|section-extra-argument-rem>).
  </remark>

  Besides their rendering, several other aspects of sectional tags can be customized:

  <\itemize>
    <item>The call-back macro <markup|<em|x>-clean> can be used for cleaning some counters when a new section is started. For instance, in order to prefix all standard environments by the section counter, you may use the following lines:

    <\tm-fragment>
      <\inactive*>
        <assign|section-clean|<macro|<reset-subsection><reset-std-env>>>

        <assign|display-std-env|<macro|nr|<section-prefix><arg|nr>>>
      </inactive*>
    </tm-fragment>

    <item>The call-back macro <markup|<em|x>-header> should be used in order to modify page headers and footers when a new section is started. Typically, this macro should call <markup|header-primary>, or <markup|header-secondary>, or do nothing.

    <item>The call-back macro <markup|<em|x>-toc> should be used in order to customize the way new sections appear in the table of contents.
  </itemize>

  <subsection|Customizing the treatment of title information>

  <TeXmacs> uses the <markup|doc-data> tag in order to specify global data for the document. These data are treated in two stages by the <markup|doc-data> macro. <hlink|First|../../../main/styles/header/header-title-global.en.tm>, the document data are separated into several categories, according to whether the data should be rendered as a part of the main title or in footnotes or the abstract. <hlink|Secondly|../../../main/styles/header/header-title-customize.en.tm>, the data in each category are rendered using suitable macros.

  Each child of the <markup|doc-data> is a tag with some specific information about the document. Currently implemented tags are <markup|doc-title>, <markup|doc-subtitle>, <markup|doc-author>, <markup|doc-date>, <markup|doc-running-title>, <markup|doc-running-author>, <markup|doc-keywords>, <markup|doc-msc> and <markup|doc-note>. The <markup|doc-author> tag may occur several times. The <markup|author-data> tag is used in order to specify structured data for each of the authors of the document. Each child of the <markup|author-data> tag is a tag with information about the corresponding author. Currently implemented tags with author information are <markup|author-name>, <markup|author-affiliation>, <markup|author-email>, <markup|author-homepage> and <markup|author-note>.

  Most of the tags listed above also correspond to macros for rendering the corresponding information as part of the main title. For instance, if the date should appear in bold italic at a distance of at least <verbatim|1fn> from the other title fields, then you may redefine <markup|doc-date> as

  <\tm-fragment>
    <\inactive*>
      <assign|doc-date|<macro|body|<style-with|src-compact|none|<vspace*|1fn><doc-title-block|<with|font-shape|italic|font-series|bold|<arg|body>>><vspace|1fn>>>>
    </inactive*>
  </tm-fragment>

  The <markup|title-block> macro is used in order to make the text span appropriately over the width of the title. The <markup|doc-title> and <markup|author-name> are special in the sense that they also render possible references to footnotes. For this reason, you should rather customize the <markup|doc-render-title> and <markup|author-render-name> macros in order to customize the rendering of the title and the name themselves.

  Notice also that the <markup|doc-running-title> and <markup|author-running-author> macros do not render anything, but rather call the <markup|header-title> and <markup|header-author> call-backs for setting the appropriate global page headers and footers. By default, the running title and author are extracted from the usual title and author names.

  In addition to the rendering macros which are present in the document, the main title (including author information, the date, <abbr|etc.>) is rendered using the <markup|doc-make-title> macro. The author information, as part of the main title, is rendered using <markup|render-doc-author> or <markup|render-doc-authors>, depending on whether the document has one or more authors. Footnotes to the title or to one of the authors are rendered using <markup|doc-title-note> <abbr|resp.> <markup|doc-author-note>. These footnote macros always expect a <markup|document> tag on input, because they may compress it into a horizontal concatenation.

  The first stage of processing the document data is more complex and the reader is invited to take a look at the <hlink|short descriptions|../../../main/styles/header/header-title-global.en.tm> of the macros which are involved in this process. It is also good to study the definitions of these macros in the <hlink|package itself|$TEXMACS_PATH/packages/header/title-base.ts>. In order to indicate the way things work, we finish with an example on how the email address and homepage of an author can be rendered in a footnote instead of the main title:

  <\tm-fragment>
    <\inactive*>
      <assign|doc-author-main|<\macro|data>
        <\quasi>
          <unquote*|<select|<quote-arg|data>|author-name>>

          <unquote*|<select|<quote-arg|data>|author-affiliation>>
        </quasi>
      </macro>>

      <assign|doc-author-data-note|<xmacro|data|<\quasi>
        <unquote*|<select|<quote-arg|data>|author-email>>

        <unquote*|<select|<quote-arg|data>|author-homepage>>

        <unquote*|<select|<quote-arg|data>|author-note|document|<pat-any>>>
      </quasi>>>
    </inactive*>
  </tm-fragment>

  <section|Further notes and tips>

  <subsection|Customizing arbitrary tags>

  Imagine that you want to change the rendering of a given tag, like <markup|lemma>. As a general rule, <TeXmacs> provides a set of well-chosen macros which can be customized by the user so as to obtain the desired effect. For instance, as we have seen <hlink|above|../customize/customize-theorems.en.tm>, you should use modify one of the macros <markup|render-theorem>, <markup|theorem-name> or <markup|theorem-sep> in order to customize the rendering of <markup|lemma> and all other theorem-like environments.

  However, in some cases, it may not be clear which “well-chosen” macro to customize. If we just wanted to change the presentation of lemmas and not of any other theorem-like environments, then we clearly cannot modify <markup|render-theorem>, <markup|theorem-name> or <markup|theorem-sep>. In other cases, the user may not want to invest his time in completely understanding the macro hierarchy of <TeXmacs>, and find out about the existence of <markup|render-theorem>, <markup|theorem-name> and <markup|theorem-sep>.

  So imagine that you want all lemmas to appear in red. One thing \ you can always do is copy the original definition of lemmas in a safe place and redefine the lemma macro on top of the original definition:

  <\tm-fragment>
    <\inactive*>
      <assign|orig-lemma|<value|lemma>>

      <assign|lemma|<macro|body|<with|color|red|<orig-lemma|<arg|body>>>>>
    </inactive*>
  </tm-fragment>

  Alternatively, if only the text inside the lemma should be rendered in red, then you may do:

  <\tm-fragment>
    <\inactive*>
      <assign|orig-lemma|<value|lemma>>

      <assign|lemma|<macro|body|<orig-lemma|<with|color|red|<arg|body>>>>>
    </inactive*>
  </tm-fragment>

  Of course, you have to be careful that the name <markup|orig-lemma> is not already in use.

  Another frequent situation is that you only want to modify the rendering of a tag when it is used inside another one. On the web, the <em|Cascading Style Sheet> language (<acronym|CSS>) provides a mechanism for doing this. In <TeXmacs>, you may simulate this behaviour by redefining macros inside a <markup|with>. For instance, imagine that we want the inter-paragraph space inside lists inside theorem-like environments to vanish. Then we may use:

  <\tm-fragment>
    <\inactive*>
      <assign|orig-render-theorem|<value|render-theorem>>

      <assign|render-theorem|<macro|name|body|<with|orig-render-list|<value|render-list>|<with|render-list|<macro|x|<orig-render-list|<arg|x>>>|<style-with|src-compact|none|<orig-render-theorem|<arg|name>|<arg|body>>>>>>>
    </inactive*>
  </tm-fragment>

  On the one hand side, this mechanism is a bit more complex than <acronym|CSS>, where it suffices to respecify the <src-var|par-par-sep> attribute of lists inside theorems. On the other hand, it is also more powerful, since the <markup|render-theorem> macro applies to all theorem-like environments at once. Furthermore, if the above mechanism is to be used frequently, then real hackers may simplify the notations using further macro magic.

  <subsection|Standard utilities>

  In the <hlink|package <tmpackage|std-utils>|../../../main/styles/std/std-utils-dtd.en.tm>, the user may find several useful additional macros for writing style files. It mainly contains macros for

  <\itemize>
    <item>Writing block environments which span over the entire paragraph width. Notice that the <tmpackage|title-base> package provides some <hlink|additional macros|../../../main/styles/section/section-base-helper.en.tm> for wide section titles.

    <item>Writing wide block environments which are underlined, overlined or in a frame box.

    <item>Recursive indentation.

    <item>Setting page headers and footers.

    <item>Localization of text.
  </itemize>

  It is good practice to use these standard macros whenever possible when writing style files. Indeed, the low-level <TeXmacs> internals may be subject to minor changes. When building upon standard macros with a clear intention, you increase the upward compatibility of your style-sheets.

  <chapter|Customizing TeXmacs>

  One major feature of <TeXmacs> is that it can be highly customized. First of all, the most important aspects of the program can be <hlink|configured|../config/man-configuration.en.tm> in <menu|Edit|Preferences>. Most other parts of <TeXmacs> can be entirely adapted or reprogrammed using the <name|Guile>/<name|Scheme> extension language. In the sequel, we give a short overview of how this works in simple cases.

  <section|Introduction to the Guile extension language>

  Like <name|Emacs>, <TeXmacs> comes with a <name|Lisp>-like extension language, namely the <with|font-shape|small-caps|Guile Scheme> dialect from the <with|font-shape|small-caps|GNU> project. For documentation about <with|font-shape|small-caps|Guile Scheme>, we refer to\ 

  <\verbatim>
    \ \ \ http://www.gnu.org/software/guile/guile.html
  </verbatim>

  <scheme> has the advantage that it may be extended with extern C and C++ types and routines. In our case, we have extended <scheme> with routines which you can use to create your own menus and key-combinations, and even to write your own extensions to <TeXmacs>.

  If you have downloaded the source files of <TeXmacs>, then it may be interesting for you to take a look at the files\ 

  <\verbatim>
    \ \ \ Guile/Glue/build-glue-basic.scm<next-line> \ \ Guile/Glue/build-glue-editor.scm<next-line> \ \ Guile/Glue/build-glue-server.scm
  </verbatim>

  These three “glue” files contain the C++ routines, which are visible within <scheme>. In what follows, we will discuss some of the most important routines. We plan to write a more complete reference guide later. You may also take a look at the scheme <verbatim|.scm> files in the directory <verbatim|$TEXMACS_PATH/progs>.

  <section|Writing your own initialization files>

  When starting up, <TeXmacs> executes the file

  <\verbatim>
    \ \ \ \ $TEXMACS_PATH/progs/init-texmacs.scm
  </verbatim>

  as well as your personal initialization file

  <\verbatim>
    \ \ \ \ $TEXMACS_HOME_PATH/progs/my-init-texmacs.scm
  </verbatim>

  if it exists. By default, the path <verbatim|$TEXMACS_HOME_PATH> equals <verbatim|%appdata%\\TeXmacs> on <name|Windows> or <verbatim|$HOME/.TeXmacs> on <name|GNU>/<name|Linux> and <name|macOS>. Similarly, each time you create a new buffer (either by creating a new file or opening an already existing one), the file

  <\verbatim>
    \ \ \ \ $TEXMACS_PATH/progs/init-buffer.scm
  </verbatim>

  is executed, as well as

  <\verbatim>
    \ \ \ \ $TEXMACS_HOME_PATH/progs/my-init-buffer.scm
  </verbatim>

  if it exists.

  <\example>
    Suppose you want to add a style package <verbatim|CustomStyle.ts> of your own to every new document you create. You can add the following lines to <verbatim|$TEXMACS_HOME_PATH/progs/my-init-buffer.scm>:

    <\scm-code>
      (when (buffer-newly-created? (current-buffer))

      \ \ (set-style-list (append (get-style-list) '("CustomStyle")))

      \ \ (buffer-pretend-saved (current-buffer)))
    </scm-code>

    First we check whether the <scm|current-buffer> has been newly created in order not to apply the style to existing files when we open them. Then we add the new package (instead of changing it with <scm|init-style>) using <scm|set-style-list> and finally we call <scm|buffer-pretend-saved> to prevent <TeXmacs> from thinking the buffer has been modified by the change of style, or it would always prompt asking for confirmation before closing an empty buffer.
  </example>

  <section|Creating your own dynamic menus>

  You may define a menu with name <scm-arg|name> either using

  <\scm-code>
    (menu-bind <scm-arg|name> . <scm-arg|def>)
  </scm-code>

  or

  <\scm-code>
    (tm-menu (<scm-arg|name>) . <scm-arg|def>)
  </scm-code>

  Here <scm-arg|def> is a program which represents the entries of the menu. In particular, you may take a look at the files in the directory

  <\verbatim>
    \ \ \ \ $TEXMACS_PATH/progs/menu
  </verbatim>

  in order to see how the standard <TeXmacs> menus are defined. In the case of <scm|tm-menu>, it is possible to specify additional arguments, which makes it possible to dynamically construct more complex menus which depend on parameters.

  More precisely, the program <verbatim|<em|def>> in <scm|menu-bind> or <scm|tm-menu> is a list of entries of one of the following forms:

  <\scm-code>
    (=\<gtr\> "pulldown menu name" <scm-arg|menu-definition>)

    (-\<gtr\> "pullright menu name" <scm-arg|menu-definition>)

    ("entry" <scm-arg|action>)

    ---

    (if <scm-arg|condition> <scm-arg|menu-definition>)

    (when condition menu-definition)

    (link <scm-arg|variable>)

    (former)
  </scm-code>

  The constructors <scm|=\<gtr\>> and <scm|-\<gtr\>> are used to create <with|font-shape|italic|pulldown> or <with|font-shape|italic|pullright> menus and <scm-arg|menu-definition> should contain a program which creates the submenu. In the main (or system) menu bar all root items are pulldown menus and all submenus of these are pullright. Both pulldown and pullright may be used in toolbars or other widgets.

  The constructor <scm|("entry" <scm-arg|action>)> creates an ordinary entry, where <scm-arg|action> will be compiled and executed when you click on <scm|entry>. Items of a menu may be separated using <verbatim|--->. The constructor <scm|if> is used for inserting menu items only if a certain <scm-arg|condition> is satisfied (for instance, if we are in math mode), whereas <scm|while> always inserts the item but deactivates (e.g. greying it out) it <scm-arg|condition> is not met.

  If you declared a menu <scm-arg|name>, then you may use this menu indirectly using the <scm|link> constructor, thus one may link any such “indirect” submenu to as many menus as desired.

  Finally, new items may be added to any given menu <with|font-shape|italic|a posteriori> using <scm|former>, as in the following example:

  <\scm-code>
    (tm-menu (tools-menu)

    \ \ (former)

    \ \ ---

    \ \ ("New item" (noop)))
  </scm-code>

  The main <TeXmacs> menus are:

  <\itemize-dot>
    <item><scm|texmacs-menu>: contains the root entries of the main menu bar at the top of the window (or desktop under <name|MacOS>). It uses <scm|link> to display <scm|file-menu>, <scm|edit-menu>, <scm|insert-menu>, <scm|text-menu>, <scm|paragraph-menu>, <scm|document-menu> and <scm|help-menu> among others.

    <item><scm|texmacs-main-icons>: contains the main toolbar, which typically features buttons to open and save files, copy and paste text, etc.

    <item><scm|texmacs-mode-icons>: contains the icons which depend on the current editing mode, that is: mathematics, text, code, etc.

    <item><scm|texmacs-focus-icons>: these icons change with the cursor. One should install here any icons that are specific to a particular tag or context.

    <item><scm|texmacs-extra-icons>: custom icons for user extensions.

    <item><scm|texmacs-popup-menu>: the menu which pops up when the user right-clicks on a <TeXmacs> document. Extending or replacing this menu is useful for instance for plugin writers: you may want to display some extra actions while removing others when the user in inside a session for your plugin.
  </itemize-dot>

  <section|Creating your own keyboard shortcuts>

  Keymaps are specified using the command

  <\scm-code>
    (kbd-map . <scm-arg|keymaps>)
  </scm-code>

  Optionally, you may specify conditions which must be satisfied for the keymap to be valid using the <scm|:mode> option. For instance, the command

  <\scm-code>
    (kbd-map (:mode in-math?) . <scm-arg|keymaps>)
  </scm-code>

  specifies a list of keyboard shortcuts which will only be valid in math-mode. Each item in <scm-arg|keymaps> is of one of the following forms:

  <\scm-code>
    (<em|key-combination> <scm-arg|action_1> ... <scm-arg|action_n>)

    (<em|key-combination> <scm-arg|result>)

    (<em|key-combination> <scm-arg|result> <scm-arg|help-message>)
  </scm-code>

  In the first case, the <scm-arg|action_i> are <scheme> commands associated to the string <scm-arg|key-combination>. In the second and third case, <scm-arg|result> is a string which is to be inserted in the text when the <scm-arg|key-combination> has been completed. An optional <scm-arg|help-message> may be displayed when the <scm-arg|key-combination> is finished.

  <section|Other interesting files>

  Some other files may also be worth looking at:

  <\itemize>
    <item><verbatim|$TEXMACS_PATH/fonts/enc> contains encodings for different <TeX> fonts.

    <item><verbatim|$TEXMACS_PATH/fonts/virtual> contains definitions of virtual characters.

    <item><verbatim|$TEXMACS_PATH/langs/natural/dic> contains the current dictionaries used by <TeXmacs>.

    <item><verbatim|$TEXMACS_PATH/langs/natural/hyphen> contains hyphenation patterns for various languages.

    <item><verbatim|$TEXMACS_PATH/progs/fonts> contains <scheme> programs for setting up the fonts.
  </itemize>

  \;
</body>

<\initial>
  <\collection>
    <associate|page-height|auto>
    <associate|page-medium|papyrus>
    <associate|page-screen-margin|false>
    <associate|page-type|a4>
    <associate|page-width|auto>
    <associate|save-aux|false>
  </collection>
</initial>
